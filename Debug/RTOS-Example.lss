
RTOS-Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000bfec  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040bfec  0040bfec  0001bfec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20400000  0040bff4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000028c  204009c0  0040c9b4  000209c0  2**2
                  ALLOC
  4 .stack        00002004  20400c4c  0040cc40  000209c0  2**0
                  ALLOC
  5 .heap         00000200  20402c50  0040ec44  000209c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209ee  2**0
                  CONTENTS, READONLY
  8 .debug_info   000227c7  00000000  00000000  00020a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004839  00000000  00000000  0004320e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000f016  00000000  00000000  00047a47  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001010  00000000  00000000  00056a5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001618  00000000  00000000  00057a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00024617  00000000  00000000  00059085  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00011abf  00000000  00000000  0007d69c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a0fe1  00000000  00000000  0008f15b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000403c  00000000  00000000  0013013c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	50 2c 40 20 81 0b 40 00 7f 0b 40 00 7f 0b 40 00     P,@ ..@...@...@.
  400010:	7f 0b 40 00 7f 0b 40 00 7f 0b 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	71 0f 40 00 7f 0b 40 00 00 00 00 00 11 10 40 00     q.@...@.......@.
  40003c:	75 10 40 00 7f 0b 40 00 7f 0b 40 00 7f 0b 40 00     u.@...@...@...@.
  40004c:	7f 0b 40 00 7f 0b 40 00 7f 0b 40 00 7f 0b 40 00     ..@...@...@...@.
  40005c:	7f 0b 40 00 7f 0b 40 00 00 00 00 00 45 06 40 00     ..@...@.....E.@.
  40006c:	59 06 40 00 6d 06 40 00 7f 0b 40 00 7f 0b 40 00     Y.@.m.@...@...@.
  40007c:	7f 0b 40 00 81 06 40 00 95 06 40 00 7f 0b 40 00     ..@...@...@...@.
  40008c:	7f 0b 40 00 7f 0b 40 00 7f 0b 40 00 7f 0b 40 00     ..@...@...@...@.
  40009c:	7f 0b 40 00 7f 0b 40 00 7f 0b 40 00 7f 0b 40 00     ..@...@...@...@.
  4000ac:	7f 0b 40 00 7f 0b 40 00 7f 0b 40 00 7f 0b 40 00     ..@...@...@...@.
  4000bc:	7f 0b 40 00 7f 0b 40 00 7f 0b 40 00 7f 0b 40 00     ..@...@...@...@.
  4000cc:	7f 0b 40 00 7f 0b 40 00 7f 0b 40 00 7f 0b 40 00     ..@...@...@...@.
  4000dc:	7f 0b 40 00 7f 0b 40 00 7f 0b 40 00 7f 0b 40 00     ..@...@...@...@.
  4000ec:	7f 0b 40 00 7f 0b 40 00 7f 0b 40 00 7f 0b 40 00     ..@...@...@...@.
  4000fc:	7f 0b 40 00 7f 0b 40 00 7f 0b 40 00 7f 0b 40 00     ..@...@...@...@.
  40010c:	7f 0b 40 00 7f 0b 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 7f 0b 40 00 7f 0b 40 00 7f 0b 40 00     ......@...@...@.
  40012c:	7f 0b 40 00 7f 0b 40 00 7f 0b 40 00 7f 0b 40 00     ..@...@...@...@.
  40013c:	7f 0b 40 00 7f 0b 40 00 7f 0b 40 00 7f 0b 40 00     ..@...@...@...@.
  40014c:	7f 0b 40 00 7f 0b 40 00 7f 0b 40 00 7f 0b 40 00     ..@...@...@...@.
  40015c:	7f 0b 40 00 7f 0b 40 00 7f 0b 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009c0 	.word	0x204009c0
  400184:	00000000 	.word	0x00000000
  400188:	0040bff4 	.word	0x0040bff4

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	0040bff4 	.word	0x0040bff4
  4001c8:	204009c4 	.word	0x204009c4
  4001cc:	0040bff4 	.word	0x0040bff4
  4001d0:	00000000 	.word	0x00000000

004001d4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001d4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX/2);
  4001d6:	4810      	ldr	r0, [pc, #64]	; (400218 <sysclk_init+0x44>)
  4001d8:	4b10      	ldr	r3, [pc, #64]	; (40021c <sysclk_init+0x48>)
  4001da:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001dc:	213e      	movs	r1, #62	; 0x3e
  4001de:	2000      	movs	r0, #0
  4001e0:	4b0f      	ldr	r3, [pc, #60]	; (400220 <sysclk_init+0x4c>)
  4001e2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001e4:	4c0f      	ldr	r4, [pc, #60]	; (400224 <sysclk_init+0x50>)
  4001e6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001e8:	2800      	cmp	r0, #0
  4001ea:	d0fc      	beq.n	4001e6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001ec:	4b0e      	ldr	r3, [pc, #56]	; (400228 <sysclk_init+0x54>)
  4001ee:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001f0:	4a0e      	ldr	r2, [pc, #56]	; (40022c <sysclk_init+0x58>)
  4001f2:	4b0f      	ldr	r3, [pc, #60]	; (400230 <sysclk_init+0x5c>)
  4001f4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001f6:	4c0f      	ldr	r4, [pc, #60]	; (400234 <sysclk_init+0x60>)
  4001f8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001fa:	2800      	cmp	r0, #0
  4001fc:	d0fc      	beq.n	4001f8 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001fe:	2002      	movs	r0, #2
  400200:	4b0d      	ldr	r3, [pc, #52]	; (400238 <sysclk_init+0x64>)
  400202:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400204:	2000      	movs	r0, #0
  400206:	4b0d      	ldr	r3, [pc, #52]	; (40023c <sysclk_init+0x68>)
  400208:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40020a:	4b0d      	ldr	r3, [pc, #52]	; (400240 <sysclk_init+0x6c>)
  40020c:	4798      	blx	r3

	/* Set a flash wait state depending on the master clock frequency */
	system_init_flash(sysclk_get_cpu_hz() / CONFIG_SYSCLK_DIV);
  40020e:	4802      	ldr	r0, [pc, #8]	; (400218 <sysclk_init+0x44>)
  400210:	4b02      	ldr	r3, [pc, #8]	; (40021c <sysclk_init+0x48>)
  400212:	4798      	blx	r3
  400214:	bd10      	pop	{r4, pc}
  400216:	bf00      	nop
  400218:	08f0d180 	.word	0x08f0d180
  40021c:	00400d55 	.word	0x00400d55
  400220:	00400745 	.word	0x00400745
  400224:	00400799 	.word	0x00400799
  400228:	004007a9 	.word	0x004007a9
  40022c:	20183f01 	.word	0x20183f01
  400230:	400e0600 	.word	0x400e0600
  400234:	004007b9 	.word	0x004007b9
  400238:	004006a9 	.word	0x004006a9
  40023c:	004006e1 	.word	0x004006e1
  400240:	00400c49 	.word	0x00400c49

00400244 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400248:	b980      	cbnz	r0, 40026c <_read+0x28>
  40024a:	460c      	mov	r4, r1
  40024c:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  40024e:	2a00      	cmp	r2, #0
  400250:	dd0f      	ble.n	400272 <_read+0x2e>
  400252:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400254:	4e08      	ldr	r6, [pc, #32]	; (400278 <_read+0x34>)
  400256:	4d09      	ldr	r5, [pc, #36]	; (40027c <_read+0x38>)
  400258:	6830      	ldr	r0, [r6, #0]
  40025a:	4621      	mov	r1, r4
  40025c:	682b      	ldr	r3, [r5, #0]
  40025e:	4798      	blx	r3
		ptr++;
  400260:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400262:	42bc      	cmp	r4, r7
  400264:	d1f8      	bne.n	400258 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400266:	4640      	mov	r0, r8
  400268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40026c:	f04f 38ff 	mov.w	r8, #4294967295
  400270:	e7f9      	b.n	400266 <_read+0x22>
	for (; len > 0; --len) {
  400272:	4680      	mov	r8, r0
  400274:	e7f7      	b.n	400266 <_read+0x22>
  400276:	bf00      	nop
  400278:	20400bd8 	.word	0x20400bd8
  40027c:	20400bd0 	.word	0x20400bd0

00400280 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400280:	3801      	subs	r0, #1
  400282:	2802      	cmp	r0, #2
  400284:	d815      	bhi.n	4002b2 <_write+0x32>
{
  400286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40028a:	460e      	mov	r6, r1
  40028c:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  40028e:	b19a      	cbz	r2, 4002b8 <_write+0x38>
  400290:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400292:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4002cc <_write+0x4c>
  400296:	4f0c      	ldr	r7, [pc, #48]	; (4002c8 <_write+0x48>)
  400298:	f8d8 0000 	ldr.w	r0, [r8]
  40029c:	f815 1b01 	ldrb.w	r1, [r5], #1
  4002a0:	683b      	ldr	r3, [r7, #0]
  4002a2:	4798      	blx	r3
  4002a4:	2800      	cmp	r0, #0
  4002a6:	db0a      	blt.n	4002be <_write+0x3e>
  4002a8:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  4002aa:	3c01      	subs	r4, #1
  4002ac:	d1f4      	bne.n	400298 <_write+0x18>
  4002ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4002b2:	f04f 30ff 	mov.w	r0, #4294967295
  4002b6:	4770      	bx	lr
	for (; len != 0; --len) {
  4002b8:	4610      	mov	r0, r2
  4002ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  4002be:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4002c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4002c6:	bf00      	nop
  4002c8:	20400bd4 	.word	0x20400bd4
  4002cc:	20400bd8 	.word	0x20400bd8

004002d0 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4002d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4002d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4002d6:	4b5b      	ldr	r3, [pc, #364]	; (400444 <board_init+0x174>)
  4002d8:	605a      	str	r2, [r3, #4]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  4002da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002de:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  4002e2:	4b59      	ldr	r3, [pc, #356]	; (400448 <board_init+0x178>)
  4002e4:	2100      	movs	r1, #0
  4002e6:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
  4002ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002ee:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  4002f2:	695a      	ldr	r2, [r3, #20]
  4002f4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4002f8:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  4002fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002fe:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
  400302:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400306:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
  40030a:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  40030e:	f3c7 354e 	ubfx	r5, r7, #13, #15
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  400312:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  400316:	016e      	lsls	r6, r5, #5
  400318:	ea4f 7c87 	mov.w	ip, r7, lsl #30
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  40031c:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  400320:	461c      	mov	r4, r3
  400322:	ea06 000e 	and.w	r0, r6, lr
  400326:	4662      	mov	r2, ip
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  400328:	463b      	mov	r3, r7
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  40032a:	ea40 0102 	orr.w	r1, r0, r2
  40032e:	f8c4 1260 	str.w	r1, [r4, #608]	; 0x260
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
  400332:	3b01      	subs	r3, #1
  400334:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
  400338:	f1b3 3fff 	cmp.w	r3, #4294967295
  40033c:	d1f5      	bne.n	40032a <board_init+0x5a>
    } while(sets-- != 0U);
  40033e:	3d01      	subs	r5, #1
  400340:	3e20      	subs	r6, #32
  400342:	f1b5 3fff 	cmp.w	r5, #4294967295
  400346:	d1ec      	bne.n	400322 <board_init+0x52>
  400348:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  40034c:	4b3e      	ldr	r3, [pc, #248]	; (400448 <board_init+0x178>)
  40034e:	695a      	ldr	r2, [r3, #20]
  400350:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400354:	615a      	str	r2, [r3, #20]
  400356:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40035a:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40035e:	4a3b      	ldr	r2, [pc, #236]	; (40044c <board_init+0x17c>)
  400360:	493b      	ldr	r1, [pc, #236]	; (400450 <board_init+0x180>)
  400362:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400364:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400368:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
  40036a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40036e:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400372:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400376:	f022 0201 	bic.w	r2, r2, #1
  40037a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  40037e:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400382:	f022 0201 	bic.w	r2, r2, #1
  400386:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb 0xF":::"memory");
  40038a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40038e:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400392:	200a      	movs	r0, #10
  400394:	4c2f      	ldr	r4, [pc, #188]	; (400454 <board_init+0x184>)
  400396:	47a0      	blx	r4
  400398:	200b      	movs	r0, #11
  40039a:	47a0      	blx	r4
  40039c:	200c      	movs	r0, #12
  40039e:	47a0      	blx	r4
  4003a0:	2010      	movs	r0, #16
  4003a2:	47a0      	blx	r4
  4003a4:	2011      	movs	r0, #17
  4003a6:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4003a8:	4b2b      	ldr	r3, [pc, #172]	; (400458 <board_init+0x188>)
  4003aa:	f44f 7280 	mov.w	r2, #256	; 0x100
  4003ae:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003b0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4003b4:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4003b6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  4003ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4003be:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003c0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4003c4:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4003c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003ca:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4003cc:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4003ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4003d2:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003d4:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4003d8:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003da:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003dc:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4003e0:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4003e2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4003e6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4003ea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4003ee:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4003f2:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4003f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003f8:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4003fa:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4003fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400400:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400402:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400406:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400408:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40040a:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  40040e:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400410:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400412:	4a12      	ldr	r2, [pc, #72]	; (40045c <board_init+0x18c>)
  400414:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400418:	f043 0310 	orr.w	r3, r3, #16
  40041c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  400420:	4b0f      	ldr	r3, [pc, #60]	; (400460 <board_init+0x190>)
  400422:	2210      	movs	r2, #16
  400424:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400426:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40042a:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40042c:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40042e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400432:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400434:	4311      	orrs	r1, r2
  400436:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400438:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40043a:	4311      	orrs	r1, r2
  40043c:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40043e:	605a      	str	r2, [r3, #4]
  400440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400442:	bf00      	nop
  400444:	400e1850 	.word	0x400e1850
  400448:	e000ed00 	.word	0xe000ed00
  40044c:	400e0c00 	.word	0x400e0c00
  400450:	5a00080c 	.word	0x5a00080c
  400454:	004007c9 	.word	0x004007c9
  400458:	400e1200 	.word	0x400e1200
  40045c:	40088000 	.word	0x40088000
  400460:	400e1000 	.word	0x400e1000

00400464 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400464:	6301      	str	r1, [r0, #48]	; 0x30
  400466:	4770      	bx	lr

00400468 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400468:	6341      	str	r1, [r0, #52]	; 0x34
  40046a:	4770      	bx	lr

0040046c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40046c:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40046e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400472:	d03a      	beq.n	4004ea <pio_set_peripheral+0x7e>
  400474:	d813      	bhi.n	40049e <pio_set_peripheral+0x32>
  400476:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40047a:	d025      	beq.n	4004c8 <pio_set_peripheral+0x5c>
  40047c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400480:	d10a      	bne.n	400498 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400482:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400484:	4313      	orrs	r3, r2
  400486:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400488:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40048a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40048c:	400b      	ands	r3, r1
  40048e:	ea23 0302 	bic.w	r3, r3, r2
  400492:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400494:	6042      	str	r2, [r0, #4]
  400496:	4770      	bx	lr
	switch (ul_type) {
  400498:	2900      	cmp	r1, #0
  40049a:	d1fb      	bne.n	400494 <pio_set_peripheral+0x28>
  40049c:	4770      	bx	lr
  40049e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4004a2:	d021      	beq.n	4004e8 <pio_set_peripheral+0x7c>
  4004a4:	d809      	bhi.n	4004ba <pio_set_peripheral+0x4e>
  4004a6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4004aa:	d1f3      	bne.n	400494 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  4004ac:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4004ae:	4313      	orrs	r3, r2
  4004b0:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4004b2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4004b4:	4313      	orrs	r3, r2
  4004b6:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4004b8:	e7ec      	b.n	400494 <pio_set_peripheral+0x28>
	switch (ul_type) {
  4004ba:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4004be:	d013      	beq.n	4004e8 <pio_set_peripheral+0x7c>
  4004c0:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4004c4:	d010      	beq.n	4004e8 <pio_set_peripheral+0x7c>
  4004c6:	e7e5      	b.n	400494 <pio_set_peripheral+0x28>
{
  4004c8:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  4004ca:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4004cc:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4004ce:	43d3      	mvns	r3, r2
  4004d0:	4021      	ands	r1, r4
  4004d2:	461c      	mov	r4, r3
  4004d4:	4019      	ands	r1, r3
  4004d6:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4004d8:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4004da:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4004dc:	400b      	ands	r3, r1
  4004de:	4023      	ands	r3, r4
  4004e0:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4004e2:	6042      	str	r2, [r0, #4]
}
  4004e4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4004e8:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4004ea:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4004ec:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4004ee:	400b      	ands	r3, r1
  4004f0:	ea23 0302 	bic.w	r3, r3, r2
  4004f4:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4004f6:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4004f8:	4313      	orrs	r3, r2
  4004fa:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4004fc:	e7ca      	b.n	400494 <pio_set_peripheral+0x28>

004004fe <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4004fe:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400500:	f012 0f01 	tst.w	r2, #1
  400504:	d10d      	bne.n	400522 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400506:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400508:	f012 0f0a 	tst.w	r2, #10
  40050c:	d00b      	beq.n	400526 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  40050e:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400510:	f012 0f02 	tst.w	r2, #2
  400514:	d109      	bne.n	40052a <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400516:	f012 0f08 	tst.w	r2, #8
  40051a:	d008      	beq.n	40052e <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  40051c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400520:	e005      	b.n	40052e <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  400522:	6641      	str	r1, [r0, #100]	; 0x64
  400524:	e7f0      	b.n	400508 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  400526:	6241      	str	r1, [r0, #36]	; 0x24
  400528:	e7f2      	b.n	400510 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  40052a:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  40052e:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400530:	6001      	str	r1, [r0, #0]
  400532:	4770      	bx	lr

00400534 <pio_set_output>:
{
  400534:	b410      	push	{r4}
  400536:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400538:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40053a:	b94c      	cbnz	r4, 400550 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  40053c:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  40053e:	b14b      	cbz	r3, 400554 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400540:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400542:	b94a      	cbnz	r2, 400558 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400544:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400546:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400548:	6001      	str	r1, [r0, #0]
}
  40054a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40054e:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400550:	6641      	str	r1, [r0, #100]	; 0x64
  400552:	e7f4      	b.n	40053e <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400554:	6541      	str	r1, [r0, #84]	; 0x54
  400556:	e7f4      	b.n	400542 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400558:	6301      	str	r1, [r0, #48]	; 0x30
  40055a:	e7f4      	b.n	400546 <pio_set_output+0x12>

0040055c <pio_configure>:
{
  40055c:	b570      	push	{r4, r5, r6, lr}
  40055e:	b082      	sub	sp, #8
  400560:	4605      	mov	r5, r0
  400562:	4616      	mov	r6, r2
  400564:	461c      	mov	r4, r3
	switch (ul_type) {
  400566:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40056a:	d014      	beq.n	400596 <pio_configure+0x3a>
  40056c:	d90a      	bls.n	400584 <pio_configure+0x28>
  40056e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400572:	d024      	beq.n	4005be <pio_configure+0x62>
  400574:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400578:	d021      	beq.n	4005be <pio_configure+0x62>
  40057a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40057e:	d017      	beq.n	4005b0 <pio_configure+0x54>
		return 0;
  400580:	2000      	movs	r0, #0
  400582:	e01a      	b.n	4005ba <pio_configure+0x5e>
	switch (ul_type) {
  400584:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400588:	d005      	beq.n	400596 <pio_configure+0x3a>
  40058a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40058e:	d002      	beq.n	400596 <pio_configure+0x3a>
  400590:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400594:	d1f4      	bne.n	400580 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  400596:	4632      	mov	r2, r6
  400598:	4628      	mov	r0, r5
  40059a:	4b11      	ldr	r3, [pc, #68]	; (4005e0 <pio_configure+0x84>)
  40059c:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40059e:	f014 0f01 	tst.w	r4, #1
  4005a2:	d102      	bne.n	4005aa <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  4005a4:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  4005a6:	2001      	movs	r0, #1
  4005a8:	e007      	b.n	4005ba <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  4005aa:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  4005ac:	2001      	movs	r0, #1
  4005ae:	e004      	b.n	4005ba <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  4005b0:	461a      	mov	r2, r3
  4005b2:	4631      	mov	r1, r6
  4005b4:	4b0b      	ldr	r3, [pc, #44]	; (4005e4 <pio_configure+0x88>)
  4005b6:	4798      	blx	r3
	return 1;
  4005b8:	2001      	movs	r0, #1
}
  4005ba:	b002      	add	sp, #8
  4005bc:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  4005be:	f004 0301 	and.w	r3, r4, #1
  4005c2:	9300      	str	r3, [sp, #0]
  4005c4:	f3c4 0380 	ubfx	r3, r4, #2, #1
  4005c8:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4005cc:	bf14      	ite	ne
  4005ce:	2200      	movne	r2, #0
  4005d0:	2201      	moveq	r2, #1
  4005d2:	4631      	mov	r1, r6
  4005d4:	4628      	mov	r0, r5
  4005d6:	4c04      	ldr	r4, [pc, #16]	; (4005e8 <pio_configure+0x8c>)
  4005d8:	47a0      	blx	r4
	return 1;
  4005da:	2001      	movs	r0, #1
		break;
  4005dc:	e7ed      	b.n	4005ba <pio_configure+0x5e>
  4005de:	bf00      	nop
  4005e0:	0040046d 	.word	0x0040046d
  4005e4:	004004ff 	.word	0x004004ff
  4005e8:	00400535 	.word	0x00400535

004005ec <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4005ec:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4005ee:	4770      	bx	lr

004005f0 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4005f0:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4005f2:	4770      	bx	lr

004005f4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4005f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4005f8:	4604      	mov	r4, r0
  4005fa:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4005fc:	4b0e      	ldr	r3, [pc, #56]	; (400638 <pio_handler_process+0x44>)
  4005fe:	4798      	blx	r3
  400600:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400602:	4620      	mov	r0, r4
  400604:	4b0d      	ldr	r3, [pc, #52]	; (40063c <pio_handler_process+0x48>)
  400606:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400608:	4005      	ands	r5, r0
  40060a:	d013      	beq.n	400634 <pio_handler_process+0x40>
  40060c:	4c0c      	ldr	r4, [pc, #48]	; (400640 <pio_handler_process+0x4c>)
  40060e:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400612:	e003      	b.n	40061c <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400614:	42b4      	cmp	r4, r6
  400616:	d00d      	beq.n	400634 <pio_handler_process+0x40>
  400618:	3410      	adds	r4, #16
		while (status != 0) {
  40061a:	b15d      	cbz	r5, 400634 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  40061c:	6820      	ldr	r0, [r4, #0]
  40061e:	4540      	cmp	r0, r8
  400620:	d1f8      	bne.n	400614 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400622:	6861      	ldr	r1, [r4, #4]
  400624:	4229      	tst	r1, r5
  400626:	d0f5      	beq.n	400614 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400628:	68e3      	ldr	r3, [r4, #12]
  40062a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  40062c:	6863      	ldr	r3, [r4, #4]
  40062e:	ea25 0503 	bic.w	r5, r5, r3
  400632:	e7ef      	b.n	400614 <pio_handler_process+0x20>
  400634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400638:	004005ed 	.word	0x004005ed
  40063c:	004005f1 	.word	0x004005f1
  400640:	204009dc 	.word	0x204009dc

00400644 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400644:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400646:	210a      	movs	r1, #10
  400648:	4801      	ldr	r0, [pc, #4]	; (400650 <PIOA_Handler+0xc>)
  40064a:	4b02      	ldr	r3, [pc, #8]	; (400654 <PIOA_Handler+0x10>)
  40064c:	4798      	blx	r3
  40064e:	bd08      	pop	{r3, pc}
  400650:	400e0e00 	.word	0x400e0e00
  400654:	004005f5 	.word	0x004005f5

00400658 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400658:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40065a:	210b      	movs	r1, #11
  40065c:	4801      	ldr	r0, [pc, #4]	; (400664 <PIOB_Handler+0xc>)
  40065e:	4b02      	ldr	r3, [pc, #8]	; (400668 <PIOB_Handler+0x10>)
  400660:	4798      	blx	r3
  400662:	bd08      	pop	{r3, pc}
  400664:	400e1000 	.word	0x400e1000
  400668:	004005f5 	.word	0x004005f5

0040066c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  40066c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40066e:	210c      	movs	r1, #12
  400670:	4801      	ldr	r0, [pc, #4]	; (400678 <PIOC_Handler+0xc>)
  400672:	4b02      	ldr	r3, [pc, #8]	; (40067c <PIOC_Handler+0x10>)
  400674:	4798      	blx	r3
  400676:	bd08      	pop	{r3, pc}
  400678:	400e1200 	.word	0x400e1200
  40067c:	004005f5 	.word	0x004005f5

00400680 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400680:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400682:	2110      	movs	r1, #16
  400684:	4801      	ldr	r0, [pc, #4]	; (40068c <PIOD_Handler+0xc>)
  400686:	4b02      	ldr	r3, [pc, #8]	; (400690 <PIOD_Handler+0x10>)
  400688:	4798      	blx	r3
  40068a:	bd08      	pop	{r3, pc}
  40068c:	400e1400 	.word	0x400e1400
  400690:	004005f5 	.word	0x004005f5

00400694 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400694:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400696:	2111      	movs	r1, #17
  400698:	4801      	ldr	r0, [pc, #4]	; (4006a0 <PIOE_Handler+0xc>)
  40069a:	4b02      	ldr	r3, [pc, #8]	; (4006a4 <PIOE_Handler+0x10>)
  40069c:	4798      	blx	r3
  40069e:	bd08      	pop	{r3, pc}
  4006a0:	400e1600 	.word	0x400e1600
  4006a4:	004005f5 	.word	0x004005f5

004006a8 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4006a8:	2803      	cmp	r0, #3
  4006aa:	d011      	beq.n	4006d0 <pmc_mck_set_division+0x28>
  4006ac:	2804      	cmp	r0, #4
  4006ae:	d012      	beq.n	4006d6 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4006b0:	2802      	cmp	r0, #2
  4006b2:	bf0c      	ite	eq
  4006b4:	f44f 7180 	moveq.w	r1, #256	; 0x100
  4006b8:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4006ba:	4a08      	ldr	r2, [pc, #32]	; (4006dc <pmc_mck_set_division+0x34>)
  4006bc:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4006be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4006c2:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  4006c4:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4006c6:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4006c8:	f013 0f08 	tst.w	r3, #8
  4006cc:	d0fb      	beq.n	4006c6 <pmc_mck_set_division+0x1e>
}
  4006ce:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4006d0:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  4006d4:	e7f1      	b.n	4006ba <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4006d6:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  4006da:	e7ee      	b.n	4006ba <pmc_mck_set_division+0x12>
  4006dc:	400e0600 	.word	0x400e0600

004006e0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4006e0:	4a17      	ldr	r2, [pc, #92]	; (400740 <pmc_switch_mck_to_pllack+0x60>)
  4006e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4006e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4006e8:	4318      	orrs	r0, r3
  4006ea:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4006ec:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4006ee:	f013 0f08 	tst.w	r3, #8
  4006f2:	d10a      	bne.n	40070a <pmc_switch_mck_to_pllack+0x2a>
  4006f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4006f8:	4911      	ldr	r1, [pc, #68]	; (400740 <pmc_switch_mck_to_pllack+0x60>)
  4006fa:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4006fc:	f012 0f08 	tst.w	r2, #8
  400700:	d103      	bne.n	40070a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400702:	3b01      	subs	r3, #1
  400704:	d1f9      	bne.n	4006fa <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400706:	2001      	movs	r0, #1
  400708:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40070a:	4a0d      	ldr	r2, [pc, #52]	; (400740 <pmc_switch_mck_to_pllack+0x60>)
  40070c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40070e:	f023 0303 	bic.w	r3, r3, #3
  400712:	f043 0302 	orr.w	r3, r3, #2
  400716:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400718:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40071a:	f013 0f08 	tst.w	r3, #8
  40071e:	d10a      	bne.n	400736 <pmc_switch_mck_to_pllack+0x56>
  400720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400724:	4906      	ldr	r1, [pc, #24]	; (400740 <pmc_switch_mck_to_pllack+0x60>)
  400726:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400728:	f012 0f08 	tst.w	r2, #8
  40072c:	d105      	bne.n	40073a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40072e:	3b01      	subs	r3, #1
  400730:	d1f9      	bne.n	400726 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400732:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400734:	4770      	bx	lr
	return 0;
  400736:	2000      	movs	r0, #0
  400738:	4770      	bx	lr
  40073a:	2000      	movs	r0, #0
  40073c:	4770      	bx	lr
  40073e:	bf00      	nop
  400740:	400e0600 	.word	0x400e0600

00400744 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400744:	b9a0      	cbnz	r0, 400770 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400746:	480e      	ldr	r0, [pc, #56]	; (400780 <pmc_switch_mainck_to_xtal+0x3c>)
  400748:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40074a:	0209      	lsls	r1, r1, #8
  40074c:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40074e:	4a0d      	ldr	r2, [pc, #52]	; (400784 <pmc_switch_mainck_to_xtal+0x40>)
  400750:	401a      	ands	r2, r3
  400752:	4b0d      	ldr	r3, [pc, #52]	; (400788 <pmc_switch_mainck_to_xtal+0x44>)
  400754:	4313      	orrs	r3, r2
  400756:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400758:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40075a:	4602      	mov	r2, r0
  40075c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40075e:	f013 0f01 	tst.w	r3, #1
  400762:	d0fb      	beq.n	40075c <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400764:	4a06      	ldr	r2, [pc, #24]	; (400780 <pmc_switch_mainck_to_xtal+0x3c>)
  400766:	6a11      	ldr	r1, [r2, #32]
  400768:	4b08      	ldr	r3, [pc, #32]	; (40078c <pmc_switch_mainck_to_xtal+0x48>)
  40076a:	430b      	orrs	r3, r1
  40076c:	6213      	str	r3, [r2, #32]
  40076e:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400770:	4903      	ldr	r1, [pc, #12]	; (400780 <pmc_switch_mainck_to_xtal+0x3c>)
  400772:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400774:	4a06      	ldr	r2, [pc, #24]	; (400790 <pmc_switch_mainck_to_xtal+0x4c>)
  400776:	401a      	ands	r2, r3
  400778:	4b06      	ldr	r3, [pc, #24]	; (400794 <pmc_switch_mainck_to_xtal+0x50>)
  40077a:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40077c:	620b      	str	r3, [r1, #32]
  40077e:	4770      	bx	lr
  400780:	400e0600 	.word	0x400e0600
  400784:	ffc8fffc 	.word	0xffc8fffc
  400788:	00370001 	.word	0x00370001
  40078c:	01370000 	.word	0x01370000
  400790:	fec8fffc 	.word	0xfec8fffc
  400794:	01370002 	.word	0x01370002

00400798 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400798:	4b02      	ldr	r3, [pc, #8]	; (4007a4 <pmc_osc_is_ready_mainck+0xc>)
  40079a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40079c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4007a0:	4770      	bx	lr
  4007a2:	bf00      	nop
  4007a4:	400e0600 	.word	0x400e0600

004007a8 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4007a8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4007ac:	4b01      	ldr	r3, [pc, #4]	; (4007b4 <pmc_disable_pllack+0xc>)
  4007ae:	629a      	str	r2, [r3, #40]	; 0x28
  4007b0:	4770      	bx	lr
  4007b2:	bf00      	nop
  4007b4:	400e0600 	.word	0x400e0600

004007b8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4007b8:	4b02      	ldr	r3, [pc, #8]	; (4007c4 <pmc_is_locked_pllack+0xc>)
  4007ba:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4007bc:	f000 0002 	and.w	r0, r0, #2
  4007c0:	4770      	bx	lr
  4007c2:	bf00      	nop
  4007c4:	400e0600 	.word	0x400e0600

004007c8 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  4007c8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  4007cc:	4b05      	ldr	r3, [pc, #20]	; (4007e4 <pmc_enable_periph_clk+0x1c>)
  4007ce:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  4007d2:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  4007d6:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  4007da:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  4007de:	2000      	movs	r0, #0
  4007e0:	4770      	bx	lr
  4007e2:	bf00      	nop
  4007e4:	400e0600 	.word	0x400e0600

004007e8 <twihs_set_speed>:
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  4007e8:	4b28      	ldr	r3, [pc, #160]	; (40088c <twihs_set_speed+0xa4>)
  4007ea:	4299      	cmp	r1, r3
  4007ec:	d84b      	bhi.n	400886 <twihs_set_speed+0x9e>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  4007ee:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  4007f2:	4299      	cmp	r1, r3
  4007f4:	d92d      	bls.n	400852 <twihs_set_speed+0x6a>
{
  4007f6:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4007f8:	4c25      	ldr	r4, [pc, #148]	; (400890 <twihs_set_speed+0xa8>)
  4007fa:	fba4 3402 	umull	r3, r4, r4, r2
  4007fe:	0ba4      	lsrs	r4, r4, #14
  400800:	3c03      	subs	r4, #3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  400802:	4b24      	ldr	r3, [pc, #144]	; (400894 <twihs_set_speed+0xac>)
  400804:	440b      	add	r3, r1
  400806:	009b      	lsls	r3, r3, #2
  400808:	fbb2 f2f3 	udiv	r2, r2, r3
  40080c:	3a03      	subs	r2, #3
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  40080e:	2cff      	cmp	r4, #255	; 0xff
  400810:	d91d      	bls.n	40084e <twihs_set_speed+0x66>
  400812:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  400814:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWIHS_CLK_DIVIDER;
  400816:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400818:	2cff      	cmp	r4, #255	; 0xff
  40081a:	d901      	bls.n	400820 <twihs_set_speed+0x38>
  40081c:	2906      	cmp	r1, #6
  40081e:	d9f9      	bls.n	400814 <twihs_set_speed+0x2c>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400820:	2aff      	cmp	r2, #255	; 0xff
  400822:	d907      	bls.n	400834 <twihs_set_speed+0x4c>
  400824:	2906      	cmp	r1, #6
  400826:	d805      	bhi.n	400834 <twihs_set_speed+0x4c>
			/* Increase clock divider */
			ckdiv++;
  400828:	3101      	adds	r1, #1
			/* Divide cldiv value */
			chdiv /= TWIHS_CLK_DIVIDER;
  40082a:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  40082c:	2aff      	cmp	r2, #255	; 0xff
  40082e:	d901      	bls.n	400834 <twihs_set_speed+0x4c>
  400830:	2906      	cmp	r1, #6
  400832:	d9f9      	bls.n	400828 <twihs_set_speed+0x40>
		}

		/* set clock waveform generator register */
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  400834:	0213      	lsls	r3, r2, #8
  400836:	b29b      	uxth	r3, r3
				TWIHS_CWGR_CKDIV(ckdiv);
  400838:	0409      	lsls	r1, r1, #16
  40083a:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  40083e:	430b      	orrs	r3, r1
  400840:	b2e4      	uxtb	r4, r4
  400842:	4323      	orrs	r3, r4
		p_twihs->TWIHS_CWGR =
  400844:	6103      	str	r3, [r0, #16]
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
				TWIHS_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  400846:	2000      	movs	r0, #0
}
  400848:	f85d 4b04 	ldr.w	r4, [sp], #4
  40084c:	4770      	bx	lr
	uint32_t ckdiv = 0;
  40084e:	2100      	movs	r1, #0
  400850:	e7e6      	b.n	400820 <twihs_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  400852:	0049      	lsls	r1, r1, #1
  400854:	fbb2 f2f1 	udiv	r2, r2, r1
  400858:	3a03      	subs	r2, #3
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  40085a:	2aff      	cmp	r2, #255	; 0xff
  40085c:	d911      	bls.n	400882 <twihs_set_speed+0x9a>
  40085e:	2300      	movs	r3, #0
			ckdiv++;
  400860:	3301      	adds	r3, #1
			c_lh_div /= TWIHS_CLK_DIVIDER;
  400862:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400864:	2aff      	cmp	r2, #255	; 0xff
  400866:	d901      	bls.n	40086c <twihs_set_speed+0x84>
  400868:	2b06      	cmp	r3, #6
  40086a:	d9f9      	bls.n	400860 <twihs_set_speed+0x78>
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  40086c:	0211      	lsls	r1, r2, #8
  40086e:	b289      	uxth	r1, r1
				TWIHS_CWGR_CKDIV(ckdiv);
  400870:	041b      	lsls	r3, r3, #16
  400872:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  400876:	430b      	orrs	r3, r1
  400878:	b2d2      	uxtb	r2, r2
  40087a:	431a      	orrs	r2, r3
		p_twihs->TWIHS_CWGR =
  40087c:	6102      	str	r2, [r0, #16]
	return PASS;
  40087e:	2000      	movs	r0, #0
  400880:	4770      	bx	lr
	uint32_t ckdiv = 0;
  400882:	2300      	movs	r3, #0
  400884:	e7f2      	b.n	40086c <twihs_set_speed+0x84>
		return FAIL;
  400886:	2001      	movs	r0, #1
  400888:	4770      	bx	lr
  40088a:	bf00      	nop
  40088c:	00061a80 	.word	0x00061a80
  400890:	057619f1 	.word	0x057619f1
  400894:	3ffd1200 	.word	0x3ffd1200

00400898 <twihs_master_init>:
{
  400898:	b508      	push	{r3, lr}
	p_twihs->TWIHS_IDR = ~0UL;
  40089a:	f04f 32ff 	mov.w	r2, #4294967295
  40089e:	6282      	str	r2, [r0, #40]	; 0x28
	p_twihs->TWIHS_SR;
  4008a0:	6a02      	ldr	r2, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  4008a2:	2280      	movs	r2, #128	; 0x80
  4008a4:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_RHR;
  4008a6:	6b02      	ldr	r2, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  4008a8:	2208      	movs	r2, #8
  4008aa:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  4008ac:	2220      	movs	r2, #32
  4008ae:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  4008b0:	2204      	movs	r2, #4
  4008b2:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  4008b4:	680a      	ldr	r2, [r1, #0]
  4008b6:	6849      	ldr	r1, [r1, #4]
  4008b8:	4b03      	ldr	r3, [pc, #12]	; (4008c8 <twihs_master_init+0x30>)
  4008ba:	4798      	blx	r3
}
  4008bc:	2801      	cmp	r0, #1
  4008be:	bf14      	ite	ne
  4008c0:	2000      	movne	r0, #0
  4008c2:	2001      	moveq	r0, #1
  4008c4:	bd08      	pop	{r3, pc}
  4008c6:	bf00      	nop
  4008c8:	004007e9 	.word	0x004007e9

004008cc <twihs_master_read>:
	uint32_t status, cnt = p_packet->length;
  4008cc:	68cb      	ldr	r3, [r1, #12]
	if (cnt == 0) {
  4008ce:	2b00      	cmp	r3, #0
  4008d0:	d04b      	beq.n	40096a <twihs_master_read+0x9e>
{
  4008d2:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  4008d4:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  4008d6:	2600      	movs	r6, #0
  4008d8:	6046      	str	r6, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  4008da:	684a      	ldr	r2, [r1, #4]
  4008dc:	0212      	lsls	r2, r2, #8
  4008de:	f402 7240 	and.w	r2, r2, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  4008e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  4008e6:	7c0d      	ldrb	r5, [r1, #16]
  4008e8:	042d      	lsls	r5, r5, #16
  4008ea:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  4008ee:	432a      	orrs	r2, r5
  4008f0:	6042      	str	r2, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  4008f2:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4008f4:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  4008f6:	b15d      	cbz	r5, 400910 <twihs_master_read+0x44>
	val = addr[0];
  4008f8:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  4008fa:	2d01      	cmp	r5, #1
  4008fc:	dd02      	ble.n	400904 <twihs_master_read+0x38>
		val |= addr[1];
  4008fe:	784e      	ldrb	r6, [r1, #1]
  400900:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
	if (len > 2) {
  400904:	2d02      	cmp	r5, #2
  400906:	dd04      	ble.n	400912 <twihs_master_read+0x46>
		val |= addr[2];
  400908:	7889      	ldrb	r1, [r1, #2]
  40090a:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  40090e:	e000      	b.n	400912 <twihs_master_read+0x46>
		return 0;
  400910:	2200      	movs	r2, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  400912:	60c2      	str	r2, [r0, #12]
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  400914:	2201      	movs	r2, #1
  400916:	6002      	str	r2, [r0, #0]
  400918:	e006      	b.n	400928 <twihs_master_read+0x5c>
		if (cnt == 1) {
  40091a:	2b01      	cmp	r3, #1
  40091c:	d019      	beq.n	400952 <twihs_master_read+0x86>
		*buffer++ = p_twihs->TWIHS_RHR;
  40091e:	6b02      	ldr	r2, [r0, #48]	; 0x30
  400920:	f804 2b01 	strb.w	r2, [r4], #1
	while (cnt > 0) {
  400924:	3b01      	subs	r3, #1
  400926:	d018      	beq.n	40095a <twihs_master_read+0x8e>
		status = p_twihs->TWIHS_SR;
  400928:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  40092a:	f412 7f80 	tst.w	r2, #256	; 0x100
  40092e:	d122      	bne.n	400976 <twihs_master_read+0xaa>
		if (!(status & TWIHS_SR_RXRDY)) {
  400930:	f012 0f02 	tst.w	r2, #2
  400934:	d1f1      	bne.n	40091a <twihs_master_read+0x4e>
  400936:	f247 5230 	movw	r2, #30000	; 0x7530
		status = p_twihs->TWIHS_SR;
  40093a:	6a01      	ldr	r1, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  40093c:	f411 7f80 	tst.w	r1, #256	; 0x100
  400940:	d115      	bne.n	40096e <twihs_master_read+0xa2>
		if (!timeout--) {
  400942:	3a01      	subs	r2, #1
  400944:	d015      	beq.n	400972 <twihs_master_read+0xa6>
		if (!(status & TWIHS_SR_RXRDY)) {
  400946:	f011 0f02 	tst.w	r1, #2
  40094a:	d1e6      	bne.n	40091a <twihs_master_read+0x4e>
	while (cnt > 0) {
  40094c:	2b00      	cmp	r3, #0
  40094e:	d1f4      	bne.n	40093a <twihs_master_read+0x6e>
  400950:	e003      	b.n	40095a <twihs_master_read+0x8e>
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  400952:	2302      	movs	r3, #2
  400954:	6003      	str	r3, [r0, #0]
		*buffer++ = p_twihs->TWIHS_RHR;
  400956:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400958:	7023      	strb	r3, [r4, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  40095a:	6a03      	ldr	r3, [r0, #32]
  40095c:	f013 0f01 	tst.w	r3, #1
  400960:	d0fb      	beq.n	40095a <twihs_master_read+0x8e>
	p_twihs->TWIHS_SR;
  400962:	6a03      	ldr	r3, [r0, #32]
	return TWIHS_SUCCESS;
  400964:	2000      	movs	r0, #0
}
  400966:	bc70      	pop	{r4, r5, r6}
  400968:	4770      	bx	lr
		return TWIHS_INVALID_ARGUMENT;
  40096a:	2001      	movs	r0, #1
  40096c:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  40096e:	2005      	movs	r0, #5
  400970:	e7f9      	b.n	400966 <twihs_master_read+0x9a>
			return TWIHS_ERROR_TIMEOUT;
  400972:	2009      	movs	r0, #9
  400974:	e7f7      	b.n	400966 <twihs_master_read+0x9a>
			return TWIHS_RECEIVE_NACK;
  400976:	2005      	movs	r0, #5
  400978:	e7f5      	b.n	400966 <twihs_master_read+0x9a>

0040097a <twihs_master_write>:
	uint32_t status, cnt = p_packet->length;
  40097a:	68cb      	ldr	r3, [r1, #12]
	if (cnt == 0) {
  40097c:	2b00      	cmp	r3, #0
  40097e:	d043      	beq.n	400a08 <twihs_master_write+0x8e>
{
  400980:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  400982:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  400984:	2600      	movs	r6, #0
  400986:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  400988:	7c0a      	ldrb	r2, [r1, #16]
  40098a:	0412      	lsls	r2, r2, #16
  40098c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  400990:	684d      	ldr	r5, [r1, #4]
  400992:	022d      	lsls	r5, r5, #8
  400994:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  400998:	432a      	orrs	r2, r5
  40099a:	6042      	str	r2, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  40099c:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  40099e:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  4009a0:	b15d      	cbz	r5, 4009ba <twihs_master_write+0x40>
	val = addr[0];
  4009a2:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  4009a4:	2d01      	cmp	r5, #1
  4009a6:	dd02      	ble.n	4009ae <twihs_master_write+0x34>
		val |= addr[1];
  4009a8:	784e      	ldrb	r6, [r1, #1]
  4009aa:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
	if (len > 2) {
  4009ae:	2d02      	cmp	r5, #2
  4009b0:	dd04      	ble.n	4009bc <twihs_master_write+0x42>
		val |= addr[2];
  4009b2:	7889      	ldrb	r1, [r1, #2]
  4009b4:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  4009b8:	e000      	b.n	4009bc <twihs_master_write+0x42>
		return 0;
  4009ba:	2200      	movs	r2, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4009bc:	60c2      	str	r2, [r0, #12]
  4009be:	e004      	b.n	4009ca <twihs_master_write+0x50>
		p_twihs->TWIHS_THR = *buffer++;
  4009c0:	f814 2b01 	ldrb.w	r2, [r4], #1
  4009c4:	6342      	str	r2, [r0, #52]	; 0x34
	while (cnt > 0) {
  4009c6:	3b01      	subs	r3, #1
  4009c8:	d00f      	beq.n	4009ea <twihs_master_write+0x70>
		status = p_twihs->TWIHS_SR;
  4009ca:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  4009cc:	f412 7f80 	tst.w	r2, #256	; 0x100
  4009d0:	d11e      	bne.n	400a10 <twihs_master_write+0x96>
		if (!(status & TWIHS_SR_TXRDY)) {
  4009d2:	f012 0f04 	tst.w	r2, #4
  4009d6:	d1f3      	bne.n	4009c0 <twihs_master_write+0x46>
		status = p_twihs->TWIHS_SR;
  4009d8:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  4009da:	f412 7f80 	tst.w	r2, #256	; 0x100
  4009de:	d115      	bne.n	400a0c <twihs_master_write+0x92>
		if (!(status & TWIHS_SR_TXRDY)) {
  4009e0:	f012 0f04 	tst.w	r2, #4
  4009e4:	d1ec      	bne.n	4009c0 <twihs_master_write+0x46>
	while (cnt > 0) {
  4009e6:	2b00      	cmp	r3, #0
  4009e8:	d1f6      	bne.n	4009d8 <twihs_master_write+0x5e>
		status = p_twihs->TWIHS_SR;
  4009ea:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  4009ec:	f413 7f80 	tst.w	r3, #256	; 0x100
  4009f0:	d111      	bne.n	400a16 <twihs_master_write+0x9c>
		if (status & TWIHS_SR_TXRDY) {
  4009f2:	f013 0f04 	tst.w	r3, #4
  4009f6:	d0f8      	beq.n	4009ea <twihs_master_write+0x70>
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  4009f8:	2302      	movs	r3, #2
  4009fa:	6003      	str	r3, [r0, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  4009fc:	6a03      	ldr	r3, [r0, #32]
  4009fe:	f013 0f01 	tst.w	r3, #1
  400a02:	d0fb      	beq.n	4009fc <twihs_master_write+0x82>
	return TWIHS_SUCCESS;
  400a04:	2000      	movs	r0, #0
  400a06:	e004      	b.n	400a12 <twihs_master_write+0x98>
		return TWIHS_INVALID_ARGUMENT;
  400a08:	2001      	movs	r0, #1
  400a0a:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  400a0c:	2005      	movs	r0, #5
  400a0e:	e000      	b.n	400a12 <twihs_master_write+0x98>
  400a10:	2005      	movs	r0, #5
}
  400a12:	bc70      	pop	{r4, r5, r6}
  400a14:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  400a16:	2005      	movs	r0, #5
  400a18:	e7fb      	b.n	400a12 <twihs_master_write+0x98>
	...

00400a1c <twihs_probe>:
{
  400a1c:	b500      	push	{lr}
  400a1e:	b087      	sub	sp, #28
	uint8_t data = 0;
  400a20:	2300      	movs	r3, #0
  400a22:	aa06      	add	r2, sp, #24
  400a24:	f802 3d15 	strb.w	r3, [r2, #-21]!
	packet.buffer = &data;
  400a28:	9203      	str	r2, [sp, #12]
	packet.length = 1;
  400a2a:	2201      	movs	r2, #1
  400a2c:	9204      	str	r2, [sp, #16]
	packet.chip = (uint32_t) uc_slave_addr;
  400a2e:	f88d 1014 	strb.w	r1, [sp, #20]
	packet.addr[0] = 0;
  400a32:	f88d 3004 	strb.w	r3, [sp, #4]
	packet.addr_length = 0;
  400a36:	9302      	str	r3, [sp, #8]
	return (twihs_master_write(p_twihs, &packet));
  400a38:	a901      	add	r1, sp, #4
  400a3a:	4b02      	ldr	r3, [pc, #8]	; (400a44 <twihs_probe+0x28>)
  400a3c:	4798      	blx	r3
}
  400a3e:	b007      	add	sp, #28
  400a40:	f85d fb04 	ldr.w	pc, [sp], #4
  400a44:	0040097b 	.word	0x0040097b

00400a48 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400a48:	6943      	ldr	r3, [r0, #20]
  400a4a:	f013 0f02 	tst.w	r3, #2
  400a4e:	d002      	beq.n	400a56 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400a50:	61c1      	str	r1, [r0, #28]
	return 0;
  400a52:	2000      	movs	r0, #0
  400a54:	4770      	bx	lr
		return 1;
  400a56:	2001      	movs	r0, #1
}
  400a58:	4770      	bx	lr

00400a5a <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400a5a:	6943      	ldr	r3, [r0, #20]
  400a5c:	f013 0f01 	tst.w	r3, #1
  400a60:	d003      	beq.n	400a6a <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400a62:	6983      	ldr	r3, [r0, #24]
  400a64:	700b      	strb	r3, [r1, #0]
	return 0;
  400a66:	2000      	movs	r0, #0
  400a68:	4770      	bx	lr
		return 1;
  400a6a:	2001      	movs	r0, #1
}
  400a6c:	4770      	bx	lr

00400a6e <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400a6e:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400a70:	010b      	lsls	r3, r1, #4
  400a72:	4293      	cmp	r3, r2
  400a74:	d914      	bls.n	400aa0 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400a76:	00c9      	lsls	r1, r1, #3
  400a78:	084b      	lsrs	r3, r1, #1
  400a7a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400a7e:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400a82:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400a84:	1e5c      	subs	r4, r3, #1
  400a86:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400a8a:	428c      	cmp	r4, r1
  400a8c:	d901      	bls.n	400a92 <usart_set_async_baudrate+0x24>
		return 1;
  400a8e:	2001      	movs	r0, #1
  400a90:	e017      	b.n	400ac2 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400a92:	6841      	ldr	r1, [r0, #4]
  400a94:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400a98:	6041      	str	r1, [r0, #4]
  400a9a:	e00c      	b.n	400ab6 <usart_set_async_baudrate+0x48>
		return 1;
  400a9c:	2001      	movs	r0, #1
  400a9e:	e010      	b.n	400ac2 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400aa0:	0859      	lsrs	r1, r3, #1
  400aa2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  400aa6:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  400aaa:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400aac:	1e5c      	subs	r4, r3, #1
  400aae:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400ab2:	428c      	cmp	r4, r1
  400ab4:	d8f2      	bhi.n	400a9c <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400ab6:	0412      	lsls	r2, r2, #16
  400ab8:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  400abc:	431a      	orrs	r2, r3
  400abe:	6202      	str	r2, [r0, #32]

	return 0;
  400ac0:	2000      	movs	r0, #0
}
  400ac2:	f85d 4b04 	ldr.w	r4, [sp], #4
  400ac6:	4770      	bx	lr

00400ac8 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400ac8:	4b08      	ldr	r3, [pc, #32]	; (400aec <usart_reset+0x24>)
  400aca:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  400ace:	2300      	movs	r3, #0
  400ad0:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400ad2:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400ad4:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400ad6:	2388      	movs	r3, #136	; 0x88
  400ad8:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400ada:	2324      	movs	r3, #36	; 0x24
  400adc:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  400ade:	f44f 7380 	mov.w	r3, #256	; 0x100
  400ae2:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  400ae4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400ae8:	6003      	str	r3, [r0, #0]
  400aea:	4770      	bx	lr
  400aec:	55534100 	.word	0x55534100

00400af0 <usart_init_rs232>:
{
  400af0:	b570      	push	{r4, r5, r6, lr}
  400af2:	4605      	mov	r5, r0
  400af4:	460c      	mov	r4, r1
  400af6:	4616      	mov	r6, r2
	usart_reset(p_usart);
  400af8:	4b0f      	ldr	r3, [pc, #60]	; (400b38 <usart_init_rs232+0x48>)
  400afa:	4798      	blx	r3
	ul_reg_val = 0;
  400afc:	2200      	movs	r2, #0
  400afe:	4b0f      	ldr	r3, [pc, #60]	; (400b3c <usart_init_rs232+0x4c>)
  400b00:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400b02:	b1a4      	cbz	r4, 400b2e <usart_init_rs232+0x3e>
  400b04:	4632      	mov	r2, r6
  400b06:	6821      	ldr	r1, [r4, #0]
  400b08:	4628      	mov	r0, r5
  400b0a:	4b0d      	ldr	r3, [pc, #52]	; (400b40 <usart_init_rs232+0x50>)
  400b0c:	4798      	blx	r3
  400b0e:	4602      	mov	r2, r0
  400b10:	b978      	cbnz	r0, 400b32 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400b12:	6863      	ldr	r3, [r4, #4]
  400b14:	68a1      	ldr	r1, [r4, #8]
  400b16:	430b      	orrs	r3, r1
  400b18:	6921      	ldr	r1, [r4, #16]
  400b1a:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400b1c:	68e1      	ldr	r1, [r4, #12]
  400b1e:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400b20:	4906      	ldr	r1, [pc, #24]	; (400b3c <usart_init_rs232+0x4c>)
  400b22:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  400b24:	6869      	ldr	r1, [r5, #4]
  400b26:	430b      	orrs	r3, r1
  400b28:	606b      	str	r3, [r5, #4]
}
  400b2a:	4610      	mov	r0, r2
  400b2c:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  400b2e:	2201      	movs	r2, #1
  400b30:	e7fb      	b.n	400b2a <usart_init_rs232+0x3a>
  400b32:	2201      	movs	r2, #1
  400b34:	e7f9      	b.n	400b2a <usart_init_rs232+0x3a>
  400b36:	bf00      	nop
  400b38:	00400ac9 	.word	0x00400ac9
  400b3c:	20400a4c 	.word	0x20400a4c
  400b40:	00400a6f 	.word	0x00400a6f

00400b44 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  400b44:	2340      	movs	r3, #64	; 0x40
  400b46:	6003      	str	r3, [r0, #0]
  400b48:	4770      	bx	lr

00400b4a <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  400b4a:	2310      	movs	r3, #16
  400b4c:	6003      	str	r3, [r0, #0]
  400b4e:	4770      	bx	lr

00400b50 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400b50:	6943      	ldr	r3, [r0, #20]
  400b52:	f013 0f02 	tst.w	r3, #2
  400b56:	d004      	beq.n	400b62 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  400b58:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400b5c:	61c1      	str	r1, [r0, #28]
	return 0;
  400b5e:	2000      	movs	r0, #0
  400b60:	4770      	bx	lr
		return 1;
  400b62:	2001      	movs	r0, #1
}
  400b64:	4770      	bx	lr

00400b66 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400b66:	6943      	ldr	r3, [r0, #20]
  400b68:	f013 0f01 	tst.w	r3, #1
  400b6c:	d005      	beq.n	400b7a <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400b6e:	6983      	ldr	r3, [r0, #24]
  400b70:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400b74:	600b      	str	r3, [r1, #0]
	return 0;
  400b76:	2000      	movs	r0, #0
  400b78:	4770      	bx	lr
		return 1;
  400b7a:	2001      	movs	r0, #1
}
  400b7c:	4770      	bx	lr

00400b7e <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400b7e:	e7fe      	b.n	400b7e <Dummy_Handler>

00400b80 <Reset_Handler>:
{
  400b80:	b500      	push	{lr}
  400b82:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  400b84:	4b25      	ldr	r3, [pc, #148]	; (400c1c <Reset_Handler+0x9c>)
  400b86:	4a26      	ldr	r2, [pc, #152]	; (400c20 <Reset_Handler+0xa0>)
  400b88:	429a      	cmp	r2, r3
  400b8a:	d010      	beq.n	400bae <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  400b8c:	4b25      	ldr	r3, [pc, #148]	; (400c24 <Reset_Handler+0xa4>)
  400b8e:	4a23      	ldr	r2, [pc, #140]	; (400c1c <Reset_Handler+0x9c>)
  400b90:	429a      	cmp	r2, r3
  400b92:	d20c      	bcs.n	400bae <Reset_Handler+0x2e>
  400b94:	3b01      	subs	r3, #1
  400b96:	1a9b      	subs	r3, r3, r2
  400b98:	f023 0303 	bic.w	r3, r3, #3
  400b9c:	3304      	adds	r3, #4
  400b9e:	4413      	add	r3, r2
  400ba0:	491f      	ldr	r1, [pc, #124]	; (400c20 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  400ba2:	f851 0b04 	ldr.w	r0, [r1], #4
  400ba6:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400baa:	429a      	cmp	r2, r3
  400bac:	d1f9      	bne.n	400ba2 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  400bae:	4b1e      	ldr	r3, [pc, #120]	; (400c28 <Reset_Handler+0xa8>)
  400bb0:	4a1e      	ldr	r2, [pc, #120]	; (400c2c <Reset_Handler+0xac>)
  400bb2:	429a      	cmp	r2, r3
  400bb4:	d20a      	bcs.n	400bcc <Reset_Handler+0x4c>
  400bb6:	3b01      	subs	r3, #1
  400bb8:	1a9b      	subs	r3, r3, r2
  400bba:	f023 0303 	bic.w	r3, r3, #3
  400bbe:	3304      	adds	r3, #4
  400bc0:	4413      	add	r3, r2
                *pDest++ = 0;
  400bc2:	2100      	movs	r1, #0
  400bc4:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400bc8:	4293      	cmp	r3, r2
  400bca:	d1fb      	bne.n	400bc4 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400bcc:	4a18      	ldr	r2, [pc, #96]	; (400c30 <Reset_Handler+0xb0>)
  400bce:	4b19      	ldr	r3, [pc, #100]	; (400c34 <Reset_Handler+0xb4>)
  400bd0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400bd4:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400bd6:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400bda:	fab3 f383 	clz	r3, r3
  400bde:	095b      	lsrs	r3, r3, #5
  400be0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400be2:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400be4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400be8:	2200      	movs	r2, #0
  400bea:	4b13      	ldr	r3, [pc, #76]	; (400c38 <Reset_Handler+0xb8>)
  400bec:	701a      	strb	r2, [r3, #0]
	return flags;
  400bee:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400bf0:	4a12      	ldr	r2, [pc, #72]	; (400c3c <Reset_Handler+0xbc>)
  400bf2:	6813      	ldr	r3, [r2, #0]
  400bf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400bf8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  400bfa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400bfe:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400c02:	b129      	cbz	r1, 400c10 <Reset_Handler+0x90>
		cpu_irq_enable();
  400c04:	2201      	movs	r2, #1
  400c06:	4b0c      	ldr	r3, [pc, #48]	; (400c38 <Reset_Handler+0xb8>)
  400c08:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  400c0a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400c0e:	b662      	cpsie	i
        __libc_init_array();
  400c10:	4b0b      	ldr	r3, [pc, #44]	; (400c40 <Reset_Handler+0xc0>)
  400c12:	4798      	blx	r3
        main();
  400c14:	4b0b      	ldr	r3, [pc, #44]	; (400c44 <Reset_Handler+0xc4>)
  400c16:	4798      	blx	r3
  400c18:	e7fe      	b.n	400c18 <Reset_Handler+0x98>
  400c1a:	bf00      	nop
  400c1c:	20400000 	.word	0x20400000
  400c20:	0040bff4 	.word	0x0040bff4
  400c24:	204009c0 	.word	0x204009c0
  400c28:	20400c4c 	.word	0x20400c4c
  400c2c:	204009c0 	.word	0x204009c0
  400c30:	e000ed00 	.word	0xe000ed00
  400c34:	00400000 	.word	0x00400000
  400c38:	20400000 	.word	0x20400000
  400c3c:	e000ed88 	.word	0xe000ed88
  400c40:	00406811 	.word	0x00406811
  400c44:	00403eb5 	.word	0x00403eb5

00400c48 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400c48:	4b3b      	ldr	r3, [pc, #236]	; (400d38 <SystemCoreClockUpdate+0xf0>)
  400c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400c4c:	f003 0303 	and.w	r3, r3, #3
  400c50:	2b01      	cmp	r3, #1
  400c52:	d01d      	beq.n	400c90 <SystemCoreClockUpdate+0x48>
  400c54:	b183      	cbz	r3, 400c78 <SystemCoreClockUpdate+0x30>
  400c56:	2b02      	cmp	r3, #2
  400c58:	d036      	beq.n	400cc8 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400c5a:	4b37      	ldr	r3, [pc, #220]	; (400d38 <SystemCoreClockUpdate+0xf0>)
  400c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400c5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400c62:	2b70      	cmp	r3, #112	; 0x70
  400c64:	d05f      	beq.n	400d26 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400c66:	4b34      	ldr	r3, [pc, #208]	; (400d38 <SystemCoreClockUpdate+0xf0>)
  400c68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400c6a:	4934      	ldr	r1, [pc, #208]	; (400d3c <SystemCoreClockUpdate+0xf4>)
  400c6c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400c70:	680b      	ldr	r3, [r1, #0]
  400c72:	40d3      	lsrs	r3, r2
  400c74:	600b      	str	r3, [r1, #0]
  400c76:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400c78:	4b31      	ldr	r3, [pc, #196]	; (400d40 <SystemCoreClockUpdate+0xf8>)
  400c7a:	695b      	ldr	r3, [r3, #20]
  400c7c:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400c80:	bf14      	ite	ne
  400c82:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400c86:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400c8a:	4b2c      	ldr	r3, [pc, #176]	; (400d3c <SystemCoreClockUpdate+0xf4>)
  400c8c:	601a      	str	r2, [r3, #0]
  400c8e:	e7e4      	b.n	400c5a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400c90:	4b29      	ldr	r3, [pc, #164]	; (400d38 <SystemCoreClockUpdate+0xf0>)
  400c92:	6a1b      	ldr	r3, [r3, #32]
  400c94:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400c98:	d003      	beq.n	400ca2 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400c9a:	4a2a      	ldr	r2, [pc, #168]	; (400d44 <SystemCoreClockUpdate+0xfc>)
  400c9c:	4b27      	ldr	r3, [pc, #156]	; (400d3c <SystemCoreClockUpdate+0xf4>)
  400c9e:	601a      	str	r2, [r3, #0]
  400ca0:	e7db      	b.n	400c5a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400ca2:	4a29      	ldr	r2, [pc, #164]	; (400d48 <SystemCoreClockUpdate+0x100>)
  400ca4:	4b25      	ldr	r3, [pc, #148]	; (400d3c <SystemCoreClockUpdate+0xf4>)
  400ca6:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400ca8:	4b23      	ldr	r3, [pc, #140]	; (400d38 <SystemCoreClockUpdate+0xf0>)
  400caa:	6a1b      	ldr	r3, [r3, #32]
  400cac:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400cb0:	2b10      	cmp	r3, #16
  400cb2:	d005      	beq.n	400cc0 <SystemCoreClockUpdate+0x78>
  400cb4:	2b20      	cmp	r3, #32
  400cb6:	d1d0      	bne.n	400c5a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  400cb8:	4a22      	ldr	r2, [pc, #136]	; (400d44 <SystemCoreClockUpdate+0xfc>)
  400cba:	4b20      	ldr	r3, [pc, #128]	; (400d3c <SystemCoreClockUpdate+0xf4>)
  400cbc:	601a      	str	r2, [r3, #0]
          break;
  400cbe:	e7cc      	b.n	400c5a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  400cc0:	4a22      	ldr	r2, [pc, #136]	; (400d4c <SystemCoreClockUpdate+0x104>)
  400cc2:	4b1e      	ldr	r3, [pc, #120]	; (400d3c <SystemCoreClockUpdate+0xf4>)
  400cc4:	601a      	str	r2, [r3, #0]
          break;
  400cc6:	e7c8      	b.n	400c5a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400cc8:	4b1b      	ldr	r3, [pc, #108]	; (400d38 <SystemCoreClockUpdate+0xf0>)
  400cca:	6a1b      	ldr	r3, [r3, #32]
  400ccc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400cd0:	d016      	beq.n	400d00 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400cd2:	4a1c      	ldr	r2, [pc, #112]	; (400d44 <SystemCoreClockUpdate+0xfc>)
  400cd4:	4b19      	ldr	r3, [pc, #100]	; (400d3c <SystemCoreClockUpdate+0xf4>)
  400cd6:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400cd8:	4b17      	ldr	r3, [pc, #92]	; (400d38 <SystemCoreClockUpdate+0xf0>)
  400cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400cdc:	f003 0303 	and.w	r3, r3, #3
  400ce0:	2b02      	cmp	r3, #2
  400ce2:	d1ba      	bne.n	400c5a <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400ce4:	4a14      	ldr	r2, [pc, #80]	; (400d38 <SystemCoreClockUpdate+0xf0>)
  400ce6:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400ce8:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400cea:	4814      	ldr	r0, [pc, #80]	; (400d3c <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400cec:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400cf0:	6803      	ldr	r3, [r0, #0]
  400cf2:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400cf6:	b2d2      	uxtb	r2, r2
  400cf8:	fbb3 f3f2 	udiv	r3, r3, r2
  400cfc:	6003      	str	r3, [r0, #0]
  400cfe:	e7ac      	b.n	400c5a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400d00:	4a11      	ldr	r2, [pc, #68]	; (400d48 <SystemCoreClockUpdate+0x100>)
  400d02:	4b0e      	ldr	r3, [pc, #56]	; (400d3c <SystemCoreClockUpdate+0xf4>)
  400d04:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400d06:	4b0c      	ldr	r3, [pc, #48]	; (400d38 <SystemCoreClockUpdate+0xf0>)
  400d08:	6a1b      	ldr	r3, [r3, #32]
  400d0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400d0e:	2b10      	cmp	r3, #16
  400d10:	d005      	beq.n	400d1e <SystemCoreClockUpdate+0xd6>
  400d12:	2b20      	cmp	r3, #32
  400d14:	d1e0      	bne.n	400cd8 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  400d16:	4a0b      	ldr	r2, [pc, #44]	; (400d44 <SystemCoreClockUpdate+0xfc>)
  400d18:	4b08      	ldr	r3, [pc, #32]	; (400d3c <SystemCoreClockUpdate+0xf4>)
  400d1a:	601a      	str	r2, [r3, #0]
          break;
  400d1c:	e7dc      	b.n	400cd8 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  400d1e:	4a0b      	ldr	r2, [pc, #44]	; (400d4c <SystemCoreClockUpdate+0x104>)
  400d20:	4b06      	ldr	r3, [pc, #24]	; (400d3c <SystemCoreClockUpdate+0xf4>)
  400d22:	601a      	str	r2, [r3, #0]
          break;
  400d24:	e7d8      	b.n	400cd8 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  400d26:	4a05      	ldr	r2, [pc, #20]	; (400d3c <SystemCoreClockUpdate+0xf4>)
  400d28:	6813      	ldr	r3, [r2, #0]
  400d2a:	4909      	ldr	r1, [pc, #36]	; (400d50 <SystemCoreClockUpdate+0x108>)
  400d2c:	fba1 1303 	umull	r1, r3, r1, r3
  400d30:	085b      	lsrs	r3, r3, #1
  400d32:	6013      	str	r3, [r2, #0]
  400d34:	4770      	bx	lr
  400d36:	bf00      	nop
  400d38:	400e0600 	.word	0x400e0600
  400d3c:	20400004 	.word	0x20400004
  400d40:	400e1810 	.word	0x400e1810
  400d44:	00b71b00 	.word	0x00b71b00
  400d48:	003d0900 	.word	0x003d0900
  400d4c:	007a1200 	.word	0x007a1200
  400d50:	aaaaaaab 	.word	0xaaaaaaab

00400d54 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400d54:	4b16      	ldr	r3, [pc, #88]	; (400db0 <system_init_flash+0x5c>)
  400d56:	4298      	cmp	r0, r3
  400d58:	d913      	bls.n	400d82 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  400d5a:	4b16      	ldr	r3, [pc, #88]	; (400db4 <system_init_flash+0x60>)
  400d5c:	4298      	cmp	r0, r3
  400d5e:	d915      	bls.n	400d8c <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  400d60:	4b15      	ldr	r3, [pc, #84]	; (400db8 <system_init_flash+0x64>)
  400d62:	4298      	cmp	r0, r3
  400d64:	d916      	bls.n	400d94 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400d66:	4b15      	ldr	r3, [pc, #84]	; (400dbc <system_init_flash+0x68>)
  400d68:	4298      	cmp	r0, r3
  400d6a:	d917      	bls.n	400d9c <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400d6c:	4b14      	ldr	r3, [pc, #80]	; (400dc0 <system_init_flash+0x6c>)
  400d6e:	4298      	cmp	r0, r3
  400d70:	d918      	bls.n	400da4 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  400d72:	4b14      	ldr	r3, [pc, #80]	; (400dc4 <system_init_flash+0x70>)
  400d74:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400d76:	bf94      	ite	ls
  400d78:	4a13      	ldrls	r2, [pc, #76]	; (400dc8 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  400d7a:	4a14      	ldrhi	r2, [pc, #80]	; (400dcc <system_init_flash+0x78>)
  400d7c:	4b14      	ldr	r3, [pc, #80]	; (400dd0 <system_init_flash+0x7c>)
  400d7e:	601a      	str	r2, [r3, #0]
  400d80:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400d82:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400d86:	4b12      	ldr	r3, [pc, #72]	; (400dd0 <system_init_flash+0x7c>)
  400d88:	601a      	str	r2, [r3, #0]
  400d8a:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400d8c:	4a11      	ldr	r2, [pc, #68]	; (400dd4 <system_init_flash+0x80>)
  400d8e:	4b10      	ldr	r3, [pc, #64]	; (400dd0 <system_init_flash+0x7c>)
  400d90:	601a      	str	r2, [r3, #0]
  400d92:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400d94:	4a10      	ldr	r2, [pc, #64]	; (400dd8 <system_init_flash+0x84>)
  400d96:	4b0e      	ldr	r3, [pc, #56]	; (400dd0 <system_init_flash+0x7c>)
  400d98:	601a      	str	r2, [r3, #0]
  400d9a:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400d9c:	4a0f      	ldr	r2, [pc, #60]	; (400ddc <system_init_flash+0x88>)
  400d9e:	4b0c      	ldr	r3, [pc, #48]	; (400dd0 <system_init_flash+0x7c>)
  400da0:	601a      	str	r2, [r3, #0]
  400da2:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400da4:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  400da8:	4b09      	ldr	r3, [pc, #36]	; (400dd0 <system_init_flash+0x7c>)
  400daa:	601a      	str	r2, [r3, #0]
  400dac:	4770      	bx	lr
  400dae:	bf00      	nop
  400db0:	015ef3bf 	.word	0x015ef3bf
  400db4:	02bde77f 	.word	0x02bde77f
  400db8:	041cdb3f 	.word	0x041cdb3f
  400dbc:	057bceff 	.word	0x057bceff
  400dc0:	06dac2bf 	.word	0x06dac2bf
  400dc4:	0839b67f 	.word	0x0839b67f
  400dc8:	04000500 	.word	0x04000500
  400dcc:	04000600 	.word	0x04000600
  400dd0:	400e0c00 	.word	0x400e0c00
  400dd4:	04000100 	.word	0x04000100
  400dd8:	04000200 	.word	0x04000200
  400ddc:	04000300 	.word	0x04000300

00400de0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400de0:	4b0a      	ldr	r3, [pc, #40]	; (400e0c <_sbrk+0x2c>)
  400de2:	681b      	ldr	r3, [r3, #0]
  400de4:	b153      	cbz	r3, 400dfc <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400de6:	4b09      	ldr	r3, [pc, #36]	; (400e0c <_sbrk+0x2c>)
  400de8:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400dea:	181a      	adds	r2, r3, r0
  400dec:	4908      	ldr	r1, [pc, #32]	; (400e10 <_sbrk+0x30>)
  400dee:	4291      	cmp	r1, r2
  400df0:	db08      	blt.n	400e04 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  400df2:	4610      	mov	r0, r2
  400df4:	4a05      	ldr	r2, [pc, #20]	; (400e0c <_sbrk+0x2c>)
  400df6:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400df8:	4618      	mov	r0, r3
  400dfa:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400dfc:	4a05      	ldr	r2, [pc, #20]	; (400e14 <_sbrk+0x34>)
  400dfe:	4b03      	ldr	r3, [pc, #12]	; (400e0c <_sbrk+0x2c>)
  400e00:	601a      	str	r2, [r3, #0]
  400e02:	e7f0      	b.n	400de6 <_sbrk+0x6>
		return (caddr_t) -1;	
  400e04:	f04f 30ff 	mov.w	r0, #4294967295
}
  400e08:	4770      	bx	lr
  400e0a:	bf00      	nop
  400e0c:	20400a50 	.word	0x20400a50
  400e10:	2045fffc 	.word	0x2045fffc
  400e14:	20402e50 	.word	0x20402e50

00400e18 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400e18:	f04f 30ff 	mov.w	r0, #4294967295
  400e1c:	4770      	bx	lr

00400e1e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400e1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400e22:	604b      	str	r3, [r1, #4]

	return 0;
}
  400e24:	2000      	movs	r0, #0
  400e26:	4770      	bx	lr

00400e28 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400e28:	2001      	movs	r0, #1
  400e2a:	4770      	bx	lr

00400e2c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400e2c:	2000      	movs	r0, #0
  400e2e:	4770      	bx	lr

00400e30 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400e30:	f100 0308 	add.w	r3, r0, #8
  400e34:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400e36:	f04f 32ff 	mov.w	r2, #4294967295
  400e3a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400e3c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400e3e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400e40:	2300      	movs	r3, #0
  400e42:	6003      	str	r3, [r0, #0]
  400e44:	4770      	bx	lr

00400e46 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  400e46:	2300      	movs	r3, #0
  400e48:	6103      	str	r3, [r0, #16]
  400e4a:	4770      	bx	lr

00400e4c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  400e4c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  400e4e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  400e50:	689a      	ldr	r2, [r3, #8]
  400e52:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  400e54:	689a      	ldr	r2, [r3, #8]
  400e56:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  400e58:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400e5a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400e5c:	6803      	ldr	r3, [r0, #0]
  400e5e:	3301      	adds	r3, #1
  400e60:	6003      	str	r3, [r0, #0]
  400e62:	4770      	bx	lr

00400e64 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  400e64:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  400e66:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  400e68:	f1b5 3fff 	cmp.w	r5, #4294967295
  400e6c:	d002      	beq.n	400e74 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400e6e:	f100 0208 	add.w	r2, r0, #8
  400e72:	e002      	b.n	400e7a <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  400e74:	6902      	ldr	r2, [r0, #16]
  400e76:	e004      	b.n	400e82 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400e78:	461a      	mov	r2, r3
  400e7a:	6853      	ldr	r3, [r2, #4]
  400e7c:	681c      	ldr	r4, [r3, #0]
  400e7e:	42a5      	cmp	r5, r4
  400e80:	d2fa      	bcs.n	400e78 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400e82:	6853      	ldr	r3, [r2, #4]
  400e84:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  400e86:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  400e88:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  400e8a:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400e8c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400e8e:	6803      	ldr	r3, [r0, #0]
  400e90:	3301      	adds	r3, #1
  400e92:	6003      	str	r3, [r0, #0]
}
  400e94:	bc30      	pop	{r4, r5}
  400e96:	4770      	bx	lr

00400e98 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  400e98:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400e9a:	6842      	ldr	r2, [r0, #4]
  400e9c:	6881      	ldr	r1, [r0, #8]
  400e9e:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400ea0:	6882      	ldr	r2, [r0, #8]
  400ea2:	6841      	ldr	r1, [r0, #4]
  400ea4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  400ea6:	685a      	ldr	r2, [r3, #4]
  400ea8:	4290      	cmp	r0, r2
  400eaa:	d006      	beq.n	400eba <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  400eac:	2200      	movs	r2, #0
  400eae:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  400eb0:	681a      	ldr	r2, [r3, #0]
  400eb2:	3a01      	subs	r2, #1
  400eb4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  400eb6:	6818      	ldr	r0, [r3, #0]
}
  400eb8:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  400eba:	6882      	ldr	r2, [r0, #8]
  400ebc:	605a      	str	r2, [r3, #4]
  400ebe:	e7f5      	b.n	400eac <uxListRemove+0x14>

00400ec0 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
  400ec0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
  400ec2:	2300      	movs	r3, #0
  400ec4:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  400ec6:	4b0f      	ldr	r3, [pc, #60]	; (400f04 <prvTaskExitError+0x44>)
  400ec8:	681b      	ldr	r3, [r3, #0]
  400eca:	f1b3 3fff 	cmp.w	r3, #4294967295
  400ece:	d00a      	beq.n	400ee6 <prvTaskExitError+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400ed0:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ed4:	b672      	cpsid	i
  400ed6:	f383 8811 	msr	BASEPRI, r3
  400eda:	f3bf 8f6f 	isb	sy
  400ede:	f3bf 8f4f 	dsb	sy
  400ee2:	b662      	cpsie	i
  400ee4:	e7fe      	b.n	400ee4 <prvTaskExitError+0x24>
  400ee6:	f04f 0380 	mov.w	r3, #128	; 0x80
  400eea:	b672      	cpsid	i
  400eec:	f383 8811 	msr	BASEPRI, r3
  400ef0:	f3bf 8f6f 	isb	sy
  400ef4:	f3bf 8f4f 	dsb	sy
  400ef8:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
  400efa:	9b01      	ldr	r3, [sp, #4]
  400efc:	2b00      	cmp	r3, #0
  400efe:	d0fc      	beq.n	400efa <prvTaskExitError+0x3a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
  400f00:	b002      	add	sp, #8
  400f02:	4770      	bx	lr
  400f04:	20400008 	.word	0x20400008

00400f08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
  400f08:	4808      	ldr	r0, [pc, #32]	; (400f2c <prvPortStartFirstTask+0x24>)
  400f0a:	6800      	ldr	r0, [r0, #0]
  400f0c:	6800      	ldr	r0, [r0, #0]
  400f0e:	f380 8808 	msr	MSP, r0
  400f12:	f04f 0000 	mov.w	r0, #0
  400f16:	f380 8814 	msr	CONTROL, r0
  400f1a:	b662      	cpsie	i
  400f1c:	b661      	cpsie	f
  400f1e:	f3bf 8f4f 	dsb	sy
  400f22:	f3bf 8f6f 	isb	sy
  400f26:	df00      	svc	0
  400f28:	bf00      	nop
  400f2a:	0000      	.short	0x0000
  400f2c:	e000ed08 	.word	0xe000ed08

00400f30 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  400f30:	f8df 000c 	ldr.w	r0, [pc, #12]	; 400f40 <vPortEnableVFP+0x10>
  400f34:	6801      	ldr	r1, [r0, #0]
  400f36:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400f3a:	6001      	str	r1, [r0, #0]
  400f3c:	4770      	bx	lr
  400f3e:	0000      	.short	0x0000
  400f40:	e000ed88 	.word	0xe000ed88

00400f44 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  400f44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  400f48:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
  400f4c:	f021 0101 	bic.w	r1, r1, #1
  400f50:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  400f54:	4b05      	ldr	r3, [pc, #20]	; (400f6c <pxPortInitialiseStack+0x28>)
  400f56:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  400f5a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
  400f5e:	f06f 0302 	mvn.w	r3, #2
  400f62:	f840 3c24 	str.w	r3, [r0, #-36]
}
  400f66:	3844      	subs	r0, #68	; 0x44
  400f68:	4770      	bx	lr
  400f6a:	bf00      	nop
  400f6c:	00400ec1 	.word	0x00400ec1

00400f70 <SVC_Handler>:
	__asm volatile (
  400f70:	4b07      	ldr	r3, [pc, #28]	; (400f90 <pxCurrentTCBConst2>)
  400f72:	6819      	ldr	r1, [r3, #0]
  400f74:	6808      	ldr	r0, [r1, #0]
  400f76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400f7a:	f380 8809 	msr	PSP, r0
  400f7e:	f3bf 8f6f 	isb	sy
  400f82:	f04f 0000 	mov.w	r0, #0
  400f86:	f380 8811 	msr	BASEPRI, r0
  400f8a:	4770      	bx	lr
  400f8c:	f3af 8000 	nop.w

00400f90 <pxCurrentTCBConst2>:
  400f90:	20400a5c 	.word	0x20400a5c

00400f94 <vPortEnterCritical>:
  400f94:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f98:	b672      	cpsid	i
  400f9a:	f383 8811 	msr	BASEPRI, r3
  400f9e:	f3bf 8f6f 	isb	sy
  400fa2:	f3bf 8f4f 	dsb	sy
  400fa6:	b662      	cpsie	i
	uxCriticalNesting++;
  400fa8:	4a0b      	ldr	r2, [pc, #44]	; (400fd8 <vPortEnterCritical+0x44>)
  400faa:	6813      	ldr	r3, [r2, #0]
  400fac:	3301      	adds	r3, #1
  400fae:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  400fb0:	2b01      	cmp	r3, #1
  400fb2:	d10f      	bne.n	400fd4 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  400fb4:	4b09      	ldr	r3, [pc, #36]	; (400fdc <vPortEnterCritical+0x48>)
  400fb6:	681b      	ldr	r3, [r3, #0]
  400fb8:	f013 0fff 	tst.w	r3, #255	; 0xff
  400fbc:	d00a      	beq.n	400fd4 <vPortEnterCritical+0x40>
  400fbe:	f04f 0380 	mov.w	r3, #128	; 0x80
  400fc2:	b672      	cpsid	i
  400fc4:	f383 8811 	msr	BASEPRI, r3
  400fc8:	f3bf 8f6f 	isb	sy
  400fcc:	f3bf 8f4f 	dsb	sy
  400fd0:	b662      	cpsie	i
  400fd2:	e7fe      	b.n	400fd2 <vPortEnterCritical+0x3e>
  400fd4:	4770      	bx	lr
  400fd6:	bf00      	nop
  400fd8:	20400008 	.word	0x20400008
  400fdc:	e000ed04 	.word	0xe000ed04

00400fe0 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  400fe0:	4b0a      	ldr	r3, [pc, #40]	; (40100c <vPortExitCritical+0x2c>)
  400fe2:	681b      	ldr	r3, [r3, #0]
  400fe4:	b953      	cbnz	r3, 400ffc <vPortExitCritical+0x1c>
  400fe6:	f04f 0380 	mov.w	r3, #128	; 0x80
  400fea:	b672      	cpsid	i
  400fec:	f383 8811 	msr	BASEPRI, r3
  400ff0:	f3bf 8f6f 	isb	sy
  400ff4:	f3bf 8f4f 	dsb	sy
  400ff8:	b662      	cpsie	i
  400ffa:	e7fe      	b.n	400ffa <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  400ffc:	3b01      	subs	r3, #1
  400ffe:	4a03      	ldr	r2, [pc, #12]	; (40100c <vPortExitCritical+0x2c>)
  401000:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  401002:	b90b      	cbnz	r3, 401008 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  401004:	f383 8811 	msr	BASEPRI, r3
  401008:	4770      	bx	lr
  40100a:	bf00      	nop
  40100c:	20400008 	.word	0x20400008

00401010 <PendSV_Handler>:
	__asm volatile
  401010:	f3ef 8009 	mrs	r0, PSP
  401014:	f3bf 8f6f 	isb	sy
  401018:	4b15      	ldr	r3, [pc, #84]	; (401070 <pxCurrentTCBConst>)
  40101a:	681a      	ldr	r2, [r3, #0]
  40101c:	f01e 0f10 	tst.w	lr, #16
  401020:	bf08      	it	eq
  401022:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  401026:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40102a:	6010      	str	r0, [r2, #0]
  40102c:	e92d 0009 	stmdb	sp!, {r0, r3}
  401030:	f04f 0080 	mov.w	r0, #128	; 0x80
  401034:	b672      	cpsid	i
  401036:	f380 8811 	msr	BASEPRI, r0
  40103a:	f3bf 8f4f 	dsb	sy
  40103e:	f3bf 8f6f 	isb	sy
  401042:	b662      	cpsie	i
  401044:	f001 f97c 	bl	402340 <vTaskSwitchContext>
  401048:	f04f 0000 	mov.w	r0, #0
  40104c:	f380 8811 	msr	BASEPRI, r0
  401050:	bc09      	pop	{r0, r3}
  401052:	6819      	ldr	r1, [r3, #0]
  401054:	6808      	ldr	r0, [r1, #0]
  401056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40105a:	f01e 0f10 	tst.w	lr, #16
  40105e:	bf08      	it	eq
  401060:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  401064:	f380 8809 	msr	PSP, r0
  401068:	f3bf 8f6f 	isb	sy
  40106c:	4770      	bx	lr
  40106e:	bf00      	nop

00401070 <pxCurrentTCBConst>:
  401070:	20400a5c 	.word	0x20400a5c

00401074 <SysTick_Handler>:
{
  401074:	b508      	push	{r3, lr}
	__asm volatile
  401076:	f04f 0380 	mov.w	r3, #128	; 0x80
  40107a:	b672      	cpsid	i
  40107c:	f383 8811 	msr	BASEPRI, r3
  401080:	f3bf 8f6f 	isb	sy
  401084:	f3bf 8f4f 	dsb	sy
  401088:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  40108a:	4b05      	ldr	r3, [pc, #20]	; (4010a0 <SysTick_Handler+0x2c>)
  40108c:	4798      	blx	r3
  40108e:	b118      	cbz	r0, 401098 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  401090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401094:	4b03      	ldr	r3, [pc, #12]	; (4010a4 <SysTick_Handler+0x30>)
  401096:	601a      	str	r2, [r3, #0]
	__asm volatile
  401098:	2300      	movs	r3, #0
  40109a:	f383 8811 	msr	BASEPRI, r3
  40109e:	bd08      	pop	{r3, pc}
  4010a0:	00402085 	.word	0x00402085
  4010a4:	e000ed04 	.word	0xe000ed04

004010a8 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
  4010a8:	4b05      	ldr	r3, [pc, #20]	; (4010c0 <vPortSetupTimerInterrupt+0x18>)
  4010aa:	2200      	movs	r2, #0
  4010ac:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
  4010ae:	4905      	ldr	r1, [pc, #20]	; (4010c4 <vPortSetupTimerInterrupt+0x1c>)
  4010b0:	600a      	str	r2, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  4010b2:	4905      	ldr	r1, [pc, #20]	; (4010c8 <vPortSetupTimerInterrupt+0x20>)
  4010b4:	4a05      	ldr	r2, [pc, #20]	; (4010cc <vPortSetupTimerInterrupt+0x24>)
  4010b6:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  4010b8:	2207      	movs	r2, #7
  4010ba:	601a      	str	r2, [r3, #0]
  4010bc:	4770      	bx	lr
  4010be:	bf00      	nop
  4010c0:	e000e010 	.word	0xe000e010
  4010c4:	e000e018 	.word	0xe000e018
  4010c8:	000927bf 	.word	0x000927bf
  4010cc:	e000e014 	.word	0xe000e014

004010d0 <xPortStartScheduler>:
{
  4010d0:	b510      	push	{r4, lr}
  4010d2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  4010d4:	4b2e      	ldr	r3, [pc, #184]	; (401190 <xPortStartScheduler+0xc0>)
  4010d6:	781a      	ldrb	r2, [r3, #0]
  4010d8:	b2d2      	uxtb	r2, r2
  4010da:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  4010dc:	22ff      	movs	r2, #255	; 0xff
  4010de:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  4010e0:	781b      	ldrb	r3, [r3, #0]
  4010e2:	b2db      	uxtb	r3, r3
  4010e4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  4010e8:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4010ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4010f0:	4a28      	ldr	r2, [pc, #160]	; (401194 <xPortStartScheduler+0xc4>)
  4010f2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  4010f4:	2207      	movs	r2, #7
  4010f6:	4b28      	ldr	r3, [pc, #160]	; (401198 <xPortStartScheduler+0xc8>)
  4010f8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  4010fa:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4010fe:	f013 0f80 	tst.w	r3, #128	; 0x80
  401102:	d012      	beq.n	40112a <xPortStartScheduler+0x5a>
  401104:	2306      	movs	r3, #6
  401106:	e000      	b.n	40110a <xPortStartScheduler+0x3a>
  401108:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  40110a:	f89d 2003 	ldrb.w	r2, [sp, #3]
  40110e:	0052      	lsls	r2, r2, #1
  401110:	b2d2      	uxtb	r2, r2
  401112:	f88d 2003 	strb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  401116:	f89d 2003 	ldrb.w	r2, [sp, #3]
  40111a:	1e59      	subs	r1, r3, #1
  40111c:	f012 0f80 	tst.w	r2, #128	; 0x80
  401120:	d1f2      	bne.n	401108 <xPortStartScheduler+0x38>
  401122:	4a1d      	ldr	r2, [pc, #116]	; (401198 <xPortStartScheduler+0xc8>)
  401124:	6013      	str	r3, [r2, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
  401126:	2b04      	cmp	r3, #4
  401128:	d00a      	beq.n	401140 <xPortStartScheduler+0x70>
	__asm volatile
  40112a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40112e:	b672      	cpsid	i
  401130:	f383 8811 	msr	BASEPRI, r3
  401134:	f3bf 8f6f 	isb	sy
  401138:	f3bf 8f4f 	dsb	sy
  40113c:	b662      	cpsie	i
  40113e:	e7fe      	b.n	40113e <xPortStartScheduler+0x6e>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  401140:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  401142:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401146:	4a14      	ldr	r2, [pc, #80]	; (401198 <xPortStartScheduler+0xc8>)
  401148:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  40114a:	9b01      	ldr	r3, [sp, #4]
  40114c:	b2db      	uxtb	r3, r3
  40114e:	4a10      	ldr	r2, [pc, #64]	; (401190 <xPortStartScheduler+0xc0>)
  401150:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  401152:	4b12      	ldr	r3, [pc, #72]	; (40119c <xPortStartScheduler+0xcc>)
  401154:	681a      	ldr	r2, [r3, #0]
  401156:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  40115a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  40115c:	681a      	ldr	r2, [r3, #0]
  40115e:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  401162:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  401164:	4b0e      	ldr	r3, [pc, #56]	; (4011a0 <xPortStartScheduler+0xd0>)
  401166:	4798      	blx	r3
	uxCriticalNesting = 0;
  401168:	2400      	movs	r4, #0
  40116a:	4b0e      	ldr	r3, [pc, #56]	; (4011a4 <xPortStartScheduler+0xd4>)
  40116c:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
  40116e:	4b0e      	ldr	r3, [pc, #56]	; (4011a8 <xPortStartScheduler+0xd8>)
  401170:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  401172:	4a0e      	ldr	r2, [pc, #56]	; (4011ac <xPortStartScheduler+0xdc>)
  401174:	6813      	ldr	r3, [r2, #0]
  401176:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  40117a:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  40117c:	4b0c      	ldr	r3, [pc, #48]	; (4011b0 <xPortStartScheduler+0xe0>)
  40117e:	4798      	blx	r3
	vTaskSwitchContext();
  401180:	4b0c      	ldr	r3, [pc, #48]	; (4011b4 <xPortStartScheduler+0xe4>)
  401182:	4798      	blx	r3
	prvTaskExitError();
  401184:	4b0c      	ldr	r3, [pc, #48]	; (4011b8 <xPortStartScheduler+0xe8>)
  401186:	4798      	blx	r3
}
  401188:	4620      	mov	r0, r4
  40118a:	b002      	add	sp, #8
  40118c:	bd10      	pop	{r4, pc}
  40118e:	bf00      	nop
  401190:	e000e400 	.word	0xe000e400
  401194:	20400a54 	.word	0x20400a54
  401198:	20400a58 	.word	0x20400a58
  40119c:	e000ed20 	.word	0xe000ed20
  4011a0:	004010a9 	.word	0x004010a9
  4011a4:	20400008 	.word	0x20400008
  4011a8:	00400f31 	.word	0x00400f31
  4011ac:	e000ef34 	.word	0xe000ef34
  4011b0:	00400f09 	.word	0x00400f09
  4011b4:	00402341 	.word	0x00402341
  4011b8:	00400ec1 	.word	0x00400ec1

004011bc <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
  4011bc:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  4011c0:	2b0f      	cmp	r3, #15
  4011c2:	d911      	bls.n	4011e8 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  4011c4:	4a12      	ldr	r2, [pc, #72]	; (401210 <vPortValidateInterruptPriority+0x54>)
  4011c6:	5c9b      	ldrb	r3, [r3, r2]
  4011c8:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  4011ca:	4a12      	ldr	r2, [pc, #72]	; (401214 <vPortValidateInterruptPriority+0x58>)
  4011cc:	7812      	ldrb	r2, [r2, #0]
  4011ce:	429a      	cmp	r2, r3
  4011d0:	d90a      	bls.n	4011e8 <vPortValidateInterruptPriority+0x2c>
  4011d2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4011d6:	b672      	cpsid	i
  4011d8:	f383 8811 	msr	BASEPRI, r3
  4011dc:	f3bf 8f6f 	isb	sy
  4011e0:	f3bf 8f4f 	dsb	sy
  4011e4:	b662      	cpsie	i
  4011e6:	e7fe      	b.n	4011e6 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  4011e8:	4b0b      	ldr	r3, [pc, #44]	; (401218 <vPortValidateInterruptPriority+0x5c>)
  4011ea:	681b      	ldr	r3, [r3, #0]
  4011ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4011f0:	4a0a      	ldr	r2, [pc, #40]	; (40121c <vPortValidateInterruptPriority+0x60>)
  4011f2:	6812      	ldr	r2, [r2, #0]
  4011f4:	4293      	cmp	r3, r2
  4011f6:	d90a      	bls.n	40120e <vPortValidateInterruptPriority+0x52>
  4011f8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4011fc:	b672      	cpsid	i
  4011fe:	f383 8811 	msr	BASEPRI, r3
  401202:	f3bf 8f6f 	isb	sy
  401206:	f3bf 8f4f 	dsb	sy
  40120a:	b662      	cpsie	i
  40120c:	e7fe      	b.n	40120c <vPortValidateInterruptPriority+0x50>
  40120e:	4770      	bx	lr
  401210:	e000e3f0 	.word	0xe000e3f0
  401214:	20400a54 	.word	0x20400a54
  401218:	e000ed0c 	.word	0xe000ed0c
  40121c:	20400a58 	.word	0x20400a58

00401220 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  401220:	b510      	push	{r4, lr}
  401222:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
  401224:	4b06      	ldr	r3, [pc, #24]	; (401240 <pvPortMalloc+0x20>)
  401226:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  401228:	4620      	mov	r0, r4
  40122a:	4b06      	ldr	r3, [pc, #24]	; (401244 <pvPortMalloc+0x24>)
  40122c:	4798      	blx	r3
  40122e:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  401230:	4b05      	ldr	r3, [pc, #20]	; (401248 <pvPortMalloc+0x28>)
  401232:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  401234:	b10c      	cbz	r4, 40123a <pvPortMalloc+0x1a>
		}
	}
	#endif

	return pvReturn;
}
  401236:	4620      	mov	r0, r4
  401238:	bd10      	pop	{r4, pc}
			vApplicationMallocFailedHook();
  40123a:	4b04      	ldr	r3, [pc, #16]	; (40124c <pvPortMalloc+0x2c>)
  40123c:	4798      	blx	r3
	return pvReturn;
  40123e:	e7fa      	b.n	401236 <pvPortMalloc+0x16>
  401240:	00402069 	.word	0x00402069
  401244:	00406861 	.word	0x00406861
  401248:	004021cd 	.word	0x004021cd
  40124c:	00403815 	.word	0x00403815

00401250 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
  401250:	b148      	cbz	r0, 401266 <vPortFree+0x16>
{
  401252:	b510      	push	{r4, lr}
  401254:	4604      	mov	r4, r0
	{
		vTaskSuspendAll();
  401256:	4b04      	ldr	r3, [pc, #16]	; (401268 <vPortFree+0x18>)
  401258:	4798      	blx	r3
		{
			free( pv );
  40125a:	4620      	mov	r0, r4
  40125c:	4b03      	ldr	r3, [pc, #12]	; (40126c <vPortFree+0x1c>)
  40125e:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  401260:	4b03      	ldr	r3, [pc, #12]	; (401270 <vPortFree+0x20>)
  401262:	4798      	blx	r3
  401264:	bd10      	pop	{r4, pc}
  401266:	4770      	bx	lr
  401268:	00402069 	.word	0x00402069
  40126c:	00406871 	.word	0x00406871
  401270:	004021cd 	.word	0x004021cd

00401274 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
  401274:	b510      	push	{r4, lr}
  401276:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
  401278:	4b04      	ldr	r3, [pc, #16]	; (40128c <prvIsQueueEmpty+0x18>)
  40127a:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  40127c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  40127e:	4b04      	ldr	r3, [pc, #16]	; (401290 <prvIsQueueEmpty+0x1c>)
  401280:	4798      	blx	r3

	return xReturn;
}
  401282:	fab4 f084 	clz	r0, r4
  401286:	0940      	lsrs	r0, r0, #5
  401288:	bd10      	pop	{r4, pc}
  40128a:	bf00      	nop
  40128c:	00400f95 	.word	0x00400f95
  401290:	00400fe1 	.word	0x00400fe1

00401294 <prvCopyDataToQueue>:
{
  401294:	b570      	push	{r4, r5, r6, lr}
  401296:	4604      	mov	r4, r0
  401298:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  40129a:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  40129c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40129e:	b952      	cbnz	r2, 4012b6 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4012a0:	6803      	ldr	r3, [r0, #0]
  4012a2:	2b00      	cmp	r3, #0
  4012a4:	d12a      	bne.n	4012fc <prvCopyDataToQueue+0x68>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  4012a6:	6840      	ldr	r0, [r0, #4]
  4012a8:	4b17      	ldr	r3, [pc, #92]	; (401308 <prvCopyDataToQueue+0x74>)
  4012aa:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  4012ac:	2300      	movs	r3, #0
  4012ae:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
  4012b0:	3501      	adds	r5, #1
  4012b2:	63a5      	str	r5, [r4, #56]	; 0x38
}
  4012b4:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
  4012b6:	b96e      	cbnz	r6, 4012d4 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  4012b8:	6880      	ldr	r0, [r0, #8]
  4012ba:	4b14      	ldr	r3, [pc, #80]	; (40130c <prvCopyDataToQueue+0x78>)
  4012bc:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  4012be:	68a3      	ldr	r3, [r4, #8]
  4012c0:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4012c2:	4413      	add	r3, r2
  4012c4:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4012c6:	6862      	ldr	r2, [r4, #4]
  4012c8:	4293      	cmp	r3, r2
  4012ca:	d319      	bcc.n	401300 <prvCopyDataToQueue+0x6c>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  4012cc:	6823      	ldr	r3, [r4, #0]
  4012ce:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  4012d0:	2000      	movs	r0, #0
  4012d2:	e7ed      	b.n	4012b0 <prvCopyDataToQueue+0x1c>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4012d4:	68c0      	ldr	r0, [r0, #12]
  4012d6:	4b0d      	ldr	r3, [pc, #52]	; (40130c <prvCopyDataToQueue+0x78>)
  4012d8:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  4012da:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4012dc:	425b      	negs	r3, r3
  4012de:	68e2      	ldr	r2, [r4, #12]
  4012e0:	441a      	add	r2, r3
  4012e2:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4012e4:	6821      	ldr	r1, [r4, #0]
  4012e6:	428a      	cmp	r2, r1
  4012e8:	d202      	bcs.n	4012f0 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  4012ea:	6862      	ldr	r2, [r4, #4]
  4012ec:	4413      	add	r3, r2
  4012ee:	60e3      	str	r3, [r4, #12]
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  4012f0:	b145      	cbz	r5, 401304 <prvCopyDataToQueue+0x70>
  4012f2:	2e02      	cmp	r6, #2
  4012f4:	d106      	bne.n	401304 <prvCopyDataToQueue+0x70>
				--uxMessagesWaiting;
  4012f6:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
  4012f8:	2000      	movs	r0, #0
  4012fa:	e7d9      	b.n	4012b0 <prvCopyDataToQueue+0x1c>
  4012fc:	2000      	movs	r0, #0
  4012fe:	e7d7      	b.n	4012b0 <prvCopyDataToQueue+0x1c>
  401300:	2000      	movs	r0, #0
  401302:	e7d5      	b.n	4012b0 <prvCopyDataToQueue+0x1c>
  401304:	2000      	movs	r0, #0
  401306:	e7d3      	b.n	4012b0 <prvCopyDataToQueue+0x1c>
  401308:	004026c5 	.word	0x004026c5
  40130c:	00406de1 	.word	0x00406de1

00401310 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  401310:	b570      	push	{r4, r5, r6, lr}
  401312:	b082      	sub	sp, #8
  401314:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  401316:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  401318:	b174      	cbz	r4, 401338 <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  40131a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40131c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40131e:	429a      	cmp	r2, r3
  401320:	d315      	bcc.n	40134e <prvNotifyQueueSetContainer+0x3e>
  401322:	f04f 0380 	mov.w	r3, #128	; 0x80
  401326:	b672      	cpsid	i
  401328:	f383 8811 	msr	BASEPRI, r3
  40132c:	f3bf 8f6f 	isb	sy
  401330:	f3bf 8f4f 	dsb	sy
  401334:	b662      	cpsie	i
  401336:	e7fe      	b.n	401336 <prvNotifyQueueSetContainer+0x26>
  401338:	f04f 0380 	mov.w	r3, #128	; 0x80
  40133c:	b672      	cpsid	i
  40133e:	f383 8811 	msr	BASEPRI, r3
  401342:	f3bf 8f6f 	isb	sy
  401346:	f3bf 8f4f 	dsb	sy
  40134a:	b662      	cpsie	i
  40134c:	e7fe      	b.n	40134c <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  40134e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401350:	4293      	cmp	r3, r2
  401352:	d803      	bhi.n	40135c <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  401354:	2600      	movs	r6, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  401356:	4630      	mov	r0, r6
  401358:	b002      	add	sp, #8
  40135a:	bd70      	pop	{r4, r5, r6, pc}
  40135c:	460a      	mov	r2, r1
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
  40135e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
  401362:	b26d      	sxtb	r5, r5
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  401364:	a901      	add	r1, sp, #4
  401366:	4620      	mov	r0, r4
  401368:	4b0a      	ldr	r3, [pc, #40]	; (401394 <prvNotifyQueueSetContainer+0x84>)
  40136a:	4798      	blx	r3
  40136c:	4606      	mov	r6, r0
			if( cTxLock == queueUNLOCKED )
  40136e:	f1b5 3fff 	cmp.w	r5, #4294967295
  401372:	d10a      	bne.n	40138a <prvNotifyQueueSetContainer+0x7a>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  401374:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401376:	2b00      	cmp	r3, #0
  401378:	d0ed      	beq.n	401356 <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  40137a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40137e:	4b06      	ldr	r3, [pc, #24]	; (401398 <prvNotifyQueueSetContainer+0x88>)
  401380:	4798      	blx	r3
  401382:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  401384:	bf18      	it	ne
  401386:	2601      	movne	r6, #1
  401388:	e7e5      	b.n	401356 <prvNotifyQueueSetContainer+0x46>
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
  40138a:	1c6b      	adds	r3, r5, #1
  40138c:	b25b      	sxtb	r3, r3
  40138e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  401392:	e7e0      	b.n	401356 <prvNotifyQueueSetContainer+0x46>
  401394:	00401295 	.word	0x00401295
  401398:	00402495 	.word	0x00402495

0040139c <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  40139c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40139e:	b172      	cbz	r2, 4013be <prvCopyDataFromQueue+0x22>
{
  4013a0:	b510      	push	{r4, lr}
  4013a2:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  4013a4:	68c4      	ldr	r4, [r0, #12]
  4013a6:	4414      	add	r4, r2
  4013a8:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  4013aa:	6840      	ldr	r0, [r0, #4]
  4013ac:	4284      	cmp	r4, r0
  4013ae:	d301      	bcc.n	4013b4 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  4013b0:	6818      	ldr	r0, [r3, #0]
  4013b2:	60d8      	str	r0, [r3, #12]
  4013b4:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  4013b6:	68d9      	ldr	r1, [r3, #12]
  4013b8:	4b01      	ldr	r3, [pc, #4]	; (4013c0 <prvCopyDataFromQueue+0x24>)
  4013ba:	4798      	blx	r3
  4013bc:	bd10      	pop	{r4, pc}
  4013be:	4770      	bx	lr
  4013c0:	00406de1 	.word	0x00406de1

004013c4 <prvUnlockQueue>:
{
  4013c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4013c8:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
  4013ca:	4b23      	ldr	r3, [pc, #140]	; (401458 <prvUnlockQueue+0x94>)
  4013cc:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
  4013ce:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
  4013d2:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
  4013d4:	2c00      	cmp	r4, #0
  4013d6:	dd19      	ble.n	40140c <prvUnlockQueue+0x48>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
  4013d8:	4e20      	ldr	r6, [pc, #128]	; (40145c <prvUnlockQueue+0x98>)
						vTaskMissedYield();
  4013da:	f8df 808c 	ldr.w	r8, [pc, #140]	; 401468 <prvUnlockQueue+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4013de:	4f20      	ldr	r7, [pc, #128]	; (401460 <prvUnlockQueue+0x9c>)
  4013e0:	e008      	b.n	4013f4 <prvUnlockQueue+0x30>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4013e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  4013e4:	b193      	cbz	r3, 40140c <prvUnlockQueue+0x48>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4013e6:	f105 0024 	add.w	r0, r5, #36	; 0x24
  4013ea:	47b8      	blx	r7
  4013ec:	b960      	cbnz	r0, 401408 <prvUnlockQueue+0x44>
  4013ee:	3c01      	subs	r4, #1
  4013f0:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
  4013f2:	b15c      	cbz	r4, 40140c <prvUnlockQueue+0x48>
				if( pxQueue->pxQueueSetContainer != NULL )
  4013f4:	6cab      	ldr	r3, [r5, #72]	; 0x48
  4013f6:	2b00      	cmp	r3, #0
  4013f8:	d0f3      	beq.n	4013e2 <prvUnlockQueue+0x1e>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
  4013fa:	2100      	movs	r1, #0
  4013fc:	4628      	mov	r0, r5
  4013fe:	47b0      	blx	r6
  401400:	2800      	cmp	r0, #0
  401402:	d0f4      	beq.n	4013ee <prvUnlockQueue+0x2a>
						vTaskMissedYield();
  401404:	47c0      	blx	r8
  401406:	e7f2      	b.n	4013ee <prvUnlockQueue+0x2a>
							vTaskMissedYield();
  401408:	47c0      	blx	r8
  40140a:	e7f0      	b.n	4013ee <prvUnlockQueue+0x2a>
		pxQueue->cTxLock = queueUNLOCKED;
  40140c:	23ff      	movs	r3, #255	; 0xff
  40140e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
  401412:	4b14      	ldr	r3, [pc, #80]	; (401464 <prvUnlockQueue+0xa0>)
  401414:	4798      	blx	r3
	taskENTER_CRITICAL();
  401416:	4b10      	ldr	r3, [pc, #64]	; (401458 <prvUnlockQueue+0x94>)
  401418:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
  40141a:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
  40141e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
  401420:	2c00      	cmp	r4, #0
  401422:	dd12      	ble.n	40144a <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401424:	692b      	ldr	r3, [r5, #16]
  401426:	b183      	cbz	r3, 40144a <prvUnlockQueue+0x86>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401428:	f105 0710 	add.w	r7, r5, #16
  40142c:	4e0c      	ldr	r6, [pc, #48]	; (401460 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  40142e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 401468 <prvUnlockQueue+0xa4>
  401432:	e004      	b.n	40143e <prvUnlockQueue+0x7a>
  401434:	3c01      	subs	r4, #1
  401436:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
  401438:	b13c      	cbz	r4, 40144a <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40143a:	692b      	ldr	r3, [r5, #16]
  40143c:	b12b      	cbz	r3, 40144a <prvUnlockQueue+0x86>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40143e:	4638      	mov	r0, r7
  401440:	47b0      	blx	r6
  401442:	2800      	cmp	r0, #0
  401444:	d0f6      	beq.n	401434 <prvUnlockQueue+0x70>
					vTaskMissedYield();
  401446:	47c0      	blx	r8
  401448:	e7f4      	b.n	401434 <prvUnlockQueue+0x70>
		pxQueue->cRxLock = queueUNLOCKED;
  40144a:	23ff      	movs	r3, #255	; 0xff
  40144c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
  401450:	4b04      	ldr	r3, [pc, #16]	; (401464 <prvUnlockQueue+0xa0>)
  401452:	4798      	blx	r3
  401454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401458:	00400f95 	.word	0x00400f95
  40145c:	00401311 	.word	0x00401311
  401460:	00402495 	.word	0x00402495
  401464:	00400fe1 	.word	0x00400fe1
  401468:	004025d9 	.word	0x004025d9

0040146c <xQueueGenericReset>:
{
  40146c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  40146e:	b330      	cbz	r0, 4014be <xQueueGenericReset+0x52>
  401470:	4604      	mov	r4, r0
  401472:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  401474:	4b1d      	ldr	r3, [pc, #116]	; (4014ec <xQueueGenericReset+0x80>)
  401476:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  401478:	6822      	ldr	r2, [r4, #0]
  40147a:	6c21      	ldr	r1, [r4, #64]	; 0x40
  40147c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40147e:	fb03 f301 	mul.w	r3, r3, r1
  401482:	18d0      	adds	r0, r2, r3
  401484:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  401486:	2000      	movs	r0, #0
  401488:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  40148a:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  40148c:	1a5b      	subs	r3, r3, r1
  40148e:	4413      	add	r3, r2
  401490:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
  401492:	23ff      	movs	r3, #255	; 0xff
  401494:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
  401498:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
  40149c:	b9d5      	cbnz	r5, 4014d4 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40149e:	6923      	ldr	r3, [r4, #16]
  4014a0:	b1fb      	cbz	r3, 4014e2 <xQueueGenericReset+0x76>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4014a2:	f104 0010 	add.w	r0, r4, #16
  4014a6:	4b12      	ldr	r3, [pc, #72]	; (4014f0 <xQueueGenericReset+0x84>)
  4014a8:	4798      	blx	r3
  4014aa:	b1d0      	cbz	r0, 4014e2 <xQueueGenericReset+0x76>
					queueYIELD_IF_USING_PREEMPTION();
  4014ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4014b0:	4b10      	ldr	r3, [pc, #64]	; (4014f4 <xQueueGenericReset+0x88>)
  4014b2:	601a      	str	r2, [r3, #0]
  4014b4:	f3bf 8f4f 	dsb	sy
  4014b8:	f3bf 8f6f 	isb	sy
  4014bc:	e011      	b.n	4014e2 <xQueueGenericReset+0x76>
  4014be:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014c2:	b672      	cpsid	i
  4014c4:	f383 8811 	msr	BASEPRI, r3
  4014c8:	f3bf 8f6f 	isb	sy
  4014cc:	f3bf 8f4f 	dsb	sy
  4014d0:	b662      	cpsie	i
  4014d2:	e7fe      	b.n	4014d2 <xQueueGenericReset+0x66>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  4014d4:	f104 0010 	add.w	r0, r4, #16
  4014d8:	4d07      	ldr	r5, [pc, #28]	; (4014f8 <xQueueGenericReset+0x8c>)
  4014da:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  4014dc:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4014e0:	47a8      	blx	r5
	taskEXIT_CRITICAL();
  4014e2:	4b06      	ldr	r3, [pc, #24]	; (4014fc <xQueueGenericReset+0x90>)
  4014e4:	4798      	blx	r3
}
  4014e6:	2001      	movs	r0, #1
  4014e8:	bd38      	pop	{r3, r4, r5, pc}
  4014ea:	bf00      	nop
  4014ec:	00400f95 	.word	0x00400f95
  4014f0:	00402495 	.word	0x00402495
  4014f4:	e000ed04 	.word	0xe000ed04
  4014f8:	00400e31 	.word	0x00400e31
  4014fc:	00400fe1 	.word	0x00400fe1

00401500 <xQueueGenericCreate>:
	{
  401500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  401502:	b950      	cbnz	r0, 40151a <xQueueGenericCreate+0x1a>
  401504:	f04f 0380 	mov.w	r3, #128	; 0x80
  401508:	b672      	cpsid	i
  40150a:	f383 8811 	msr	BASEPRI, r3
  40150e:	f3bf 8f6f 	isb	sy
  401512:	f3bf 8f4f 	dsb	sy
  401516:	b662      	cpsie	i
  401518:	e7fe      	b.n	401518 <xQueueGenericCreate+0x18>
  40151a:	4606      	mov	r6, r0
  40151c:	4617      	mov	r7, r2
  40151e:	460d      	mov	r5, r1
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401520:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401524:	3054      	adds	r0, #84	; 0x54
  401526:	4b0b      	ldr	r3, [pc, #44]	; (401554 <xQueueGenericCreate+0x54>)
  401528:	4798      	blx	r3
		if( pxNewQueue != NULL )
  40152a:	4604      	mov	r4, r0
  40152c:	b178      	cbz	r0, 40154e <xQueueGenericCreate+0x4e>
	if( uxItemSize == ( UBaseType_t ) 0 )
  40152e:	b11d      	cbz	r5, 401538 <xQueueGenericCreate+0x38>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
  401530:	f100 0354 	add.w	r3, r0, #84	; 0x54
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
  401534:	6003      	str	r3, [r0, #0]
  401536:	e000      	b.n	40153a <xQueueGenericCreate+0x3a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  401538:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
  40153a:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
  40153c:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  40153e:	2101      	movs	r1, #1
  401540:	4620      	mov	r0, r4
  401542:	4b05      	ldr	r3, [pc, #20]	; (401558 <xQueueGenericCreate+0x58>)
  401544:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
  401546:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewQueue->pxQueueSetContainer = NULL;
  40154a:	2300      	movs	r3, #0
  40154c:	64a3      	str	r3, [r4, #72]	; 0x48
	}
  40154e:	4620      	mov	r0, r4
  401550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401552:	bf00      	nop
  401554:	00401221 	.word	0x00401221
  401558:	0040146d 	.word	0x0040146d

0040155c <xQueueGenericSend>:
{
  40155c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401560:	b085      	sub	sp, #20
  401562:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401564:	b1b8      	cbz	r0, 401596 <xQueueGenericSend+0x3a>
  401566:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401568:	b301      	cbz	r1, 4015ac <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40156a:	2b02      	cmp	r3, #2
  40156c:	d02c      	beq.n	4015c8 <xQueueGenericSend+0x6c>
  40156e:	461e      	mov	r6, r3
  401570:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401572:	4b69      	ldr	r3, [pc, #420]	; (401718 <xQueueGenericSend+0x1bc>)
  401574:	4798      	blx	r3
  401576:	2800      	cmp	r0, #0
  401578:	d134      	bne.n	4015e4 <xQueueGenericSend+0x88>
  40157a:	9b01      	ldr	r3, [sp, #4]
  40157c:	2b00      	cmp	r3, #0
  40157e:	d039      	beq.n	4015f4 <xQueueGenericSend+0x98>
  401580:	f04f 0380 	mov.w	r3, #128	; 0x80
  401584:	b672      	cpsid	i
  401586:	f383 8811 	msr	BASEPRI, r3
  40158a:	f3bf 8f6f 	isb	sy
  40158e:	f3bf 8f4f 	dsb	sy
  401592:	b662      	cpsie	i
  401594:	e7fe      	b.n	401594 <xQueueGenericSend+0x38>
  401596:	f04f 0380 	mov.w	r3, #128	; 0x80
  40159a:	b672      	cpsid	i
  40159c:	f383 8811 	msr	BASEPRI, r3
  4015a0:	f3bf 8f6f 	isb	sy
  4015a4:	f3bf 8f4f 	dsb	sy
  4015a8:	b662      	cpsie	i
  4015aa:	e7fe      	b.n	4015aa <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4015ac:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4015ae:	2a00      	cmp	r2, #0
  4015b0:	d0db      	beq.n	40156a <xQueueGenericSend+0xe>
  4015b2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015b6:	b672      	cpsid	i
  4015b8:	f383 8811 	msr	BASEPRI, r3
  4015bc:	f3bf 8f6f 	isb	sy
  4015c0:	f3bf 8f4f 	dsb	sy
  4015c4:	b662      	cpsie	i
  4015c6:	e7fe      	b.n	4015c6 <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4015c8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  4015ca:	2a01      	cmp	r2, #1
  4015cc:	d0cf      	beq.n	40156e <xQueueGenericSend+0x12>
  4015ce:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015d2:	b672      	cpsid	i
  4015d4:	f383 8811 	msr	BASEPRI, r3
  4015d8:	f3bf 8f6f 	isb	sy
  4015dc:	f3bf 8f4f 	dsb	sy
  4015e0:	b662      	cpsie	i
  4015e2:	e7fe      	b.n	4015e2 <xQueueGenericSend+0x86>
  4015e4:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
  4015e6:	f8df 815c 	ldr.w	r8, [pc, #348]	; 401744 <xQueueGenericSend+0x1e8>
					vTaskInternalSetTimeOutState( &xTimeOut );
  4015ea:	f8df a15c 	ldr.w	sl, [pc, #348]	; 401748 <xQueueGenericSend+0x1ec>
					portYIELD_WITHIN_API();
  4015ee:	f8df 9134 	ldr.w	r9, [pc, #308]	; 401724 <xQueueGenericSend+0x1c8>
  4015f2:	e041      	b.n	401678 <xQueueGenericSend+0x11c>
  4015f4:	2500      	movs	r5, #0
  4015f6:	e7f6      	b.n	4015e6 <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4015f8:	4632      	mov	r2, r6
  4015fa:	4639      	mov	r1, r7
  4015fc:	4620      	mov	r0, r4
  4015fe:	4b47      	ldr	r3, [pc, #284]	; (40171c <xQueueGenericSend+0x1c0>)
  401600:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  401602:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401604:	b193      	cbz	r3, 40162c <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
  401606:	4631      	mov	r1, r6
  401608:	4620      	mov	r0, r4
  40160a:	4b45      	ldr	r3, [pc, #276]	; (401720 <xQueueGenericSend+0x1c4>)
  40160c:	4798      	blx	r3
  40160e:	b138      	cbz	r0, 401620 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401610:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401614:	4b43      	ldr	r3, [pc, #268]	; (401724 <xQueueGenericSend+0x1c8>)
  401616:	601a      	str	r2, [r3, #0]
  401618:	f3bf 8f4f 	dsb	sy
  40161c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401620:	4b41      	ldr	r3, [pc, #260]	; (401728 <xQueueGenericSend+0x1cc>)
  401622:	4798      	blx	r3
				return pdPASS;
  401624:	2001      	movs	r0, #1
}
  401626:	b005      	add	sp, #20
  401628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40162c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40162e:	b173      	cbz	r3, 40164e <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401630:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401634:	4b3d      	ldr	r3, [pc, #244]	; (40172c <xQueueGenericSend+0x1d0>)
  401636:	4798      	blx	r3
  401638:	2800      	cmp	r0, #0
  40163a:	d0f1      	beq.n	401620 <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  40163c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401640:	4b38      	ldr	r3, [pc, #224]	; (401724 <xQueueGenericSend+0x1c8>)
  401642:	601a      	str	r2, [r3, #0]
  401644:	f3bf 8f4f 	dsb	sy
  401648:	f3bf 8f6f 	isb	sy
  40164c:	e7e8      	b.n	401620 <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  40164e:	2800      	cmp	r0, #0
  401650:	d0e6      	beq.n	401620 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401656:	4b33      	ldr	r3, [pc, #204]	; (401724 <xQueueGenericSend+0x1c8>)
  401658:	601a      	str	r2, [r3, #0]
  40165a:	f3bf 8f4f 	dsb	sy
  40165e:	f3bf 8f6f 	isb	sy
  401662:	e7dd      	b.n	401620 <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  401664:	4b30      	ldr	r3, [pc, #192]	; (401728 <xQueueGenericSend+0x1cc>)
  401666:	4798      	blx	r3
					return errQUEUE_FULL;
  401668:	2000      	movs	r0, #0
  40166a:	e7dc      	b.n	401626 <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  40166c:	4620      	mov	r0, r4
  40166e:	4b30      	ldr	r3, [pc, #192]	; (401730 <xQueueGenericSend+0x1d4>)
  401670:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401672:	4b30      	ldr	r3, [pc, #192]	; (401734 <xQueueGenericSend+0x1d8>)
  401674:	4798      	blx	r3
  401676:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
  401678:	47c0      	blx	r8
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  40167a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40167c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40167e:	429a      	cmp	r2, r3
  401680:	d3ba      	bcc.n	4015f8 <xQueueGenericSend+0x9c>
  401682:	2e02      	cmp	r6, #2
  401684:	d0b8      	beq.n	4015f8 <xQueueGenericSend+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
  401686:	9b01      	ldr	r3, [sp, #4]
  401688:	2b00      	cmp	r3, #0
  40168a:	d0eb      	beq.n	401664 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  40168c:	b90d      	cbnz	r5, 401692 <xQueueGenericSend+0x136>
					vTaskInternalSetTimeOutState( &xTimeOut );
  40168e:	a802      	add	r0, sp, #8
  401690:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  401692:	4b25      	ldr	r3, [pc, #148]	; (401728 <xQueueGenericSend+0x1cc>)
  401694:	4798      	blx	r3
		vTaskSuspendAll();
  401696:	4b28      	ldr	r3, [pc, #160]	; (401738 <xQueueGenericSend+0x1dc>)
  401698:	4798      	blx	r3
		prvLockQueue( pxQueue );
  40169a:	47c0      	blx	r8
  40169c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  4016a0:	b25b      	sxtb	r3, r3
  4016a2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4016a6:	d102      	bne.n	4016ae <xQueueGenericSend+0x152>
  4016a8:	2300      	movs	r3, #0
  4016aa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  4016ae:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  4016b2:	b25b      	sxtb	r3, r3
  4016b4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4016b8:	d102      	bne.n	4016c0 <xQueueGenericSend+0x164>
  4016ba:	2300      	movs	r3, #0
  4016bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  4016c0:	4b19      	ldr	r3, [pc, #100]	; (401728 <xQueueGenericSend+0x1cc>)
  4016c2:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4016c4:	a901      	add	r1, sp, #4
  4016c6:	a802      	add	r0, sp, #8
  4016c8:	4b1c      	ldr	r3, [pc, #112]	; (40173c <xQueueGenericSend+0x1e0>)
  4016ca:	4798      	blx	r3
  4016cc:	b9e0      	cbnz	r0, 401708 <xQueueGenericSend+0x1ac>
	taskENTER_CRITICAL();
  4016ce:	47c0      	blx	r8
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  4016d0:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  4016d4:	6be5      	ldr	r5, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  4016d6:	4b14      	ldr	r3, [pc, #80]	; (401728 <xQueueGenericSend+0x1cc>)
  4016d8:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  4016da:	45ab      	cmp	fp, r5
  4016dc:	d1c6      	bne.n	40166c <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  4016de:	9901      	ldr	r1, [sp, #4]
  4016e0:	f104 0010 	add.w	r0, r4, #16
  4016e4:	4b16      	ldr	r3, [pc, #88]	; (401740 <xQueueGenericSend+0x1e4>)
  4016e6:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  4016e8:	4620      	mov	r0, r4
  4016ea:	4b11      	ldr	r3, [pc, #68]	; (401730 <xQueueGenericSend+0x1d4>)
  4016ec:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4016ee:	4b11      	ldr	r3, [pc, #68]	; (401734 <xQueueGenericSend+0x1d8>)
  4016f0:	4798      	blx	r3
  4016f2:	2800      	cmp	r0, #0
  4016f4:	d1bf      	bne.n	401676 <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  4016f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4016fa:	f8c9 3000 	str.w	r3, [r9]
  4016fe:	f3bf 8f4f 	dsb	sy
  401702:	f3bf 8f6f 	isb	sy
  401706:	e7b6      	b.n	401676 <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  401708:	4620      	mov	r0, r4
  40170a:	4b09      	ldr	r3, [pc, #36]	; (401730 <xQueueGenericSend+0x1d4>)
  40170c:	4798      	blx	r3
			( void ) xTaskResumeAll();
  40170e:	4b09      	ldr	r3, [pc, #36]	; (401734 <xQueueGenericSend+0x1d8>)
  401710:	4798      	blx	r3
			return errQUEUE_FULL;
  401712:	2000      	movs	r0, #0
  401714:	e787      	b.n	401626 <xQueueGenericSend+0xca>
  401716:	bf00      	nop
  401718:	004025e5 	.word	0x004025e5
  40171c:	00401295 	.word	0x00401295
  401720:	00401311 	.word	0x00401311
  401724:	e000ed04 	.word	0xe000ed04
  401728:	00400fe1 	.word	0x00400fe1
  40172c:	00402495 	.word	0x00402495
  401730:	004013c5 	.word	0x004013c5
  401734:	004021cd 	.word	0x004021cd
  401738:	00402069 	.word	0x00402069
  40173c:	00402545 	.word	0x00402545
  401740:	00402411 	.word	0x00402411
  401744:	00400f95 	.word	0x00400f95
  401748:	0040252d 	.word	0x0040252d

0040174c <xQueueGenericSendFromISR>:
{
  40174c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
  401750:	2800      	cmp	r0, #0
  401752:	d039      	beq.n	4017c8 <xQueueGenericSendFromISR+0x7c>
  401754:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401756:	2900      	cmp	r1, #0
  401758:	d041      	beq.n	4017de <xQueueGenericSendFromISR+0x92>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40175a:	2b02      	cmp	r3, #2
  40175c:	d04d      	beq.n	4017fa <xQueueGenericSendFromISR+0xae>
  40175e:	461f      	mov	r7, r3
  401760:	4690      	mov	r8, r2
  401762:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401764:	4b3a      	ldr	r3, [pc, #232]	; (401850 <xQueueGenericSendFromISR+0x104>)
  401766:	4798      	blx	r3
	__asm volatile
  401768:	f3ef 8611 	mrs	r6, BASEPRI
  40176c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401770:	b672      	cpsid	i
  401772:	f383 8811 	msr	BASEPRI, r3
  401776:	f3bf 8f6f 	isb	sy
  40177a:	f3bf 8f4f 	dsb	sy
  40177e:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401780:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401782:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401784:	429a      	cmp	r2, r3
  401786:	d301      	bcc.n	40178c <xQueueGenericSendFromISR+0x40>
  401788:	2f02      	cmp	r7, #2
  40178a:	d158      	bne.n	40183e <xQueueGenericSendFromISR+0xf2>
			const int8_t cTxLock = pxQueue->cTxLock;
  40178c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
  401790:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401792:	463a      	mov	r2, r7
  401794:	4649      	mov	r1, r9
  401796:	4620      	mov	r0, r4
  401798:	4b2e      	ldr	r3, [pc, #184]	; (401854 <xQueueGenericSendFromISR+0x108>)
  40179a:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
  40179c:	f1b5 3fff 	cmp.w	r5, #4294967295
  4017a0:	d147      	bne.n	401832 <xQueueGenericSendFromISR+0xe6>
					if( pxQueue->pxQueueSetContainer != NULL )
  4017a2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4017a4:	2b00      	cmp	r3, #0
  4017a6:	d036      	beq.n	401816 <xQueueGenericSendFromISR+0xca>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
  4017a8:	4639      	mov	r1, r7
  4017aa:	4620      	mov	r0, r4
  4017ac:	4b2a      	ldr	r3, [pc, #168]	; (401858 <xQueueGenericSendFromISR+0x10c>)
  4017ae:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  4017b0:	f1b8 0f00 	cmp.w	r8, #0
  4017b4:	d045      	beq.n	401842 <xQueueGenericSendFromISR+0xf6>
  4017b6:	2800      	cmp	r0, #0
  4017b8:	d043      	beq.n	401842 <xQueueGenericSendFromISR+0xf6>
								*pxHigherPriorityTaskWoken = pdTRUE;
  4017ba:	2001      	movs	r0, #1
  4017bc:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
  4017c0:	f386 8811 	msr	BASEPRI, r6
}
  4017c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
  4017c8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017cc:	b672      	cpsid	i
  4017ce:	f383 8811 	msr	BASEPRI, r3
  4017d2:	f3bf 8f6f 	isb	sy
  4017d6:	f3bf 8f4f 	dsb	sy
  4017da:	b662      	cpsie	i
  4017dc:	e7fe      	b.n	4017dc <xQueueGenericSendFromISR+0x90>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4017de:	6c00      	ldr	r0, [r0, #64]	; 0x40
  4017e0:	2800      	cmp	r0, #0
  4017e2:	d0ba      	beq.n	40175a <xQueueGenericSendFromISR+0xe>
  4017e4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017e8:	b672      	cpsid	i
  4017ea:	f383 8811 	msr	BASEPRI, r3
  4017ee:	f3bf 8f6f 	isb	sy
  4017f2:	f3bf 8f4f 	dsb	sy
  4017f6:	b662      	cpsie	i
  4017f8:	e7fe      	b.n	4017f8 <xQueueGenericSendFromISR+0xac>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4017fa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  4017fc:	2801      	cmp	r0, #1
  4017fe:	d0ae      	beq.n	40175e <xQueueGenericSendFromISR+0x12>
  401800:	f04f 0380 	mov.w	r3, #128	; 0x80
  401804:	b672      	cpsid	i
  401806:	f383 8811 	msr	BASEPRI, r3
  40180a:	f3bf 8f6f 	isb	sy
  40180e:	f3bf 8f4f 	dsb	sy
  401812:	b662      	cpsie	i
  401814:	e7fe      	b.n	401814 <xQueueGenericSendFromISR+0xc8>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401816:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401818:	b1ab      	cbz	r3, 401846 <xQueueGenericSendFromISR+0xfa>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40181a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40181e:	4b0f      	ldr	r3, [pc, #60]	; (40185c <xQueueGenericSendFromISR+0x110>)
  401820:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  401822:	f1b8 0f00 	cmp.w	r8, #0
  401826:	d010      	beq.n	40184a <xQueueGenericSendFromISR+0xfe>
  401828:	b178      	cbz	r0, 40184a <xQueueGenericSendFromISR+0xfe>
									*pxHigherPriorityTaskWoken = pdTRUE;
  40182a:	2001      	movs	r0, #1
  40182c:	f8c8 0000 	str.w	r0, [r8]
  401830:	e7c6      	b.n	4017c0 <xQueueGenericSendFromISR+0x74>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
  401832:	1c6b      	adds	r3, r5, #1
  401834:	b25b      	sxtb	r3, r3
  401836:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
  40183a:	2001      	movs	r0, #1
  40183c:	e7c0      	b.n	4017c0 <xQueueGenericSendFromISR+0x74>
			xReturn = errQUEUE_FULL;
  40183e:	2000      	movs	r0, #0
  401840:	e7be      	b.n	4017c0 <xQueueGenericSendFromISR+0x74>
			xReturn = pdPASS;
  401842:	2001      	movs	r0, #1
  401844:	e7bc      	b.n	4017c0 <xQueueGenericSendFromISR+0x74>
  401846:	2001      	movs	r0, #1
  401848:	e7ba      	b.n	4017c0 <xQueueGenericSendFromISR+0x74>
  40184a:	2001      	movs	r0, #1
  40184c:	e7b8      	b.n	4017c0 <xQueueGenericSendFromISR+0x74>
  40184e:	bf00      	nop
  401850:	004011bd 	.word	0x004011bd
  401854:	00401295 	.word	0x00401295
  401858:	00401311 	.word	0x00401311
  40185c:	00402495 	.word	0x00402495

00401860 <xQueueReceive>:
{
  401860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401864:	b084      	sub	sp, #16
  401866:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
  401868:	b190      	cbz	r0, 401890 <xQueueReceive+0x30>
  40186a:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40186c:	b1d9      	cbz	r1, 4018a6 <xQueueReceive+0x46>
  40186e:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401870:	4b54      	ldr	r3, [pc, #336]	; (4019c4 <xQueueReceive+0x164>)
  401872:	4798      	blx	r3
  401874:	bb28      	cbnz	r0, 4018c2 <xQueueReceive+0x62>
  401876:	9b01      	ldr	r3, [sp, #4]
  401878:	b35b      	cbz	r3, 4018d2 <xQueueReceive+0x72>
  40187a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40187e:	b672      	cpsid	i
  401880:	f383 8811 	msr	BASEPRI, r3
  401884:	f3bf 8f6f 	isb	sy
  401888:	f3bf 8f4f 	dsb	sy
  40188c:	b662      	cpsie	i
  40188e:	e7fe      	b.n	40188e <xQueueReceive+0x2e>
  401890:	f04f 0380 	mov.w	r3, #128	; 0x80
  401894:	b672      	cpsid	i
  401896:	f383 8811 	msr	BASEPRI, r3
  40189a:	f3bf 8f6f 	isb	sy
  40189e:	f3bf 8f4f 	dsb	sy
  4018a2:	b662      	cpsie	i
  4018a4:	e7fe      	b.n	4018a4 <xQueueReceive+0x44>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4018a6:	6c03      	ldr	r3, [r0, #64]	; 0x40
  4018a8:	2b00      	cmp	r3, #0
  4018aa:	d0e0      	beq.n	40186e <xQueueReceive+0xe>
  4018ac:	f04f 0380 	mov.w	r3, #128	; 0x80
  4018b0:	b672      	cpsid	i
  4018b2:	f383 8811 	msr	BASEPRI, r3
  4018b6:	f3bf 8f6f 	isb	sy
  4018ba:	f3bf 8f4f 	dsb	sy
  4018be:	b662      	cpsie	i
  4018c0:	e7fe      	b.n	4018c0 <xQueueReceive+0x60>
  4018c2:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  4018c4:	f8df 8128 	ldr.w	r8, [pc, #296]	; 4019f0 <xQueueReceive+0x190>
					vTaskInternalSetTimeOutState( &xTimeOut );
  4018c8:	f8df a128 	ldr.w	sl, [pc, #296]	; 4019f4 <xQueueReceive+0x194>
					portYIELD_WITHIN_API();
  4018cc:	f8df 9100 	ldr.w	r9, [pc, #256]	; 4019d0 <xQueueReceive+0x170>
  4018d0:	e031      	b.n	401936 <xQueueReceive+0xd6>
  4018d2:	2700      	movs	r7, #0
  4018d4:	e7f6      	b.n	4018c4 <xQueueReceive+0x64>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  4018d6:	4631      	mov	r1, r6
  4018d8:	4620      	mov	r0, r4
  4018da:	4b3b      	ldr	r3, [pc, #236]	; (4019c8 <xQueueReceive+0x168>)
  4018dc:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
  4018de:	3d01      	subs	r5, #1
  4018e0:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4018e2:	6923      	ldr	r3, [r4, #16]
  4018e4:	b163      	cbz	r3, 401900 <xQueueReceive+0xa0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4018e6:	f104 0010 	add.w	r0, r4, #16
  4018ea:	4b38      	ldr	r3, [pc, #224]	; (4019cc <xQueueReceive+0x16c>)
  4018ec:	4798      	blx	r3
  4018ee:	b138      	cbz	r0, 401900 <xQueueReceive+0xa0>
						queueYIELD_IF_USING_PREEMPTION();
  4018f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4018f4:	4b36      	ldr	r3, [pc, #216]	; (4019d0 <xQueueReceive+0x170>)
  4018f6:	601a      	str	r2, [r3, #0]
  4018f8:	f3bf 8f4f 	dsb	sy
  4018fc:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401900:	4b34      	ldr	r3, [pc, #208]	; (4019d4 <xQueueReceive+0x174>)
  401902:	4798      	blx	r3
				return pdPASS;
  401904:	2001      	movs	r0, #1
}
  401906:	b004      	add	sp, #16
  401908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
  40190c:	4b31      	ldr	r3, [pc, #196]	; (4019d4 <xQueueReceive+0x174>)
  40190e:	4798      	blx	r3
					return errQUEUE_EMPTY;
  401910:	2000      	movs	r0, #0
  401912:	e7f8      	b.n	401906 <xQueueReceive+0xa6>
					vTaskInternalSetTimeOutState( &xTimeOut );
  401914:	a802      	add	r0, sp, #8
  401916:	47d0      	blx	sl
  401918:	e016      	b.n	401948 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
  40191a:	2300      	movs	r3, #0
  40191c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  401920:	e01d      	b.n	40195e <xQueueReceive+0xfe>
  401922:	2300      	movs	r3, #0
  401924:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  401928:	e01f      	b.n	40196a <xQueueReceive+0x10a>
				prvUnlockQueue( pxQueue );
  40192a:	4620      	mov	r0, r4
  40192c:	4b2a      	ldr	r3, [pc, #168]	; (4019d8 <xQueueReceive+0x178>)
  40192e:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401930:	4b2a      	ldr	r3, [pc, #168]	; (4019dc <xQueueReceive+0x17c>)
  401932:	4798      	blx	r3
  401934:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  401936:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  401938:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  40193a:	2d00      	cmp	r5, #0
  40193c:	d1cb      	bne.n	4018d6 <xQueueReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  40193e:	9b01      	ldr	r3, [sp, #4]
  401940:	2b00      	cmp	r3, #0
  401942:	d0e3      	beq.n	40190c <xQueueReceive+0xac>
				else if( xEntryTimeSet == pdFALSE )
  401944:	2f00      	cmp	r7, #0
  401946:	d0e5      	beq.n	401914 <xQueueReceive+0xb4>
		taskEXIT_CRITICAL();
  401948:	4b22      	ldr	r3, [pc, #136]	; (4019d4 <xQueueReceive+0x174>)
  40194a:	4798      	blx	r3
		vTaskSuspendAll();
  40194c:	4b24      	ldr	r3, [pc, #144]	; (4019e0 <xQueueReceive+0x180>)
  40194e:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401950:	47c0      	blx	r8
  401952:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  401956:	b25b      	sxtb	r3, r3
  401958:	f1b3 3fff 	cmp.w	r3, #4294967295
  40195c:	d0dd      	beq.n	40191a <xQueueReceive+0xba>
  40195e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  401962:	b25b      	sxtb	r3, r3
  401964:	f1b3 3fff 	cmp.w	r3, #4294967295
  401968:	d0db      	beq.n	401922 <xQueueReceive+0xc2>
  40196a:	4b1a      	ldr	r3, [pc, #104]	; (4019d4 <xQueueReceive+0x174>)
  40196c:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  40196e:	a901      	add	r1, sp, #4
  401970:	a802      	add	r0, sp, #8
  401972:	4b1c      	ldr	r3, [pc, #112]	; (4019e4 <xQueueReceive+0x184>)
  401974:	4798      	blx	r3
  401976:	b9c8      	cbnz	r0, 4019ac <xQueueReceive+0x14c>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401978:	4620      	mov	r0, r4
  40197a:	4b1b      	ldr	r3, [pc, #108]	; (4019e8 <xQueueReceive+0x188>)
  40197c:	4798      	blx	r3
  40197e:	2800      	cmp	r0, #0
  401980:	d0d3      	beq.n	40192a <xQueueReceive+0xca>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  401982:	9901      	ldr	r1, [sp, #4]
  401984:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401988:	4b18      	ldr	r3, [pc, #96]	; (4019ec <xQueueReceive+0x18c>)
  40198a:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  40198c:	4620      	mov	r0, r4
  40198e:	4b12      	ldr	r3, [pc, #72]	; (4019d8 <xQueueReceive+0x178>)
  401990:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401992:	4b12      	ldr	r3, [pc, #72]	; (4019dc <xQueueReceive+0x17c>)
  401994:	4798      	blx	r3
  401996:	2800      	cmp	r0, #0
  401998:	d1cc      	bne.n	401934 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
  40199a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40199e:	f8c9 3000 	str.w	r3, [r9]
  4019a2:	f3bf 8f4f 	dsb	sy
  4019a6:	f3bf 8f6f 	isb	sy
  4019aa:	e7c3      	b.n	401934 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
  4019ac:	4620      	mov	r0, r4
  4019ae:	4b0a      	ldr	r3, [pc, #40]	; (4019d8 <xQueueReceive+0x178>)
  4019b0:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4019b2:	4b0a      	ldr	r3, [pc, #40]	; (4019dc <xQueueReceive+0x17c>)
  4019b4:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  4019b6:	4620      	mov	r0, r4
  4019b8:	4b0b      	ldr	r3, [pc, #44]	; (4019e8 <xQueueReceive+0x188>)
  4019ba:	4798      	blx	r3
  4019bc:	2800      	cmp	r0, #0
  4019be:	d0b9      	beq.n	401934 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
  4019c0:	2000      	movs	r0, #0
  4019c2:	e7a0      	b.n	401906 <xQueueReceive+0xa6>
  4019c4:	004025e5 	.word	0x004025e5
  4019c8:	0040139d 	.word	0x0040139d
  4019cc:	00402495 	.word	0x00402495
  4019d0:	e000ed04 	.word	0xe000ed04
  4019d4:	00400fe1 	.word	0x00400fe1
  4019d8:	004013c5 	.word	0x004013c5
  4019dc:	004021cd 	.word	0x004021cd
  4019e0:	00402069 	.word	0x00402069
  4019e4:	00402545 	.word	0x00402545
  4019e8:	00401275 	.word	0x00401275
  4019ec:	00402411 	.word	0x00402411
  4019f0:	00400f95 	.word	0x00400f95
  4019f4:	0040252d 	.word	0x0040252d

004019f8 <xQueueSemaphoreTake>:
{
  4019f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4019fc:	b085      	sub	sp, #20
  4019fe:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
  401a00:	b168      	cbz	r0, 401a1e <xQueueSemaphoreTake+0x26>
  401a02:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
  401a04:	6c03      	ldr	r3, [r0, #64]	; 0x40
  401a06:	b1ab      	cbz	r3, 401a34 <xQueueSemaphoreTake+0x3c>
  401a08:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a0c:	b672      	cpsid	i
  401a0e:	f383 8811 	msr	BASEPRI, r3
  401a12:	f3bf 8f6f 	isb	sy
  401a16:	f3bf 8f4f 	dsb	sy
  401a1a:	b662      	cpsie	i
  401a1c:	e7fe      	b.n	401a1c <xQueueSemaphoreTake+0x24>
  401a1e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a22:	b672      	cpsid	i
  401a24:	f383 8811 	msr	BASEPRI, r3
  401a28:	f3bf 8f6f 	isb	sy
  401a2c:	f3bf 8f4f 	dsb	sy
  401a30:	b662      	cpsie	i
  401a32:	e7fe      	b.n	401a32 <xQueueSemaphoreTake+0x3a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401a34:	4b5e      	ldr	r3, [pc, #376]	; (401bb0 <xQueueSemaphoreTake+0x1b8>)
  401a36:	4798      	blx	r3
  401a38:	b960      	cbnz	r0, 401a54 <xQueueSemaphoreTake+0x5c>
  401a3a:	9b01      	ldr	r3, [sp, #4]
  401a3c:	b193      	cbz	r3, 401a64 <xQueueSemaphoreTake+0x6c>
  401a3e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a42:	b672      	cpsid	i
  401a44:	f383 8811 	msr	BASEPRI, r3
  401a48:	f3bf 8f6f 	isb	sy
  401a4c:	f3bf 8f4f 	dsb	sy
  401a50:	b662      	cpsie	i
  401a52:	e7fe      	b.n	401a52 <xQueueSemaphoreTake+0x5a>
  401a54:	2500      	movs	r5, #0
  401a56:	462f      	mov	r7, r5
		taskENTER_CRITICAL();
  401a58:	4e56      	ldr	r6, [pc, #344]	; (401bb4 <xQueueSemaphoreTake+0x1bc>)
					vTaskInternalSetTimeOutState( &xTimeOut );
  401a5a:	f8df 918c 	ldr.w	r9, [pc, #396]	; 401be8 <xQueueSemaphoreTake+0x1f0>
					portYIELD_WITHIN_API();
  401a5e:	f8df 8160 	ldr.w	r8, [pc, #352]	; 401bc0 <xQueueSemaphoreTake+0x1c8>
  401a62:	e052      	b.n	401b0a <xQueueSemaphoreTake+0x112>
  401a64:	2500      	movs	r5, #0
  401a66:	462f      	mov	r7, r5
  401a68:	e7f6      	b.n	401a58 <xQueueSemaphoreTake+0x60>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
  401a6a:	3b01      	subs	r3, #1
  401a6c:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401a6e:	6823      	ldr	r3, [r4, #0]
  401a70:	b913      	cbnz	r3, 401a78 <xQueueSemaphoreTake+0x80>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  401a72:	4b51      	ldr	r3, [pc, #324]	; (401bb8 <xQueueSemaphoreTake+0x1c0>)
  401a74:	4798      	blx	r3
  401a76:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401a78:	6923      	ldr	r3, [r4, #16]
  401a7a:	b163      	cbz	r3, 401a96 <xQueueSemaphoreTake+0x9e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401a7c:	f104 0010 	add.w	r0, r4, #16
  401a80:	4b4e      	ldr	r3, [pc, #312]	; (401bbc <xQueueSemaphoreTake+0x1c4>)
  401a82:	4798      	blx	r3
  401a84:	b138      	cbz	r0, 401a96 <xQueueSemaphoreTake+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
  401a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401a8a:	4b4d      	ldr	r3, [pc, #308]	; (401bc0 <xQueueSemaphoreTake+0x1c8>)
  401a8c:	601a      	str	r2, [r3, #0]
  401a8e:	f3bf 8f4f 	dsb	sy
  401a92:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401a96:	4b4b      	ldr	r3, [pc, #300]	; (401bc4 <xQueueSemaphoreTake+0x1cc>)
  401a98:	4798      	blx	r3
				return pdPASS;
  401a9a:	2501      	movs	r5, #1
}
  401a9c:	4628      	mov	r0, r5
  401a9e:	b005      	add	sp, #20
  401aa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
  401aa4:	b155      	cbz	r5, 401abc <xQueueSemaphoreTake+0xc4>
  401aa6:	f04f 0380 	mov.w	r3, #128	; 0x80
  401aaa:	b672      	cpsid	i
  401aac:	f383 8811 	msr	BASEPRI, r3
  401ab0:	f3bf 8f6f 	isb	sy
  401ab4:	f3bf 8f4f 	dsb	sy
  401ab8:	b662      	cpsie	i
  401aba:	e7fe      	b.n	401aba <xQueueSemaphoreTake+0xc2>
					taskEXIT_CRITICAL();
  401abc:	4b41      	ldr	r3, [pc, #260]	; (401bc4 <xQueueSemaphoreTake+0x1cc>)
  401abe:	4798      	blx	r3
					return errQUEUE_EMPTY;
  401ac0:	e7ec      	b.n	401a9c <xQueueSemaphoreTake+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
  401ac2:	a802      	add	r0, sp, #8
  401ac4:	47c8      	blx	r9
  401ac6:	e029      	b.n	401b1c <xQueueSemaphoreTake+0x124>
		prvLockQueue( pxQueue );
  401ac8:	2300      	movs	r3, #0
  401aca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  401ace:	e030      	b.n	401b32 <xQueueSemaphoreTake+0x13a>
  401ad0:	2300      	movs	r3, #0
  401ad2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  401ad6:	e032      	b.n	401b3e <xQueueSemaphoreTake+0x146>
						taskENTER_CRITICAL();
  401ad8:	47b0      	blx	r6
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  401ada:	6860      	ldr	r0, [r4, #4]
  401adc:	4b3a      	ldr	r3, [pc, #232]	; (401bc8 <xQueueSemaphoreTake+0x1d0>)
  401ade:	4798      	blx	r3
  401ae0:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
  401ae2:	4b38      	ldr	r3, [pc, #224]	; (401bc4 <xQueueSemaphoreTake+0x1cc>)
  401ae4:	4798      	blx	r3
  401ae6:	e03a      	b.n	401b5e <xQueueSemaphoreTake+0x166>
				prvUnlockQueue( pxQueue );
  401ae8:	4620      	mov	r0, r4
  401aea:	4b38      	ldr	r3, [pc, #224]	; (401bcc <xQueueSemaphoreTake+0x1d4>)
  401aec:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401aee:	4b38      	ldr	r3, [pc, #224]	; (401bd0 <xQueueSemaphoreTake+0x1d8>)
  401af0:	4798      	blx	r3
  401af2:	e009      	b.n	401b08 <xQueueSemaphoreTake+0x110>
			prvUnlockQueue( pxQueue );
  401af4:	4620      	mov	r0, r4
  401af6:	4b35      	ldr	r3, [pc, #212]	; (401bcc <xQueueSemaphoreTake+0x1d4>)
  401af8:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401afa:	4b35      	ldr	r3, [pc, #212]	; (401bd0 <xQueueSemaphoreTake+0x1d8>)
  401afc:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401afe:	4620      	mov	r0, r4
  401b00:	4b34      	ldr	r3, [pc, #208]	; (401bd4 <xQueueSemaphoreTake+0x1dc>)
  401b02:	4798      	blx	r3
  401b04:	2800      	cmp	r0, #0
  401b06:	d13f      	bne.n	401b88 <xQueueSemaphoreTake+0x190>
  401b08:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  401b0a:	47b0      	blx	r6
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
  401b0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
  401b0e:	2b00      	cmp	r3, #0
  401b10:	d1ab      	bne.n	401a6a <xQueueSemaphoreTake+0x72>
				if( xTicksToWait == ( TickType_t ) 0 )
  401b12:	9b01      	ldr	r3, [sp, #4]
  401b14:	2b00      	cmp	r3, #0
  401b16:	d0c5      	beq.n	401aa4 <xQueueSemaphoreTake+0xac>
				else if( xEntryTimeSet == pdFALSE )
  401b18:	2f00      	cmp	r7, #0
  401b1a:	d0d2      	beq.n	401ac2 <xQueueSemaphoreTake+0xca>
		taskEXIT_CRITICAL();
  401b1c:	4b29      	ldr	r3, [pc, #164]	; (401bc4 <xQueueSemaphoreTake+0x1cc>)
  401b1e:	4798      	blx	r3
		vTaskSuspendAll();
  401b20:	4b2d      	ldr	r3, [pc, #180]	; (401bd8 <xQueueSemaphoreTake+0x1e0>)
  401b22:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401b24:	47b0      	blx	r6
  401b26:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  401b2a:	b25b      	sxtb	r3, r3
  401b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
  401b30:	d0ca      	beq.n	401ac8 <xQueueSemaphoreTake+0xd0>
  401b32:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  401b36:	b25b      	sxtb	r3, r3
  401b38:	f1b3 3fff 	cmp.w	r3, #4294967295
  401b3c:	d0c8      	beq.n	401ad0 <xQueueSemaphoreTake+0xd8>
  401b3e:	4b21      	ldr	r3, [pc, #132]	; (401bc4 <xQueueSemaphoreTake+0x1cc>)
  401b40:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401b42:	a901      	add	r1, sp, #4
  401b44:	a802      	add	r0, sp, #8
  401b46:	4b25      	ldr	r3, [pc, #148]	; (401bdc <xQueueSemaphoreTake+0x1e4>)
  401b48:	4798      	blx	r3
  401b4a:	2800      	cmp	r0, #0
  401b4c:	d1d2      	bne.n	401af4 <xQueueSemaphoreTake+0xfc>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401b4e:	4620      	mov	r0, r4
  401b50:	4b20      	ldr	r3, [pc, #128]	; (401bd4 <xQueueSemaphoreTake+0x1dc>)
  401b52:	4798      	blx	r3
  401b54:	2800      	cmp	r0, #0
  401b56:	d0c7      	beq.n	401ae8 <xQueueSemaphoreTake+0xf0>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401b58:	6823      	ldr	r3, [r4, #0]
  401b5a:	2b00      	cmp	r3, #0
  401b5c:	d0bc      	beq.n	401ad8 <xQueueSemaphoreTake+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  401b5e:	9901      	ldr	r1, [sp, #4]
  401b60:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401b64:	4b1e      	ldr	r3, [pc, #120]	; (401be0 <xQueueSemaphoreTake+0x1e8>)
  401b66:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401b68:	4620      	mov	r0, r4
  401b6a:	4b18      	ldr	r3, [pc, #96]	; (401bcc <xQueueSemaphoreTake+0x1d4>)
  401b6c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401b6e:	4b18      	ldr	r3, [pc, #96]	; (401bd0 <xQueueSemaphoreTake+0x1d8>)
  401b70:	4798      	blx	r3
  401b72:	2800      	cmp	r0, #0
  401b74:	d1c8      	bne.n	401b08 <xQueueSemaphoreTake+0x110>
					portYIELD_WITHIN_API();
  401b76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401b7a:	f8c8 3000 	str.w	r3, [r8]
  401b7e:	f3bf 8f4f 	dsb	sy
  401b82:	f3bf 8f6f 	isb	sy
  401b86:	e7bf      	b.n	401b08 <xQueueSemaphoreTake+0x110>
					if( xInheritanceOccurred != pdFALSE )
  401b88:	2d00      	cmp	r5, #0
  401b8a:	d087      	beq.n	401a9c <xQueueSemaphoreTake+0xa4>
						taskENTER_CRITICAL();
  401b8c:	4b09      	ldr	r3, [pc, #36]	; (401bb4 <xQueueSemaphoreTake+0x1bc>)
  401b8e:	4798      	blx	r3
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
  401b90:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401b92:	b153      	cbz	r3, 401baa <xQueueSemaphoreTake+0x1b2>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
  401b94:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401b96:	6819      	ldr	r1, [r3, #0]
  401b98:	f1c1 0105 	rsb	r1, r1, #5
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
  401b9c:	6860      	ldr	r0, [r4, #4]
  401b9e:	4b11      	ldr	r3, [pc, #68]	; (401be4 <xQueueSemaphoreTake+0x1ec>)
  401ba0:	4798      	blx	r3
						taskEXIT_CRITICAL();
  401ba2:	4b08      	ldr	r3, [pc, #32]	; (401bc4 <xQueueSemaphoreTake+0x1cc>)
  401ba4:	4798      	blx	r3
				return errQUEUE_EMPTY;
  401ba6:	2500      	movs	r5, #0
  401ba8:	e778      	b.n	401a9c <xQueueSemaphoreTake+0xa4>
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
  401baa:	2100      	movs	r1, #0
  401bac:	e7f6      	b.n	401b9c <xQueueSemaphoreTake+0x1a4>
  401bae:	bf00      	nop
  401bb0:	004025e5 	.word	0x004025e5
  401bb4:	00400f95 	.word	0x00400f95
  401bb8:	0040284d 	.word	0x0040284d
  401bbc:	00402495 	.word	0x00402495
  401bc0:	e000ed04 	.word	0xe000ed04
  401bc4:	00400fe1 	.word	0x00400fe1
  401bc8:	00402605 	.word	0x00402605
  401bcc:	004013c5 	.word	0x004013c5
  401bd0:	004021cd 	.word	0x004021cd
  401bd4:	00401275 	.word	0x00401275
  401bd8:	00402069 	.word	0x00402069
  401bdc:	00402545 	.word	0x00402545
  401be0:	00402411 	.word	0x00402411
  401be4:	00402781 	.word	0x00402781
  401be8:	0040252d 	.word	0x0040252d

00401bec <vQueueAddToRegistry>:
	{
  401bec:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  401bee:	4b0b      	ldr	r3, [pc, #44]	; (401c1c <vQueueAddToRegistry+0x30>)
  401bf0:	681b      	ldr	r3, [r3, #0]
  401bf2:	b153      	cbz	r3, 401c0a <vQueueAddToRegistry+0x1e>
  401bf4:	2301      	movs	r3, #1
  401bf6:	4c09      	ldr	r4, [pc, #36]	; (401c1c <vQueueAddToRegistry+0x30>)
  401bf8:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  401bfc:	b132      	cbz	r2, 401c0c <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401bfe:	3301      	adds	r3, #1
  401c00:	2b08      	cmp	r3, #8
  401c02:	d1f9      	bne.n	401bf8 <vQueueAddToRegistry+0xc>
	}
  401c04:	f85d 4b04 	ldr.w	r4, [sp], #4
  401c08:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401c0a:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  401c0c:	4a03      	ldr	r2, [pc, #12]	; (401c1c <vQueueAddToRegistry+0x30>)
  401c0e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  401c12:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  401c16:	6058      	str	r0, [r3, #4]
				break;
  401c18:	e7f4      	b.n	401c04 <vQueueAddToRegistry+0x18>
  401c1a:	bf00      	nop
  401c1c:	20400bdc 	.word	0x20400bdc

00401c20 <vQueueWaitForMessageRestricted>:
	{
  401c20:	b570      	push	{r4, r5, r6, lr}
  401c22:	4604      	mov	r4, r0
  401c24:	460d      	mov	r5, r1
  401c26:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  401c28:	4b12      	ldr	r3, [pc, #72]	; (401c74 <vQueueWaitForMessageRestricted+0x54>)
  401c2a:	4798      	blx	r3
  401c2c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  401c30:	b25b      	sxtb	r3, r3
  401c32:	f1b3 3fff 	cmp.w	r3, #4294967295
  401c36:	d00d      	beq.n	401c54 <vQueueWaitForMessageRestricted+0x34>
  401c38:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  401c3c:	b25b      	sxtb	r3, r3
  401c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401c42:	d00b      	beq.n	401c5c <vQueueWaitForMessageRestricted+0x3c>
  401c44:	4b0c      	ldr	r3, [pc, #48]	; (401c78 <vQueueWaitForMessageRestricted+0x58>)
  401c46:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  401c48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401c4a:	b15b      	cbz	r3, 401c64 <vQueueWaitForMessageRestricted+0x44>
		prvUnlockQueue( pxQueue );
  401c4c:	4620      	mov	r0, r4
  401c4e:	4b0b      	ldr	r3, [pc, #44]	; (401c7c <vQueueWaitForMessageRestricted+0x5c>)
  401c50:	4798      	blx	r3
  401c52:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  401c54:	2300      	movs	r3, #0
  401c56:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  401c5a:	e7ed      	b.n	401c38 <vQueueWaitForMessageRestricted+0x18>
  401c5c:	2300      	movs	r3, #0
  401c5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  401c62:	e7ef      	b.n	401c44 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  401c64:	4632      	mov	r2, r6
  401c66:	4629      	mov	r1, r5
  401c68:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401c6c:	4b04      	ldr	r3, [pc, #16]	; (401c80 <vQueueWaitForMessageRestricted+0x60>)
  401c6e:	4798      	blx	r3
  401c70:	e7ec      	b.n	401c4c <vQueueWaitForMessageRestricted+0x2c>
  401c72:	bf00      	nop
  401c74:	00400f95 	.word	0x00400f95
  401c78:	00400fe1 	.word	0x00400fe1
  401c7c:	004013c5 	.word	0x004013c5
  401c80:	0040244d 	.word	0x0040244d

00401c84 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401c84:	4b08      	ldr	r3, [pc, #32]	; (401ca8 <prvResetNextTaskUnblockTime+0x24>)
  401c86:	681b      	ldr	r3, [r3, #0]
  401c88:	681b      	ldr	r3, [r3, #0]
  401c8a:	b13b      	cbz	r3, 401c9c <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401c8c:	4b06      	ldr	r3, [pc, #24]	; (401ca8 <prvResetNextTaskUnblockTime+0x24>)
  401c8e:	681b      	ldr	r3, [r3, #0]
  401c90:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
  401c92:	68db      	ldr	r3, [r3, #12]
  401c94:	685a      	ldr	r2, [r3, #4]
  401c96:	4b05      	ldr	r3, [pc, #20]	; (401cac <prvResetNextTaskUnblockTime+0x28>)
  401c98:	601a      	str	r2, [r3, #0]
  401c9a:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  401c9c:	f04f 32ff 	mov.w	r2, #4294967295
  401ca0:	4b02      	ldr	r3, [pc, #8]	; (401cac <prvResetNextTaskUnblockTime+0x28>)
  401ca2:	601a      	str	r2, [r3, #0]
  401ca4:	4770      	bx	lr
  401ca6:	bf00      	nop
  401ca8:	20400a60 	.word	0x20400a60
  401cac:	20400b10 	.word	0x20400b10

00401cb0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
  401cb0:	b570      	push	{r4, r5, r6, lr}
  401cb2:	4604      	mov	r4, r0
  401cb4:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
  401cb6:	4b1c      	ldr	r3, [pc, #112]	; (401d28 <prvAddCurrentTaskToDelayedList+0x78>)
  401cb8:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  401cba:	4b1c      	ldr	r3, [pc, #112]	; (401d2c <prvAddCurrentTaskToDelayedList+0x7c>)
  401cbc:	6818      	ldr	r0, [r3, #0]
  401cbe:	3004      	adds	r0, #4
  401cc0:	4b1b      	ldr	r3, [pc, #108]	; (401d30 <prvAddCurrentTaskToDelayedList+0x80>)
  401cc2:	4798      	blx	r3
  401cc4:	b948      	cbnz	r0, 401cda <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401cc6:	4b19      	ldr	r3, [pc, #100]	; (401d2c <prvAddCurrentTaskToDelayedList+0x7c>)
  401cc8:	681a      	ldr	r2, [r3, #0]
  401cca:	491a      	ldr	r1, [pc, #104]	; (401d34 <prvAddCurrentTaskToDelayedList+0x84>)
  401ccc:	680b      	ldr	r3, [r1, #0]
  401cce:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401cd0:	2201      	movs	r2, #1
  401cd2:	4082      	lsls	r2, r0
  401cd4:	ea23 0302 	bic.w	r3, r3, r2
  401cd8:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
  401cda:	f1b4 3fff 	cmp.w	r4, #4294967295
  401cde:	d100      	bne.n	401ce2 <prvAddCurrentTaskToDelayedList+0x32>
  401ce0:	b99e      	cbnz	r6, 401d0a <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
  401ce2:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
  401ce4:	4b11      	ldr	r3, [pc, #68]	; (401d2c <prvAddCurrentTaskToDelayedList+0x7c>)
  401ce6:	681b      	ldr	r3, [r3, #0]
  401ce8:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
  401cea:	42a5      	cmp	r5, r4
  401cec:	d814      	bhi.n	401d18 <prvAddCurrentTaskToDelayedList+0x68>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  401cee:	4b12      	ldr	r3, [pc, #72]	; (401d38 <prvAddCurrentTaskToDelayedList+0x88>)
  401cf0:	6818      	ldr	r0, [r3, #0]
  401cf2:	4b0e      	ldr	r3, [pc, #56]	; (401d2c <prvAddCurrentTaskToDelayedList+0x7c>)
  401cf4:	6819      	ldr	r1, [r3, #0]
  401cf6:	3104      	adds	r1, #4
  401cf8:	4b10      	ldr	r3, [pc, #64]	; (401d3c <prvAddCurrentTaskToDelayedList+0x8c>)
  401cfa:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
  401cfc:	4b10      	ldr	r3, [pc, #64]	; (401d40 <prvAddCurrentTaskToDelayedList+0x90>)
  401cfe:	681b      	ldr	r3, [r3, #0]
  401d00:	429c      	cmp	r4, r3
  401d02:	d201      	bcs.n	401d08 <prvAddCurrentTaskToDelayedList+0x58>
				{
					xNextTaskUnblockTime = xTimeToWake;
  401d04:	4b0e      	ldr	r3, [pc, #56]	; (401d40 <prvAddCurrentTaskToDelayedList+0x90>)
  401d06:	601c      	str	r4, [r3, #0]
  401d08:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
  401d0a:	4b08      	ldr	r3, [pc, #32]	; (401d2c <prvAddCurrentTaskToDelayedList+0x7c>)
  401d0c:	6819      	ldr	r1, [r3, #0]
  401d0e:	3104      	adds	r1, #4
  401d10:	480c      	ldr	r0, [pc, #48]	; (401d44 <prvAddCurrentTaskToDelayedList+0x94>)
  401d12:	4b0d      	ldr	r3, [pc, #52]	; (401d48 <prvAddCurrentTaskToDelayedList+0x98>)
  401d14:	4798      	blx	r3
  401d16:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  401d18:	4b0c      	ldr	r3, [pc, #48]	; (401d4c <prvAddCurrentTaskToDelayedList+0x9c>)
  401d1a:	6818      	ldr	r0, [r3, #0]
  401d1c:	4b03      	ldr	r3, [pc, #12]	; (401d2c <prvAddCurrentTaskToDelayedList+0x7c>)
  401d1e:	6819      	ldr	r1, [r3, #0]
  401d20:	3104      	adds	r1, #4
  401d22:	4b06      	ldr	r3, [pc, #24]	; (401d3c <prvAddCurrentTaskToDelayedList+0x8c>)
  401d24:	4798      	blx	r3
  401d26:	bd70      	pop	{r4, r5, r6, pc}
  401d28:	20400b58 	.word	0x20400b58
  401d2c:	20400a5c 	.word	0x20400a5c
  401d30:	00400e99 	.word	0x00400e99
  401d34:	20400ae0 	.word	0x20400ae0
  401d38:	20400a60 	.word	0x20400a60
  401d3c:	00400e65 	.word	0x00400e65
  401d40:	20400b10 	.word	0x20400b10
  401d44:	20400b30 	.word	0x20400b30
  401d48:	00400e4d 	.word	0x00400e4d
  401d4c:	20400a64 	.word	0x20400a64

00401d50 <prvIdleTask>:
{
  401d50:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  401d52:	4d18      	ldr	r5, [pc, #96]	; (401db4 <prvIdleTask+0x64>)
			taskENTER_CRITICAL();
  401d54:	f8df 8078 	ldr.w	r8, [pc, #120]	; 401dd0 <prvIdleTask+0x80>
				taskYIELD();
  401d58:	f8df 9078 	ldr.w	r9, [pc, #120]	; 401dd4 <prvIdleTask+0x84>
  401d5c:	e001      	b.n	401d62 <prvIdleTask+0x12>
			vApplicationIdleHook();
  401d5e:	4b16      	ldr	r3, [pc, #88]	; (401db8 <prvIdleTask+0x68>)
  401d60:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  401d62:	682b      	ldr	r3, [r5, #0]
  401d64:	b1c3      	cbz	r3, 401d98 <prvIdleTask+0x48>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  401d66:	4f15      	ldr	r7, [pc, #84]	; (401dbc <prvIdleTask+0x6c>)
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  401d68:	4e15      	ldr	r6, [pc, #84]	; (401dc0 <prvIdleTask+0x70>)
			taskENTER_CRITICAL();
  401d6a:	47c0      	blx	r8
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  401d6c:	68fb      	ldr	r3, [r7, #12]
  401d6e:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  401d70:	1d20      	adds	r0, r4, #4
  401d72:	47b0      	blx	r6
				--uxCurrentNumberOfTasks;
  401d74:	4a13      	ldr	r2, [pc, #76]	; (401dc4 <prvIdleTask+0x74>)
  401d76:	6813      	ldr	r3, [r2, #0]
  401d78:	3b01      	subs	r3, #1
  401d7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
  401d7c:	682b      	ldr	r3, [r5, #0]
  401d7e:	3b01      	subs	r3, #1
  401d80:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
  401d82:	4b11      	ldr	r3, [pc, #68]	; (401dc8 <prvIdleTask+0x78>)
  401d84:	4798      	blx	r3
			vPortFree( pxTCB->pxStack );
  401d86:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401d88:	f8df a04c 	ldr.w	sl, [pc, #76]	; 401dd8 <prvIdleTask+0x88>
  401d8c:	47d0      	blx	sl
			vPortFree( pxTCB );
  401d8e:	4620      	mov	r0, r4
  401d90:	47d0      	blx	sl
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  401d92:	682b      	ldr	r3, [r5, #0]
  401d94:	2b00      	cmp	r3, #0
  401d96:	d1e8      	bne.n	401d6a <prvIdleTask+0x1a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  401d98:	4b0c      	ldr	r3, [pc, #48]	; (401dcc <prvIdleTask+0x7c>)
  401d9a:	681b      	ldr	r3, [r3, #0]
  401d9c:	2b01      	cmp	r3, #1
  401d9e:	d9de      	bls.n	401d5e <prvIdleTask+0xe>
				taskYIELD();
  401da0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401da4:	f8c9 3000 	str.w	r3, [r9]
  401da8:	f3bf 8f4f 	dsb	sy
  401dac:	f3bf 8f6f 	isb	sy
  401db0:	e7d5      	b.n	401d5e <prvIdleTask+0xe>
  401db2:	bf00      	nop
  401db4:	20400ad0 	.word	0x20400ad0
  401db8:	00403811 	.word	0x00403811
  401dbc:	20400b44 	.word	0x20400b44
  401dc0:	00400e99 	.word	0x00400e99
  401dc4:	20400acc 	.word	0x20400acc
  401dc8:	00400fe1 	.word	0x00400fe1
  401dcc:	20400a68 	.word	0x20400a68
  401dd0:	00400f95 	.word	0x00400f95
  401dd4:	e000ed04 	.word	0xe000ed04
  401dd8:	00401251 	.word	0x00401251

00401ddc <xTaskCreate>:
	{
  401ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401de0:	b083      	sub	sp, #12
  401de2:	4683      	mov	fp, r0
  401de4:	460d      	mov	r5, r1
  401de6:	9301      	str	r3, [sp, #4]
  401de8:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401dec:	0096      	lsls	r6, r2, #2
  401dee:	4630      	mov	r0, r6
  401df0:	4b60      	ldr	r3, [pc, #384]	; (401f74 <xTaskCreate+0x198>)
  401df2:	4798      	blx	r3
			if( pxStack != NULL )
  401df4:	2800      	cmp	r0, #0
  401df6:	f000 808d 	beq.w	401f14 <xTaskCreate+0x138>
  401dfa:	4607      	mov	r7, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
  401dfc:	2058      	movs	r0, #88	; 0x58
  401dfe:	4b5d      	ldr	r3, [pc, #372]	; (401f74 <xTaskCreate+0x198>)
  401e00:	4798      	blx	r3
				if( pxNewTCB != NULL )
  401e02:	4604      	mov	r4, r0
  401e04:	2800      	cmp	r0, #0
  401e06:	f000 8082 	beq.w	401f0e <xTaskCreate+0x132>
					pxNewTCB->pxStack = pxStack;
  401e0a:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
  401e0c:	4632      	mov	r2, r6
  401e0e:	21a5      	movs	r1, #165	; 0xa5
  401e10:	4638      	mov	r0, r7
  401e12:	4b59      	ldr	r3, [pc, #356]	; (401f78 <xTaskCreate+0x19c>)
  401e14:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
  401e16:	3e04      	subs	r6, #4
  401e18:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401e1a:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  401e1c:	f026 0607 	bic.w	r6, r6, #7
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  401e20:	782b      	ldrb	r3, [r5, #0]
  401e22:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  401e26:	782b      	ldrb	r3, [r5, #0]
  401e28:	b163      	cbz	r3, 401e44 <xTaskCreate+0x68>
  401e2a:	462b      	mov	r3, r5
  401e2c:	f104 0234 	add.w	r2, r4, #52	; 0x34
  401e30:	f105 0109 	add.w	r1, r5, #9
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  401e34:	7858      	ldrb	r0, [r3, #1]
  401e36:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  401e3a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
  401e3e:	b108      	cbz	r0, 401e44 <xTaskCreate+0x68>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  401e40:	428b      	cmp	r3, r1
  401e42:	d1f7      	bne.n	401e34 <xTaskCreate+0x58>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  401e44:	2700      	movs	r7, #0
  401e46:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
  401e4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  401e4c:	2d04      	cmp	r5, #4
  401e4e:	bf28      	it	cs
  401e50:	2504      	movcs	r5, #4
	pxNewTCB->uxPriority = uxPriority;
  401e52:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
  401e54:	64a5      	str	r5, [r4, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
  401e56:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
  401e58:	f104 0804 	add.w	r8, r4, #4
  401e5c:	4640      	mov	r0, r8
  401e5e:	f8df 916c 	ldr.w	r9, [pc, #364]	; 401fcc <xTaskCreate+0x1f0>
  401e62:	47c8      	blx	r9
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
  401e64:	f104 0018 	add.w	r0, r4, #24
  401e68:	47c8      	blx	r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
  401e6a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401e6c:	f1c5 0505 	rsb	r5, r5, #5
  401e70:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
  401e72:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
  401e74:	6527      	str	r7, [r4, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
  401e76:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401e7a:	9a01      	ldr	r2, [sp, #4]
  401e7c:	4659      	mov	r1, fp
  401e7e:	4630      	mov	r0, r6
  401e80:	4b3e      	ldr	r3, [pc, #248]	; (401f7c <xTaskCreate+0x1a0>)
  401e82:	4798      	blx	r3
  401e84:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
  401e86:	f1ba 0f00 	cmp.w	sl, #0
  401e8a:	d001      	beq.n	401e90 <xTaskCreate+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  401e8c:	f8ca 4000 	str.w	r4, [sl]
	taskENTER_CRITICAL();
  401e90:	4b3b      	ldr	r3, [pc, #236]	; (401f80 <xTaskCreate+0x1a4>)
  401e92:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
  401e94:	4a3b      	ldr	r2, [pc, #236]	; (401f84 <xTaskCreate+0x1a8>)
  401e96:	6813      	ldr	r3, [r2, #0]
  401e98:	3301      	adds	r3, #1
  401e9a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
  401e9c:	4b3a      	ldr	r3, [pc, #232]	; (401f88 <xTaskCreate+0x1ac>)
  401e9e:	681b      	ldr	r3, [r3, #0]
  401ea0:	2b00      	cmp	r3, #0
  401ea2:	d03a      	beq.n	401f1a <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
  401ea4:	4b39      	ldr	r3, [pc, #228]	; (401f8c <xTaskCreate+0x1b0>)
  401ea6:	681b      	ldr	r3, [r3, #0]
  401ea8:	b93b      	cbnz	r3, 401eba <xTaskCreate+0xde>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
  401eaa:	4b37      	ldr	r3, [pc, #220]	; (401f88 <xTaskCreate+0x1ac>)
  401eac:	681b      	ldr	r3, [r3, #0]
  401eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401eb0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401eb2:	429a      	cmp	r2, r3
  401eb4:	d801      	bhi.n	401eba <xTaskCreate+0xde>
					pxCurrentTCB = pxNewTCB;
  401eb6:	4b34      	ldr	r3, [pc, #208]	; (401f88 <xTaskCreate+0x1ac>)
  401eb8:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
  401eba:	4a35      	ldr	r2, [pc, #212]	; (401f90 <xTaskCreate+0x1b4>)
  401ebc:	6813      	ldr	r3, [r2, #0]
  401ebe:	3301      	adds	r3, #1
  401ec0:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
  401ec2:	6423      	str	r3, [r4, #64]	; 0x40
		prvAddTaskToReadyList( pxNewTCB );
  401ec4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401ec6:	4a33      	ldr	r2, [pc, #204]	; (401f94 <xTaskCreate+0x1b8>)
  401ec8:	6811      	ldr	r1, [r2, #0]
  401eca:	2301      	movs	r3, #1
  401ecc:	4083      	lsls	r3, r0
  401ece:	430b      	orrs	r3, r1
  401ed0:	6013      	str	r3, [r2, #0]
  401ed2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401ed6:	4641      	mov	r1, r8
  401ed8:	4b2f      	ldr	r3, [pc, #188]	; (401f98 <xTaskCreate+0x1bc>)
  401eda:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401ede:	4b2f      	ldr	r3, [pc, #188]	; (401f9c <xTaskCreate+0x1c0>)
  401ee0:	4798      	blx	r3
	taskEXIT_CRITICAL();
  401ee2:	4b2f      	ldr	r3, [pc, #188]	; (401fa0 <xTaskCreate+0x1c4>)
  401ee4:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
  401ee6:	4b29      	ldr	r3, [pc, #164]	; (401f8c <xTaskCreate+0x1b0>)
  401ee8:	681b      	ldr	r3, [r3, #0]
  401eea:	2b00      	cmp	r3, #0
  401eec:	d03b      	beq.n	401f66 <xTaskCreate+0x18a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
  401eee:	4b26      	ldr	r3, [pc, #152]	; (401f88 <xTaskCreate+0x1ac>)
  401ef0:	681b      	ldr	r3, [r3, #0]
  401ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401ef4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401ef6:	429a      	cmp	r2, r3
  401ef8:	d239      	bcs.n	401f6e <xTaskCreate+0x192>
			taskYIELD_IF_USING_PREEMPTION();
  401efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401efe:	4b29      	ldr	r3, [pc, #164]	; (401fa4 <xTaskCreate+0x1c8>)
  401f00:	601a      	str	r2, [r3, #0]
  401f02:	f3bf 8f4f 	dsb	sy
  401f06:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  401f0a:	2001      	movs	r0, #1
  401f0c:	e02c      	b.n	401f68 <xTaskCreate+0x18c>
					vPortFree( pxStack );
  401f0e:	4638      	mov	r0, r7
  401f10:	4b25      	ldr	r3, [pc, #148]	; (401fa8 <xTaskCreate+0x1cc>)
  401f12:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401f14:	f04f 30ff 	mov.w	r0, #4294967295
  401f18:	e026      	b.n	401f68 <xTaskCreate+0x18c>
			pxCurrentTCB = pxNewTCB;
  401f1a:	4b1b      	ldr	r3, [pc, #108]	; (401f88 <xTaskCreate+0x1ac>)
  401f1c:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  401f1e:	6813      	ldr	r3, [r2, #0]
  401f20:	2b01      	cmp	r3, #1
  401f22:	d1ca      	bne.n	401eba <xTaskCreate+0xde>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401f24:	4e1c      	ldr	r6, [pc, #112]	; (401f98 <xTaskCreate+0x1bc>)
  401f26:	4630      	mov	r0, r6
  401f28:	4d20      	ldr	r5, [pc, #128]	; (401fac <xTaskCreate+0x1d0>)
  401f2a:	47a8      	blx	r5
  401f2c:	f106 0014 	add.w	r0, r6, #20
  401f30:	47a8      	blx	r5
  401f32:	f106 0028 	add.w	r0, r6, #40	; 0x28
  401f36:	47a8      	blx	r5
  401f38:	f106 003c 	add.w	r0, r6, #60	; 0x3c
  401f3c:	47a8      	blx	r5
  401f3e:	f106 0050 	add.w	r0, r6, #80	; 0x50
  401f42:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList1 );
  401f44:	4f1a      	ldr	r7, [pc, #104]	; (401fb0 <xTaskCreate+0x1d4>)
  401f46:	4638      	mov	r0, r7
  401f48:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  401f4a:	4e1a      	ldr	r6, [pc, #104]	; (401fb4 <xTaskCreate+0x1d8>)
  401f4c:	4630      	mov	r0, r6
  401f4e:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
  401f50:	4819      	ldr	r0, [pc, #100]	; (401fb8 <xTaskCreate+0x1dc>)
  401f52:	47a8      	blx	r5
		vListInitialise( &xTasksWaitingTermination );
  401f54:	4819      	ldr	r0, [pc, #100]	; (401fbc <xTaskCreate+0x1e0>)
  401f56:	47a8      	blx	r5
		vListInitialise( &xSuspendedTaskList );
  401f58:	4819      	ldr	r0, [pc, #100]	; (401fc0 <xTaskCreate+0x1e4>)
  401f5a:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
  401f5c:	4b19      	ldr	r3, [pc, #100]	; (401fc4 <xTaskCreate+0x1e8>)
  401f5e:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401f60:	4b19      	ldr	r3, [pc, #100]	; (401fc8 <xTaskCreate+0x1ec>)
  401f62:	601e      	str	r6, [r3, #0]
  401f64:	e7a9      	b.n	401eba <xTaskCreate+0xde>
			xReturn = pdPASS;
  401f66:	2001      	movs	r0, #1
	}
  401f68:	b003      	add	sp, #12
  401f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xReturn = pdPASS;
  401f6e:	2001      	movs	r0, #1
		return xReturn;
  401f70:	e7fa      	b.n	401f68 <xTaskCreate+0x18c>
  401f72:	bf00      	nop
  401f74:	00401221 	.word	0x00401221
  401f78:	00406f15 	.word	0x00406f15
  401f7c:	00400f45 	.word	0x00400f45
  401f80:	00400f95 	.word	0x00400f95
  401f84:	20400acc 	.word	0x20400acc
  401f88:	20400a5c 	.word	0x20400a5c
  401f8c:	20400b2c 	.word	0x20400b2c
  401f90:	20400adc 	.word	0x20400adc
  401f94:	20400ae0 	.word	0x20400ae0
  401f98:	20400a68 	.word	0x20400a68
  401f9c:	00400e4d 	.word	0x00400e4d
  401fa0:	00400fe1 	.word	0x00400fe1
  401fa4:	e000ed04 	.word	0xe000ed04
  401fa8:	00401251 	.word	0x00401251
  401fac:	00400e31 	.word	0x00400e31
  401fb0:	20400ae4 	.word	0x20400ae4
  401fb4:	20400af8 	.word	0x20400af8
  401fb8:	20400b18 	.word	0x20400b18
  401fbc:	20400b44 	.word	0x20400b44
  401fc0:	20400b30 	.word	0x20400b30
  401fc4:	20400a60 	.word	0x20400a60
  401fc8:	20400a64 	.word	0x20400a64
  401fcc:	00400e47 	.word	0x00400e47

00401fd0 <vTaskStartScheduler>:
{
  401fd0:	b510      	push	{r4, lr}
  401fd2:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
  401fd4:	4b1b      	ldr	r3, [pc, #108]	; (402044 <vTaskStartScheduler+0x74>)
  401fd6:	9301      	str	r3, [sp, #4]
  401fd8:	2300      	movs	r3, #0
  401fda:	9300      	str	r3, [sp, #0]
  401fdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401fe0:	4919      	ldr	r1, [pc, #100]	; (402048 <vTaskStartScheduler+0x78>)
  401fe2:	481a      	ldr	r0, [pc, #104]	; (40204c <vTaskStartScheduler+0x7c>)
  401fe4:	4c1a      	ldr	r4, [pc, #104]	; (402050 <vTaskStartScheduler+0x80>)
  401fe6:	47a0      	blx	r4
		if( xReturn == pdPASS )
  401fe8:	2801      	cmp	r0, #1
  401fea:	d004      	beq.n	401ff6 <vTaskStartScheduler+0x26>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
  401fec:	f1b0 3fff 	cmp.w	r0, #4294967295
  401ff0:	d01c      	beq.n	40202c <vTaskStartScheduler+0x5c>
}
  401ff2:	b002      	add	sp, #8
  401ff4:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
  401ff6:	4b17      	ldr	r3, [pc, #92]	; (402054 <vTaskStartScheduler+0x84>)
  401ff8:	4798      	blx	r3
	if( xReturn == pdPASS )
  401ffa:	2801      	cmp	r0, #1
  401ffc:	d1f6      	bne.n	401fec <vTaskStartScheduler+0x1c>
  401ffe:	f04f 0380 	mov.w	r3, #128	; 0x80
  402002:	b672      	cpsid	i
  402004:	f383 8811 	msr	BASEPRI, r3
  402008:	f3bf 8f6f 	isb	sy
  40200c:	f3bf 8f4f 	dsb	sy
  402010:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  402012:	f04f 32ff 	mov.w	r2, #4294967295
  402016:	4b10      	ldr	r3, [pc, #64]	; (402058 <vTaskStartScheduler+0x88>)
  402018:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  40201a:	2201      	movs	r2, #1
  40201c:	4b0f      	ldr	r3, [pc, #60]	; (40205c <vTaskStartScheduler+0x8c>)
  40201e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  402020:	2200      	movs	r2, #0
  402022:	4b0f      	ldr	r3, [pc, #60]	; (402060 <vTaskStartScheduler+0x90>)
  402024:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  402026:	4b0f      	ldr	r3, [pc, #60]	; (402064 <vTaskStartScheduler+0x94>)
  402028:	4798      	blx	r3
  40202a:	e7e2      	b.n	401ff2 <vTaskStartScheduler+0x22>
  40202c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402030:	b672      	cpsid	i
  402032:	f383 8811 	msr	BASEPRI, r3
  402036:	f3bf 8f6f 	isb	sy
  40203a:	f3bf 8f4f 	dsb	sy
  40203e:	b662      	cpsie	i
  402040:	e7fe      	b.n	402040 <vTaskStartScheduler+0x70>
  402042:	bf00      	nop
  402044:	20400b0c 	.word	0x20400b0c
  402048:	0040b770 	.word	0x0040b770
  40204c:	00401d51 	.word	0x00401d51
  402050:	00401ddd 	.word	0x00401ddd
  402054:	00402925 	.word	0x00402925
  402058:	20400b10 	.word	0x20400b10
  40205c:	20400b2c 	.word	0x20400b2c
  402060:	20400b58 	.word	0x20400b58
  402064:	004010d1 	.word	0x004010d1

00402068 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  402068:	4a02      	ldr	r2, [pc, #8]	; (402074 <vTaskSuspendAll+0xc>)
  40206a:	6813      	ldr	r3, [r2, #0]
  40206c:	3301      	adds	r3, #1
  40206e:	6013      	str	r3, [r2, #0]
  402070:	4770      	bx	lr
  402072:	bf00      	nop
  402074:	20400ad8 	.word	0x20400ad8

00402078 <xTaskGetTickCount>:
		xTicks = xTickCount;
  402078:	4b01      	ldr	r3, [pc, #4]	; (402080 <xTaskGetTickCount+0x8>)
  40207a:	6818      	ldr	r0, [r3, #0]
}
  40207c:	4770      	bx	lr
  40207e:	bf00      	nop
  402080:	20400b58 	.word	0x20400b58

00402084 <xTaskIncrementTick>:
{
  402084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402088:	4b41      	ldr	r3, [pc, #260]	; (402190 <xTaskIncrementTick+0x10c>)
  40208a:	681b      	ldr	r3, [r3, #0]
  40208c:	2b00      	cmp	r3, #0
  40208e:	d177      	bne.n	402180 <xTaskIncrementTick+0xfc>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
  402090:	4b40      	ldr	r3, [pc, #256]	; (402194 <xTaskIncrementTick+0x110>)
  402092:	681d      	ldr	r5, [r3, #0]
  402094:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
  402096:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
  402098:	b9d5      	cbnz	r5, 4020d0 <xTaskIncrementTick+0x4c>
			taskSWITCH_DELAYED_LISTS();
  40209a:	4b3f      	ldr	r3, [pc, #252]	; (402198 <xTaskIncrementTick+0x114>)
  40209c:	681b      	ldr	r3, [r3, #0]
  40209e:	681b      	ldr	r3, [r3, #0]
  4020a0:	b153      	cbz	r3, 4020b8 <xTaskIncrementTick+0x34>
  4020a2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020a6:	b672      	cpsid	i
  4020a8:	f383 8811 	msr	BASEPRI, r3
  4020ac:	f3bf 8f6f 	isb	sy
  4020b0:	f3bf 8f4f 	dsb	sy
  4020b4:	b662      	cpsie	i
  4020b6:	e7fe      	b.n	4020b6 <xTaskIncrementTick+0x32>
  4020b8:	4a37      	ldr	r2, [pc, #220]	; (402198 <xTaskIncrementTick+0x114>)
  4020ba:	6811      	ldr	r1, [r2, #0]
  4020bc:	4b37      	ldr	r3, [pc, #220]	; (40219c <xTaskIncrementTick+0x118>)
  4020be:	6818      	ldr	r0, [r3, #0]
  4020c0:	6010      	str	r0, [r2, #0]
  4020c2:	6019      	str	r1, [r3, #0]
  4020c4:	4a36      	ldr	r2, [pc, #216]	; (4021a0 <xTaskIncrementTick+0x11c>)
  4020c6:	6813      	ldr	r3, [r2, #0]
  4020c8:	3301      	adds	r3, #1
  4020ca:	6013      	str	r3, [r2, #0]
  4020cc:	4b35      	ldr	r3, [pc, #212]	; (4021a4 <xTaskIncrementTick+0x120>)
  4020ce:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
  4020d0:	4b35      	ldr	r3, [pc, #212]	; (4021a8 <xTaskIncrementTick+0x124>)
  4020d2:	681b      	ldr	r3, [r3, #0]
  4020d4:	429d      	cmp	r5, r3
  4020d6:	d218      	bcs.n	40210a <xTaskIncrementTick+0x86>
BaseType_t xSwitchRequired = pdFALSE;
  4020d8:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  4020da:	4b34      	ldr	r3, [pc, #208]	; (4021ac <xTaskIncrementTick+0x128>)
  4020dc:	681b      	ldr	r3, [r3, #0]
  4020de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4020e0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4020e4:	009b      	lsls	r3, r3, #2
  4020e6:	4a32      	ldr	r2, [pc, #200]	; (4021b0 <xTaskIncrementTick+0x12c>)
  4020e8:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
  4020ea:	2b02      	cmp	r3, #2
  4020ec:	bf28      	it	cs
  4020ee:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  4020f0:	4b30      	ldr	r3, [pc, #192]	; (4021b4 <xTaskIncrementTick+0x130>)
  4020f2:	681b      	ldr	r3, [r3, #0]
  4020f4:	b90b      	cbnz	r3, 4020fa <xTaskIncrementTick+0x76>
				vApplicationTickHook();
  4020f6:	4b30      	ldr	r3, [pc, #192]	; (4021b8 <xTaskIncrementTick+0x134>)
  4020f8:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  4020fa:	4b30      	ldr	r3, [pc, #192]	; (4021bc <xTaskIncrementTick+0x138>)
  4020fc:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  4020fe:	2b00      	cmp	r3, #0
}
  402100:	bf0c      	ite	eq
  402102:	4620      	moveq	r0, r4
  402104:	2001      	movne	r0, #1
  402106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40210a:	2400      	movs	r4, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40210c:	f8df 9088 	ldr.w	r9, [pc, #136]	; 402198 <xTaskIncrementTick+0x114>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  402110:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 4021c8 <xTaskIncrementTick+0x144>
					prvAddTaskToReadyList( pxTCB );
  402114:	4f2a      	ldr	r7, [pc, #168]	; (4021c0 <xTaskIncrementTick+0x13c>)
  402116:	e01f      	b.n	402158 <xTaskIncrementTick+0xd4>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402118:	f04f 32ff 	mov.w	r2, #4294967295
  40211c:	4b22      	ldr	r3, [pc, #136]	; (4021a8 <xTaskIncrementTick+0x124>)
  40211e:	601a      	str	r2, [r3, #0]
					break;
  402120:	e7db      	b.n	4020da <xTaskIncrementTick+0x56>
						xNextTaskUnblockTime = xItemValue;
  402122:	4a21      	ldr	r2, [pc, #132]	; (4021a8 <xTaskIncrementTick+0x124>)
  402124:	6013      	str	r3, [r2, #0]
						break;
  402126:	e7d8      	b.n	4020da <xTaskIncrementTick+0x56>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402128:	f106 0018 	add.w	r0, r6, #24
  40212c:	47c0      	blx	r8
					prvAddTaskToReadyList( pxTCB );
  40212e:	6af0      	ldr	r0, [r6, #44]	; 0x2c
  402130:	683a      	ldr	r2, [r7, #0]
  402132:	2301      	movs	r3, #1
  402134:	4083      	lsls	r3, r0
  402136:	4313      	orrs	r3, r2
  402138:	603b      	str	r3, [r7, #0]
  40213a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40213e:	4651      	mov	r1, sl
  402140:	4b1b      	ldr	r3, [pc, #108]	; (4021b0 <xTaskIncrementTick+0x12c>)
  402142:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402146:	4b1f      	ldr	r3, [pc, #124]	; (4021c4 <xTaskIncrementTick+0x140>)
  402148:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40214a:	4b18      	ldr	r3, [pc, #96]	; (4021ac <xTaskIncrementTick+0x128>)
  40214c:	681b      	ldr	r3, [r3, #0]
  40214e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
  402150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
  402152:	429a      	cmp	r2, r3
  402154:	bf28      	it	cs
  402156:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402158:	f8d9 3000 	ldr.w	r3, [r9]
  40215c:	681b      	ldr	r3, [r3, #0]
  40215e:	2b00      	cmp	r3, #0
  402160:	d0da      	beq.n	402118 <xTaskIncrementTick+0x94>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402162:	f8d9 3000 	ldr.w	r3, [r9]
  402166:	68db      	ldr	r3, [r3, #12]
  402168:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
  40216a:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
  40216c:	429d      	cmp	r5, r3
  40216e:	d3d8      	bcc.n	402122 <xTaskIncrementTick+0x9e>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  402170:	f106 0a04 	add.w	sl, r6, #4
  402174:	4650      	mov	r0, sl
  402176:	47c0      	blx	r8
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  402178:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  40217a:	2b00      	cmp	r3, #0
  40217c:	d1d4      	bne.n	402128 <xTaskIncrementTick+0xa4>
  40217e:	e7d6      	b.n	40212e <xTaskIncrementTick+0xaa>
		++uxPendedTicks;
  402180:	4a0c      	ldr	r2, [pc, #48]	; (4021b4 <xTaskIncrementTick+0x130>)
  402182:	6813      	ldr	r3, [r2, #0]
  402184:	3301      	adds	r3, #1
  402186:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  402188:	4b0b      	ldr	r3, [pc, #44]	; (4021b8 <xTaskIncrementTick+0x134>)
  40218a:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  40218c:	2400      	movs	r4, #0
  40218e:	e7b4      	b.n	4020fa <xTaskIncrementTick+0x76>
  402190:	20400ad8 	.word	0x20400ad8
  402194:	20400b58 	.word	0x20400b58
  402198:	20400a60 	.word	0x20400a60
  40219c:	20400a64 	.word	0x20400a64
  4021a0:	20400b14 	.word	0x20400b14
  4021a4:	00401c85 	.word	0x00401c85
  4021a8:	20400b10 	.word	0x20400b10
  4021ac:	20400a5c 	.word	0x20400a5c
  4021b0:	20400a68 	.word	0x20400a68
  4021b4:	20400ad4 	.word	0x20400ad4
  4021b8:	00403813 	.word	0x00403813
  4021bc:	20400b5c 	.word	0x20400b5c
  4021c0:	20400ae0 	.word	0x20400ae0
  4021c4:	00400e4d 	.word	0x00400e4d
  4021c8:	00400e99 	.word	0x00400e99

004021cc <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
  4021cc:	4b36      	ldr	r3, [pc, #216]	; (4022a8 <xTaskResumeAll+0xdc>)
  4021ce:	681b      	ldr	r3, [r3, #0]
  4021d0:	b953      	cbnz	r3, 4021e8 <xTaskResumeAll+0x1c>
  4021d2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021d6:	b672      	cpsid	i
  4021d8:	f383 8811 	msr	BASEPRI, r3
  4021dc:	f3bf 8f6f 	isb	sy
  4021e0:	f3bf 8f4f 	dsb	sy
  4021e4:	b662      	cpsie	i
  4021e6:	e7fe      	b.n	4021e6 <xTaskResumeAll+0x1a>
{
  4021e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
  4021ec:	4b2f      	ldr	r3, [pc, #188]	; (4022ac <xTaskResumeAll+0xe0>)
  4021ee:	4798      	blx	r3
		--uxSchedulerSuspended;
  4021f0:	4b2d      	ldr	r3, [pc, #180]	; (4022a8 <xTaskResumeAll+0xdc>)
  4021f2:	681a      	ldr	r2, [r3, #0]
  4021f4:	3a01      	subs	r2, #1
  4021f6:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4021f8:	681b      	ldr	r3, [r3, #0]
  4021fa:	2b00      	cmp	r3, #0
  4021fc:	d150      	bne.n	4022a0 <xTaskResumeAll+0xd4>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  4021fe:	4b2c      	ldr	r3, [pc, #176]	; (4022b0 <xTaskResumeAll+0xe4>)
  402200:	681b      	ldr	r3, [r3, #0]
  402202:	b92b      	cbnz	r3, 402210 <xTaskResumeAll+0x44>
BaseType_t xAlreadyYielded = pdFALSE;
  402204:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  402206:	4b2b      	ldr	r3, [pc, #172]	; (4022b4 <xTaskResumeAll+0xe8>)
  402208:	4798      	blx	r3
}
  40220a:	4620      	mov	r0, r4
  40220c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402210:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  402212:	4f29      	ldr	r7, [pc, #164]	; (4022b8 <xTaskResumeAll+0xec>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402214:	4e29      	ldr	r6, [pc, #164]	; (4022bc <xTaskResumeAll+0xf0>)
					prvAddTaskToReadyList( pxTCB );
  402216:	4d2a      	ldr	r5, [pc, #168]	; (4022c0 <xTaskResumeAll+0xf4>)
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  402218:	683b      	ldr	r3, [r7, #0]
  40221a:	b303      	cbz	r3, 40225e <xTaskResumeAll+0x92>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  40221c:	68fb      	ldr	r3, [r7, #12]
  40221e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402220:	f104 0018 	add.w	r0, r4, #24
  402224:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  402226:	f104 0804 	add.w	r8, r4, #4
  40222a:	4640      	mov	r0, r8
  40222c:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  40222e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402230:	682a      	ldr	r2, [r5, #0]
  402232:	2301      	movs	r3, #1
  402234:	4083      	lsls	r3, r0
  402236:	4313      	orrs	r3, r2
  402238:	602b      	str	r3, [r5, #0]
  40223a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40223e:	4641      	mov	r1, r8
  402240:	4b20      	ldr	r3, [pc, #128]	; (4022c4 <xTaskResumeAll+0xf8>)
  402242:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402246:	4b20      	ldr	r3, [pc, #128]	; (4022c8 <xTaskResumeAll+0xfc>)
  402248:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40224a:	4b20      	ldr	r3, [pc, #128]	; (4022cc <xTaskResumeAll+0x100>)
  40224c:	681b      	ldr	r3, [r3, #0]
  40224e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402252:	429a      	cmp	r2, r3
  402254:	d3e0      	bcc.n	402218 <xTaskResumeAll+0x4c>
						xYieldPending = pdTRUE;
  402256:	2201      	movs	r2, #1
  402258:	4b1d      	ldr	r3, [pc, #116]	; (4022d0 <xTaskResumeAll+0x104>)
  40225a:	601a      	str	r2, [r3, #0]
  40225c:	e7dc      	b.n	402218 <xTaskResumeAll+0x4c>
				if( pxTCB != NULL )
  40225e:	b10c      	cbz	r4, 402264 <xTaskResumeAll+0x98>
					prvResetNextTaskUnblockTime();
  402260:	4b1c      	ldr	r3, [pc, #112]	; (4022d4 <xTaskResumeAll+0x108>)
  402262:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
  402264:	4b1c      	ldr	r3, [pc, #112]	; (4022d8 <xTaskResumeAll+0x10c>)
  402266:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
  402268:	b16c      	cbz	r4, 402286 <xTaskResumeAll+0xba>
							if( xTaskIncrementTick() != pdFALSE )
  40226a:	4f1c      	ldr	r7, [pc, #112]	; (4022dc <xTaskResumeAll+0x110>)
								xYieldPending = pdTRUE;
  40226c:	4e18      	ldr	r6, [pc, #96]	; (4022d0 <xTaskResumeAll+0x104>)
  40226e:	2501      	movs	r5, #1
  402270:	e001      	b.n	402276 <xTaskResumeAll+0xaa>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
  402272:	3c01      	subs	r4, #1
  402274:	d004      	beq.n	402280 <xTaskResumeAll+0xb4>
							if( xTaskIncrementTick() != pdFALSE )
  402276:	47b8      	blx	r7
  402278:	2800      	cmp	r0, #0
  40227a:	d0fa      	beq.n	402272 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
  40227c:	6035      	str	r5, [r6, #0]
  40227e:	e7f8      	b.n	402272 <xTaskResumeAll+0xa6>
						uxPendedTicks = 0;
  402280:	2200      	movs	r2, #0
  402282:	4b15      	ldr	r3, [pc, #84]	; (4022d8 <xTaskResumeAll+0x10c>)
  402284:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
  402286:	4b12      	ldr	r3, [pc, #72]	; (4022d0 <xTaskResumeAll+0x104>)
  402288:	681b      	ldr	r3, [r3, #0]
  40228a:	b15b      	cbz	r3, 4022a4 <xTaskResumeAll+0xd8>
					taskYIELD_IF_USING_PREEMPTION();
  40228c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402290:	4b13      	ldr	r3, [pc, #76]	; (4022e0 <xTaskResumeAll+0x114>)
  402292:	601a      	str	r2, [r3, #0]
  402294:	f3bf 8f4f 	dsb	sy
  402298:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  40229c:	2401      	movs	r4, #1
  40229e:	e7b2      	b.n	402206 <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
  4022a0:	2400      	movs	r4, #0
  4022a2:	e7b0      	b.n	402206 <xTaskResumeAll+0x3a>
  4022a4:	2400      	movs	r4, #0
  4022a6:	e7ae      	b.n	402206 <xTaskResumeAll+0x3a>
  4022a8:	20400ad8 	.word	0x20400ad8
  4022ac:	00400f95 	.word	0x00400f95
  4022b0:	20400acc 	.word	0x20400acc
  4022b4:	00400fe1 	.word	0x00400fe1
  4022b8:	20400b18 	.word	0x20400b18
  4022bc:	00400e99 	.word	0x00400e99
  4022c0:	20400ae0 	.word	0x20400ae0
  4022c4:	20400a68 	.word	0x20400a68
  4022c8:	00400e4d 	.word	0x00400e4d
  4022cc:	20400a5c 	.word	0x20400a5c
  4022d0:	20400b5c 	.word	0x20400b5c
  4022d4:	00401c85 	.word	0x00401c85
  4022d8:	20400ad4 	.word	0x20400ad4
  4022dc:	00402085 	.word	0x00402085
  4022e0:	e000ed04 	.word	0xe000ed04

004022e4 <vTaskDelay>:
	{
  4022e4:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  4022e6:	b1b8      	cbz	r0, 402318 <vTaskDelay+0x34>
  4022e8:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  4022ea:	4b10      	ldr	r3, [pc, #64]	; (40232c <vTaskDelay+0x48>)
  4022ec:	681b      	ldr	r3, [r3, #0]
  4022ee:	b153      	cbz	r3, 402306 <vTaskDelay+0x22>
  4022f0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4022f4:	b672      	cpsid	i
  4022f6:	f383 8811 	msr	BASEPRI, r3
  4022fa:	f3bf 8f6f 	isb	sy
  4022fe:	f3bf 8f4f 	dsb	sy
  402302:	b662      	cpsie	i
  402304:	e7fe      	b.n	402304 <vTaskDelay+0x20>
			vTaskSuspendAll();
  402306:	4b0a      	ldr	r3, [pc, #40]	; (402330 <vTaskDelay+0x4c>)
  402308:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
  40230a:	2100      	movs	r1, #0
  40230c:	4620      	mov	r0, r4
  40230e:	4b09      	ldr	r3, [pc, #36]	; (402334 <vTaskDelay+0x50>)
  402310:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  402312:	4b09      	ldr	r3, [pc, #36]	; (402338 <vTaskDelay+0x54>)
  402314:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  402316:	b938      	cbnz	r0, 402328 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
  402318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40231c:	4b07      	ldr	r3, [pc, #28]	; (40233c <vTaskDelay+0x58>)
  40231e:	601a      	str	r2, [r3, #0]
  402320:	f3bf 8f4f 	dsb	sy
  402324:	f3bf 8f6f 	isb	sy
  402328:	bd10      	pop	{r4, pc}
  40232a:	bf00      	nop
  40232c:	20400ad8 	.word	0x20400ad8
  402330:	00402069 	.word	0x00402069
  402334:	00401cb1 	.word	0x00401cb1
  402338:	004021cd 	.word	0x004021cd
  40233c:	e000ed04 	.word	0xe000ed04

00402340 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  402340:	4b2d      	ldr	r3, [pc, #180]	; (4023f8 <vTaskSwitchContext+0xb8>)
  402342:	681b      	ldr	r3, [r3, #0]
  402344:	2b00      	cmp	r3, #0
  402346:	d12c      	bne.n	4023a2 <vTaskSwitchContext+0x62>
{
  402348:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  40234a:	2200      	movs	r2, #0
  40234c:	4b2b      	ldr	r3, [pc, #172]	; (4023fc <vTaskSwitchContext+0xbc>)
  40234e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  402350:	4b2b      	ldr	r3, [pc, #172]	; (402400 <vTaskSwitchContext+0xc0>)
  402352:	681b      	ldr	r3, [r3, #0]
  402354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402356:	681a      	ldr	r2, [r3, #0]
  402358:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  40235c:	d103      	bne.n	402366 <vTaskSwitchContext+0x26>
  40235e:	685a      	ldr	r2, [r3, #4]
  402360:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402364:	d021      	beq.n	4023aa <vTaskSwitchContext+0x6a>
  402366:	4b26      	ldr	r3, [pc, #152]	; (402400 <vTaskSwitchContext+0xc0>)
  402368:	6818      	ldr	r0, [r3, #0]
  40236a:	6819      	ldr	r1, [r3, #0]
  40236c:	3134      	adds	r1, #52	; 0x34
  40236e:	4b25      	ldr	r3, [pc, #148]	; (402404 <vTaskSwitchContext+0xc4>)
  402370:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402372:	4b25      	ldr	r3, [pc, #148]	; (402408 <vTaskSwitchContext+0xc8>)
  402374:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
  402376:	fab3 f383 	clz	r3, r3
  40237a:	b2db      	uxtb	r3, r3
  40237c:	f1c3 031f 	rsb	r3, r3, #31
  402380:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  402384:	0092      	lsls	r2, r2, #2
  402386:	4921      	ldr	r1, [pc, #132]	; (40240c <vTaskSwitchContext+0xcc>)
  402388:	588a      	ldr	r2, [r1, r2]
  40238a:	b9ba      	cbnz	r2, 4023bc <vTaskSwitchContext+0x7c>
	__asm volatile
  40238c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402390:	b672      	cpsid	i
  402392:	f383 8811 	msr	BASEPRI, r3
  402396:	f3bf 8f6f 	isb	sy
  40239a:	f3bf 8f4f 	dsb	sy
  40239e:	b662      	cpsie	i
  4023a0:	e7fe      	b.n	4023a0 <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  4023a2:	2201      	movs	r2, #1
  4023a4:	4b15      	ldr	r3, [pc, #84]	; (4023fc <vTaskSwitchContext+0xbc>)
  4023a6:	601a      	str	r2, [r3, #0]
  4023a8:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  4023aa:	689a      	ldr	r2, [r3, #8]
  4023ac:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4023b0:	d1d9      	bne.n	402366 <vTaskSwitchContext+0x26>
  4023b2:	68db      	ldr	r3, [r3, #12]
  4023b4:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  4023b8:	d1d5      	bne.n	402366 <vTaskSwitchContext+0x26>
  4023ba:	e7da      	b.n	402372 <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4023bc:	4a13      	ldr	r2, [pc, #76]	; (40240c <vTaskSwitchContext+0xcc>)
  4023be:	0099      	lsls	r1, r3, #2
  4023c0:	18c8      	adds	r0, r1, r3
  4023c2:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  4023c6:	6844      	ldr	r4, [r0, #4]
  4023c8:	6864      	ldr	r4, [r4, #4]
  4023ca:	6044      	str	r4, [r0, #4]
  4023cc:	4419      	add	r1, r3
  4023ce:	4602      	mov	r2, r0
  4023d0:	3208      	adds	r2, #8
  4023d2:	4294      	cmp	r4, r2
  4023d4:	d009      	beq.n	4023ea <vTaskSwitchContext+0xaa>
  4023d6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4023da:	4a0c      	ldr	r2, [pc, #48]	; (40240c <vTaskSwitchContext+0xcc>)
  4023dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4023e0:	685b      	ldr	r3, [r3, #4]
  4023e2:	68da      	ldr	r2, [r3, #12]
  4023e4:	4b06      	ldr	r3, [pc, #24]	; (402400 <vTaskSwitchContext+0xc0>)
  4023e6:	601a      	str	r2, [r3, #0]
  4023e8:	bd10      	pop	{r4, pc}
  4023ea:	6860      	ldr	r0, [r4, #4]
  4023ec:	4a07      	ldr	r2, [pc, #28]	; (40240c <vTaskSwitchContext+0xcc>)
  4023ee:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  4023f2:	6050      	str	r0, [r2, #4]
  4023f4:	e7ef      	b.n	4023d6 <vTaskSwitchContext+0x96>
  4023f6:	bf00      	nop
  4023f8:	20400ad8 	.word	0x20400ad8
  4023fc:	20400b5c 	.word	0x20400b5c
  402400:	20400a5c 	.word	0x20400a5c
  402404:	004037f9 	.word	0x004037f9
  402408:	20400ae0 	.word	0x20400ae0
  40240c:	20400a68 	.word	0x20400a68

00402410 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
  402410:	b950      	cbnz	r0, 402428 <vTaskPlaceOnEventList+0x18>
  402412:	f04f 0380 	mov.w	r3, #128	; 0x80
  402416:	b672      	cpsid	i
  402418:	f383 8811 	msr	BASEPRI, r3
  40241c:	f3bf 8f6f 	isb	sy
  402420:	f3bf 8f4f 	dsb	sy
  402424:	b662      	cpsie	i
  402426:	e7fe      	b.n	402426 <vTaskPlaceOnEventList+0x16>
{
  402428:	b510      	push	{r4, lr}
  40242a:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  40242c:	4b04      	ldr	r3, [pc, #16]	; (402440 <vTaskPlaceOnEventList+0x30>)
  40242e:	6819      	ldr	r1, [r3, #0]
  402430:	3118      	adds	r1, #24
  402432:	4b04      	ldr	r3, [pc, #16]	; (402444 <vTaskPlaceOnEventList+0x34>)
  402434:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
  402436:	2101      	movs	r1, #1
  402438:	4620      	mov	r0, r4
  40243a:	4b03      	ldr	r3, [pc, #12]	; (402448 <vTaskPlaceOnEventList+0x38>)
  40243c:	4798      	blx	r3
  40243e:	bd10      	pop	{r4, pc}
  402440:	20400a5c 	.word	0x20400a5c
  402444:	00400e65 	.word	0x00400e65
  402448:	00401cb1 	.word	0x00401cb1

0040244c <vTaskPlaceOnEventListRestricted>:
	{
  40244c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
  40244e:	b178      	cbz	r0, 402470 <vTaskPlaceOnEventListRestricted+0x24>
  402450:	4614      	mov	r4, r2
  402452:	460d      	mov	r5, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402454:	4b0c      	ldr	r3, [pc, #48]	; (402488 <vTaskPlaceOnEventListRestricted+0x3c>)
  402456:	6819      	ldr	r1, [r3, #0]
  402458:	3118      	adds	r1, #24
  40245a:	4b0c      	ldr	r3, [pc, #48]	; (40248c <vTaskPlaceOnEventListRestricted+0x40>)
  40245c:	4798      	blx	r3
			xTicksToWait = portMAX_DELAY;
  40245e:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
  402460:	4621      	mov	r1, r4
  402462:	bf0c      	ite	eq
  402464:	4628      	moveq	r0, r5
  402466:	f04f 30ff 	movne.w	r0, #4294967295
  40246a:	4b09      	ldr	r3, [pc, #36]	; (402490 <vTaskPlaceOnEventListRestricted+0x44>)
  40246c:	4798      	blx	r3
  40246e:	bd38      	pop	{r3, r4, r5, pc}
  402470:	f04f 0380 	mov.w	r3, #128	; 0x80
  402474:	b672      	cpsid	i
  402476:	f383 8811 	msr	BASEPRI, r3
  40247a:	f3bf 8f6f 	isb	sy
  40247e:	f3bf 8f4f 	dsb	sy
  402482:	b662      	cpsie	i
  402484:	e7fe      	b.n	402484 <vTaskPlaceOnEventListRestricted+0x38>
  402486:	bf00      	nop
  402488:	20400a5c 	.word	0x20400a5c
  40248c:	00400e4d 	.word	0x00400e4d
  402490:	00401cb1 	.word	0x00401cb1

00402494 <xTaskRemoveFromEventList>:
{
  402494:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  402496:	68c3      	ldr	r3, [r0, #12]
  402498:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  40249a:	b324      	cbz	r4, 4024e6 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  40249c:	f104 0518 	add.w	r5, r4, #24
  4024a0:	4628      	mov	r0, r5
  4024a2:	4b1a      	ldr	r3, [pc, #104]	; (40250c <xTaskRemoveFromEventList+0x78>)
  4024a4:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4024a6:	4b1a      	ldr	r3, [pc, #104]	; (402510 <xTaskRemoveFromEventList+0x7c>)
  4024a8:	681b      	ldr	r3, [r3, #0]
  4024aa:	bb3b      	cbnz	r3, 4024fc <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
  4024ac:	1d25      	adds	r5, r4, #4
  4024ae:	4628      	mov	r0, r5
  4024b0:	4b16      	ldr	r3, [pc, #88]	; (40250c <xTaskRemoveFromEventList+0x78>)
  4024b2:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  4024b4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4024b6:	4a17      	ldr	r2, [pc, #92]	; (402514 <xTaskRemoveFromEventList+0x80>)
  4024b8:	6811      	ldr	r1, [r2, #0]
  4024ba:	2301      	movs	r3, #1
  4024bc:	4083      	lsls	r3, r0
  4024be:	430b      	orrs	r3, r1
  4024c0:	6013      	str	r3, [r2, #0]
  4024c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4024c6:	4629      	mov	r1, r5
  4024c8:	4b13      	ldr	r3, [pc, #76]	; (402518 <xTaskRemoveFromEventList+0x84>)
  4024ca:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4024ce:	4b13      	ldr	r3, [pc, #76]	; (40251c <xTaskRemoveFromEventList+0x88>)
  4024d0:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  4024d2:	4b13      	ldr	r3, [pc, #76]	; (402520 <xTaskRemoveFromEventList+0x8c>)
  4024d4:	681b      	ldr	r3, [r3, #0]
  4024d6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4024d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4024da:	429a      	cmp	r2, r3
  4024dc:	d913      	bls.n	402506 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  4024de:	2001      	movs	r0, #1
  4024e0:	4b10      	ldr	r3, [pc, #64]	; (402524 <xTaskRemoveFromEventList+0x90>)
  4024e2:	6018      	str	r0, [r3, #0]
  4024e4:	bd38      	pop	{r3, r4, r5, pc}
  4024e6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4024ea:	b672      	cpsid	i
  4024ec:	f383 8811 	msr	BASEPRI, r3
  4024f0:	f3bf 8f6f 	isb	sy
  4024f4:	f3bf 8f4f 	dsb	sy
  4024f8:	b662      	cpsie	i
  4024fa:	e7fe      	b.n	4024fa <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  4024fc:	4629      	mov	r1, r5
  4024fe:	480a      	ldr	r0, [pc, #40]	; (402528 <xTaskRemoveFromEventList+0x94>)
  402500:	4b06      	ldr	r3, [pc, #24]	; (40251c <xTaskRemoveFromEventList+0x88>)
  402502:	4798      	blx	r3
  402504:	e7e5      	b.n	4024d2 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  402506:	2000      	movs	r0, #0
}
  402508:	bd38      	pop	{r3, r4, r5, pc}
  40250a:	bf00      	nop
  40250c:	00400e99 	.word	0x00400e99
  402510:	20400ad8 	.word	0x20400ad8
  402514:	20400ae0 	.word	0x20400ae0
  402518:	20400a68 	.word	0x20400a68
  40251c:	00400e4d 	.word	0x00400e4d
  402520:	20400a5c 	.word	0x20400a5c
  402524:	20400b5c 	.word	0x20400b5c
  402528:	20400b18 	.word	0x20400b18

0040252c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  40252c:	4b03      	ldr	r3, [pc, #12]	; (40253c <vTaskInternalSetTimeOutState+0x10>)
  40252e:	681b      	ldr	r3, [r3, #0]
  402530:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  402532:	4b03      	ldr	r3, [pc, #12]	; (402540 <vTaskInternalSetTimeOutState+0x14>)
  402534:	681b      	ldr	r3, [r3, #0]
  402536:	6043      	str	r3, [r0, #4]
  402538:	4770      	bx	lr
  40253a:	bf00      	nop
  40253c:	20400b14 	.word	0x20400b14
  402540:	20400b58 	.word	0x20400b58

00402544 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
  402544:	b1a8      	cbz	r0, 402572 <xTaskCheckForTimeOut+0x2e>
{
  402546:	b570      	push	{r4, r5, r6, lr}
  402548:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
  40254a:	b1e9      	cbz	r1, 402588 <xTaskCheckForTimeOut+0x44>
  40254c:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
  40254e:	4b1d      	ldr	r3, [pc, #116]	; (4025c4 <xTaskCheckForTimeOut+0x80>)
  402550:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  402552:	4b1d      	ldr	r3, [pc, #116]	; (4025c8 <xTaskCheckForTimeOut+0x84>)
  402554:	681a      	ldr	r2, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  402556:	6869      	ldr	r1, [r5, #4]
			if( *pxTicksToWait == portMAX_DELAY )
  402558:	6823      	ldr	r3, [r4, #0]
  40255a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40255e:	d02f      	beq.n	4025c0 <xTaskCheckForTimeOut+0x7c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  402560:	481a      	ldr	r0, [pc, #104]	; (4025cc <xTaskCheckForTimeOut+0x88>)
  402562:	6800      	ldr	r0, [r0, #0]
  402564:	682e      	ldr	r6, [r5, #0]
  402566:	4286      	cmp	r6, r0
  402568:	d019      	beq.n	40259e <xTaskCheckForTimeOut+0x5a>
  40256a:	428a      	cmp	r2, r1
  40256c:	d317      	bcc.n	40259e <xTaskCheckForTimeOut+0x5a>
			xReturn = pdTRUE;
  40256e:	2401      	movs	r4, #1
  402570:	e01b      	b.n	4025aa <xTaskCheckForTimeOut+0x66>
  402572:	f04f 0380 	mov.w	r3, #128	; 0x80
  402576:	b672      	cpsid	i
  402578:	f383 8811 	msr	BASEPRI, r3
  40257c:	f3bf 8f6f 	isb	sy
  402580:	f3bf 8f4f 	dsb	sy
  402584:	b662      	cpsie	i
  402586:	e7fe      	b.n	402586 <xTaskCheckForTimeOut+0x42>
  402588:	f04f 0380 	mov.w	r3, #128	; 0x80
  40258c:	b672      	cpsid	i
  40258e:	f383 8811 	msr	BASEPRI, r3
  402592:	f3bf 8f6f 	isb	sy
  402596:	f3bf 8f4f 	dsb	sy
  40259a:	b662      	cpsie	i
  40259c:	e7fe      	b.n	40259c <xTaskCheckForTimeOut+0x58>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  40259e:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
  4025a0:	429a      	cmp	r2, r3
  4025a2:	d306      	bcc.n	4025b2 <xTaskCheckForTimeOut+0x6e>
			*pxTicksToWait = 0;
  4025a4:	2300      	movs	r3, #0
  4025a6:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
  4025a8:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
  4025aa:	4b09      	ldr	r3, [pc, #36]	; (4025d0 <xTaskCheckForTimeOut+0x8c>)
  4025ac:	4798      	blx	r3
}
  4025ae:	4620      	mov	r0, r4
  4025b0:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait -= xElapsedTime;
  4025b2:	1a9b      	subs	r3, r3, r2
  4025b4:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
  4025b6:	4628      	mov	r0, r5
  4025b8:	4b06      	ldr	r3, [pc, #24]	; (4025d4 <xTaskCheckForTimeOut+0x90>)
  4025ba:	4798      	blx	r3
			xReturn = pdFALSE;
  4025bc:	2400      	movs	r4, #0
  4025be:	e7f4      	b.n	4025aa <xTaskCheckForTimeOut+0x66>
				xReturn = pdFALSE;
  4025c0:	2400      	movs	r4, #0
  4025c2:	e7f2      	b.n	4025aa <xTaskCheckForTimeOut+0x66>
  4025c4:	00400f95 	.word	0x00400f95
  4025c8:	20400b58 	.word	0x20400b58
  4025cc:	20400b14 	.word	0x20400b14
  4025d0:	00400fe1 	.word	0x00400fe1
  4025d4:	0040252d 	.word	0x0040252d

004025d8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  4025d8:	2201      	movs	r2, #1
  4025da:	4b01      	ldr	r3, [pc, #4]	; (4025e0 <vTaskMissedYield+0x8>)
  4025dc:	601a      	str	r2, [r3, #0]
  4025de:	4770      	bx	lr
  4025e0:	20400b5c 	.word	0x20400b5c

004025e4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
  4025e4:	4b05      	ldr	r3, [pc, #20]	; (4025fc <xTaskGetSchedulerState+0x18>)
  4025e6:	681b      	ldr	r3, [r3, #0]
  4025e8:	b133      	cbz	r3, 4025f8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4025ea:	4b05      	ldr	r3, [pc, #20]	; (402600 <xTaskGetSchedulerState+0x1c>)
  4025ec:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
  4025ee:	2b00      	cmp	r3, #0
  4025f0:	bf0c      	ite	eq
  4025f2:	2002      	moveq	r0, #2
  4025f4:	2000      	movne	r0, #0
  4025f6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  4025f8:	2001      	movs	r0, #1
	}
  4025fa:	4770      	bx	lr
  4025fc:	20400b2c 	.word	0x20400b2c
  402600:	20400ad8 	.word	0x20400ad8

00402604 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
  402604:	2800      	cmp	r0, #0
  402606:	d050      	beq.n	4026aa <xTaskPriorityInherit+0xa6>
	{
  402608:	b538      	push	{r3, r4, r5, lr}
  40260a:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
  40260c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  40260e:	4928      	ldr	r1, [pc, #160]	; (4026b0 <xTaskPriorityInherit+0xac>)
  402610:	6809      	ldr	r1, [r1, #0]
  402612:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402614:	428a      	cmp	r2, r1
  402616:	d23f      	bcs.n	402698 <xTaskPriorityInherit+0x94>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  402618:	6981      	ldr	r1, [r0, #24]
  40261a:	2900      	cmp	r1, #0
  40261c:	db05      	blt.n	40262a <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40261e:	4924      	ldr	r1, [pc, #144]	; (4026b0 <xTaskPriorityInherit+0xac>)
  402620:	6809      	ldr	r1, [r1, #0]
  402622:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402624:	f1c1 0105 	rsb	r1, r1, #5
  402628:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
  40262a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40262e:	4921      	ldr	r1, [pc, #132]	; (4026b4 <xTaskPriorityInherit+0xb0>)
  402630:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  402634:	6961      	ldr	r1, [r4, #20]
  402636:	4291      	cmp	r1, r2
  402638:	d005      	beq.n	402646 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
  40263a:	4a1d      	ldr	r2, [pc, #116]	; (4026b0 <xTaskPriorityInherit+0xac>)
  40263c:	6812      	ldr	r2, [r2, #0]
  40263e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  402640:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
  402642:	2001      	movs	r0, #1
  402644:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  402646:	1d25      	adds	r5, r4, #4
  402648:	4628      	mov	r0, r5
  40264a:	4b1b      	ldr	r3, [pc, #108]	; (4026b8 <xTaskPriorityInherit+0xb4>)
  40264c:	4798      	blx	r3
  40264e:	b970      	cbnz	r0, 40266e <xTaskPriorityInherit+0x6a>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
  402650:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402652:	eb02 0382 	add.w	r3, r2, r2, lsl #2
  402656:	009b      	lsls	r3, r3, #2
  402658:	4916      	ldr	r1, [pc, #88]	; (4026b4 <xTaskPriorityInherit+0xb0>)
  40265a:	58cb      	ldr	r3, [r1, r3]
  40265c:	b93b      	cbnz	r3, 40266e <xTaskPriorityInherit+0x6a>
  40265e:	4817      	ldr	r0, [pc, #92]	; (4026bc <xTaskPriorityInherit+0xb8>)
  402660:	6803      	ldr	r3, [r0, #0]
  402662:	2101      	movs	r1, #1
  402664:	fa01 f202 	lsl.w	r2, r1, r2
  402668:	ea23 0202 	bic.w	r2, r3, r2
  40266c:	6002      	str	r2, [r0, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
  40266e:	4b10      	ldr	r3, [pc, #64]	; (4026b0 <xTaskPriorityInherit+0xac>)
  402670:	681b      	ldr	r3, [r3, #0]
  402672:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  402674:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
  402676:	4a11      	ldr	r2, [pc, #68]	; (4026bc <xTaskPriorityInherit+0xb8>)
  402678:	6811      	ldr	r1, [r2, #0]
  40267a:	2401      	movs	r4, #1
  40267c:	fa04 f300 	lsl.w	r3, r4, r0
  402680:	430b      	orrs	r3, r1
  402682:	6013      	str	r3, [r2, #0]
  402684:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402688:	4629      	mov	r1, r5
  40268a:	4b0a      	ldr	r3, [pc, #40]	; (4026b4 <xTaskPriorityInherit+0xb0>)
  40268c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402690:	4b0b      	ldr	r3, [pc, #44]	; (4026c0 <xTaskPriorityInherit+0xbc>)
  402692:	4798      	blx	r3
				xReturn = pdTRUE;
  402694:	4620      	mov	r0, r4
  402696:	bd38      	pop	{r3, r4, r5, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
  402698:	4a05      	ldr	r2, [pc, #20]	; (4026b0 <xTaskPriorityInherit+0xac>)
  40269a:	6812      	ldr	r2, [r2, #0]
  40269c:	6c80      	ldr	r0, [r0, #72]	; 0x48
  40269e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  4026a0:	4298      	cmp	r0, r3
  4026a2:	bf2c      	ite	cs
  4026a4:	2000      	movcs	r0, #0
  4026a6:	2001      	movcc	r0, #1
  4026a8:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  4026aa:	2000      	movs	r0, #0
		return xReturn;
  4026ac:	4770      	bx	lr
  4026ae:	bf00      	nop
  4026b0:	20400a5c 	.word	0x20400a5c
  4026b4:	20400a68 	.word	0x20400a68
  4026b8:	00400e99 	.word	0x00400e99
  4026bc:	20400ae0 	.word	0x20400ae0
  4026c0:	00400e4d 	.word	0x00400e4d

004026c4 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
  4026c4:	2800      	cmp	r0, #0
  4026c6:	d04d      	beq.n	402764 <xTaskPriorityDisinherit+0xa0>
	{
  4026c8:	b538      	push	{r3, r4, r5, lr}
  4026ca:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
  4026cc:	4a27      	ldr	r2, [pc, #156]	; (40276c <xTaskPriorityDisinherit+0xa8>)
  4026ce:	6812      	ldr	r2, [r2, #0]
  4026d0:	4290      	cmp	r0, r2
  4026d2:	d00a      	beq.n	4026ea <xTaskPriorityDisinherit+0x26>
  4026d4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026d8:	b672      	cpsid	i
  4026da:	f383 8811 	msr	BASEPRI, r3
  4026de:	f3bf 8f6f 	isb	sy
  4026e2:	f3bf 8f4f 	dsb	sy
  4026e6:	b662      	cpsie	i
  4026e8:	e7fe      	b.n	4026e8 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
  4026ea:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  4026ec:	b952      	cbnz	r2, 402704 <xTaskPriorityDisinherit+0x40>
  4026ee:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026f2:	b672      	cpsid	i
  4026f4:	f383 8811 	msr	BASEPRI, r3
  4026f8:	f3bf 8f6f 	isb	sy
  4026fc:	f3bf 8f4f 	dsb	sy
  402700:	b662      	cpsie	i
  402702:	e7fe      	b.n	402702 <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  402704:	3a01      	subs	r2, #1
  402706:	64c2      	str	r2, [r0, #76]	; 0x4c
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  402708:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  40270a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  40270c:	4288      	cmp	r0, r1
  40270e:	d02b      	beq.n	402768 <xTaskPriorityDisinherit+0xa4>
  402710:	bb52      	cbnz	r2, 402768 <xTaskPriorityDisinherit+0xa4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  402712:	1d25      	adds	r5, r4, #4
  402714:	4628      	mov	r0, r5
  402716:	4b16      	ldr	r3, [pc, #88]	; (402770 <xTaskPriorityDisinherit+0xac>)
  402718:	4798      	blx	r3
  40271a:	b968      	cbnz	r0, 402738 <xTaskPriorityDisinherit+0x74>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  40271c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  40271e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  402722:	009b      	lsls	r3, r3, #2
  402724:	4a13      	ldr	r2, [pc, #76]	; (402774 <xTaskPriorityDisinherit+0xb0>)
  402726:	58d3      	ldr	r3, [r2, r3]
  402728:	b933      	cbnz	r3, 402738 <xTaskPriorityDisinherit+0x74>
  40272a:	4813      	ldr	r0, [pc, #76]	; (402778 <xTaskPriorityDisinherit+0xb4>)
  40272c:	6803      	ldr	r3, [r0, #0]
  40272e:	2201      	movs	r2, #1
  402730:	408a      	lsls	r2, r1
  402732:	ea23 0302 	bic.w	r3, r3, r2
  402736:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  402738:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  40273a:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40273c:	f1c0 0305 	rsb	r3, r0, #5
  402740:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  402742:	4a0d      	ldr	r2, [pc, #52]	; (402778 <xTaskPriorityDisinherit+0xb4>)
  402744:	6811      	ldr	r1, [r2, #0]
  402746:	2401      	movs	r4, #1
  402748:	fa04 f300 	lsl.w	r3, r4, r0
  40274c:	430b      	orrs	r3, r1
  40274e:	6013      	str	r3, [r2, #0]
  402750:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402754:	4629      	mov	r1, r5
  402756:	4b07      	ldr	r3, [pc, #28]	; (402774 <xTaskPriorityDisinherit+0xb0>)
  402758:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40275c:	4b07      	ldr	r3, [pc, #28]	; (40277c <xTaskPriorityDisinherit+0xb8>)
  40275e:	4798      	blx	r3
					xReturn = pdTRUE;
  402760:	4620      	mov	r0, r4
  402762:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  402764:	2000      	movs	r0, #0
  402766:	4770      	bx	lr
  402768:	2000      	movs	r0, #0
	}
  40276a:	bd38      	pop	{r3, r4, r5, pc}
  40276c:	20400a5c 	.word	0x20400a5c
  402770:	00400e99 	.word	0x00400e99
  402774:	20400a68 	.word	0x20400a68
  402778:	20400ae0 	.word	0x20400ae0
  40277c:	00400e4d 	.word	0x00400e4d

00402780 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
  402780:	2800      	cmp	r0, #0
  402782:	d058      	beq.n	402836 <vTaskPriorityDisinheritAfterTimeout+0xb6>
	{
  402784:	b538      	push	{r3, r4, r5, lr}
  402786:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
  402788:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
  40278a:	b950      	cbnz	r0, 4027a2 <vTaskPriorityDisinheritAfterTimeout+0x22>
  40278c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402790:	b672      	cpsid	i
  402792:	f383 8811 	msr	BASEPRI, r3
  402796:	f3bf 8f6f 	isb	sy
  40279a:	f3bf 8f4f 	dsb	sy
  40279e:	b662      	cpsie	i
  4027a0:	e7fe      	b.n	4027a0 <vTaskPriorityDisinheritAfterTimeout+0x20>
  4027a2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  4027a4:	428a      	cmp	r2, r1
  4027a6:	bf38      	it	cc
  4027a8:	460a      	movcc	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
  4027aa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
  4027ac:	2801      	cmp	r0, #1
  4027ae:	d141      	bne.n	402834 <vTaskPriorityDisinheritAfterTimeout+0xb4>
  4027b0:	4291      	cmp	r1, r2
  4027b2:	d03f      	beq.n	402834 <vTaskPriorityDisinheritAfterTimeout+0xb4>
					configASSERT( pxTCB != pxCurrentTCB );
  4027b4:	4820      	ldr	r0, [pc, #128]	; (402838 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
  4027b6:	6800      	ldr	r0, [r0, #0]
  4027b8:	4284      	cmp	r4, r0
  4027ba:	d10a      	bne.n	4027d2 <vTaskPriorityDisinheritAfterTimeout+0x52>
  4027bc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4027c0:	b672      	cpsid	i
  4027c2:	f383 8811 	msr	BASEPRI, r3
  4027c6:	f3bf 8f6f 	isb	sy
  4027ca:	f3bf 8f4f 	dsb	sy
  4027ce:	b662      	cpsie	i
  4027d0:	e7fe      	b.n	4027d0 <vTaskPriorityDisinheritAfterTimeout+0x50>
					pxTCB->uxPriority = uxPriorityToUse;
  4027d2:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  4027d4:	69a0      	ldr	r0, [r4, #24]
  4027d6:	2800      	cmp	r0, #0
  4027d8:	db02      	blt.n	4027e0 <vTaskPriorityDisinheritAfterTimeout+0x60>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4027da:	f1c2 0205 	rsb	r2, r2, #5
  4027de:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
  4027e0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4027e4:	4a15      	ldr	r2, [pc, #84]	; (40283c <vTaskPriorityDisinheritAfterTimeout+0xbc>)
  4027e6:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  4027ea:	6962      	ldr	r2, [r4, #20]
  4027ec:	428a      	cmp	r2, r1
  4027ee:	d121      	bne.n	402834 <vTaskPriorityDisinheritAfterTimeout+0xb4>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  4027f0:	1d25      	adds	r5, r4, #4
  4027f2:	4628      	mov	r0, r5
  4027f4:	4b12      	ldr	r3, [pc, #72]	; (402840 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
  4027f6:	4798      	blx	r3
  4027f8:	b968      	cbnz	r0, 402816 <vTaskPriorityDisinheritAfterTimeout+0x96>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4027fa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  4027fc:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  402800:	009b      	lsls	r3, r3, #2
  402802:	4a0e      	ldr	r2, [pc, #56]	; (40283c <vTaskPriorityDisinheritAfterTimeout+0xbc>)
  402804:	58d3      	ldr	r3, [r2, r3]
  402806:	b933      	cbnz	r3, 402816 <vTaskPriorityDisinheritAfterTimeout+0x96>
  402808:	480e      	ldr	r0, [pc, #56]	; (402844 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
  40280a:	6803      	ldr	r3, [r0, #0]
  40280c:	2201      	movs	r2, #1
  40280e:	408a      	lsls	r2, r1
  402810:	ea23 0302 	bic.w	r3, r3, r2
  402814:	6003      	str	r3, [r0, #0]
						prvAddTaskToReadyList( pxTCB );
  402816:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402818:	4a0a      	ldr	r2, [pc, #40]	; (402844 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
  40281a:	6811      	ldr	r1, [r2, #0]
  40281c:	2301      	movs	r3, #1
  40281e:	4083      	lsls	r3, r0
  402820:	430b      	orrs	r3, r1
  402822:	6013      	str	r3, [r2, #0]
  402824:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402828:	4629      	mov	r1, r5
  40282a:	4b04      	ldr	r3, [pc, #16]	; (40283c <vTaskPriorityDisinheritAfterTimeout+0xbc>)
  40282c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402830:	4b05      	ldr	r3, [pc, #20]	; (402848 <vTaskPriorityDisinheritAfterTimeout+0xc8>)
  402832:	4798      	blx	r3
  402834:	bd38      	pop	{r3, r4, r5, pc}
  402836:	4770      	bx	lr
  402838:	20400a5c 	.word	0x20400a5c
  40283c:	20400a68 	.word	0x20400a68
  402840:	00400e99 	.word	0x00400e99
  402844:	20400ae0 	.word	0x20400ae0
  402848:	00400e4d 	.word	0x00400e4d

0040284c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
  40284c:	4b05      	ldr	r3, [pc, #20]	; (402864 <pvTaskIncrementMutexHeldCount+0x18>)
  40284e:	681b      	ldr	r3, [r3, #0]
  402850:	b123      	cbz	r3, 40285c <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
  402852:	4b04      	ldr	r3, [pc, #16]	; (402864 <pvTaskIncrementMutexHeldCount+0x18>)
  402854:	681a      	ldr	r2, [r3, #0]
  402856:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  402858:	3301      	adds	r3, #1
  40285a:	64d3      	str	r3, [r2, #76]	; 0x4c
		return pxCurrentTCB;
  40285c:	4b01      	ldr	r3, [pc, #4]	; (402864 <pvTaskIncrementMutexHeldCount+0x18>)
  40285e:	6818      	ldr	r0, [r3, #0]
	}
  402860:	4770      	bx	lr
  402862:	bf00      	nop
  402864:	20400a5c 	.word	0x20400a5c

00402868 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  402868:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  40286a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  40286c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  40286e:	4291      	cmp	r1, r2
  402870:	d80c      	bhi.n	40288c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402872:	1ad2      	subs	r2, r2, r3
  402874:	6983      	ldr	r3, [r0, #24]
  402876:	429a      	cmp	r2, r3
  402878:	d301      	bcc.n	40287e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  40287a:	2001      	movs	r0, #1
  40287c:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  40287e:	1d01      	adds	r1, r0, #4
  402880:	4b09      	ldr	r3, [pc, #36]	; (4028a8 <prvInsertTimerInActiveList+0x40>)
  402882:	6818      	ldr	r0, [r3, #0]
  402884:	4b09      	ldr	r3, [pc, #36]	; (4028ac <prvInsertTimerInActiveList+0x44>)
  402886:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402888:	2000      	movs	r0, #0
  40288a:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  40288c:	429a      	cmp	r2, r3
  40288e:	d203      	bcs.n	402898 <prvInsertTimerInActiveList+0x30>
  402890:	4299      	cmp	r1, r3
  402892:	d301      	bcc.n	402898 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  402894:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  402896:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402898:	1d01      	adds	r1, r0, #4
  40289a:	4b05      	ldr	r3, [pc, #20]	; (4028b0 <prvInsertTimerInActiveList+0x48>)
  40289c:	6818      	ldr	r0, [r3, #0]
  40289e:	4b03      	ldr	r3, [pc, #12]	; (4028ac <prvInsertTimerInActiveList+0x44>)
  4028a0:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  4028a2:	2000      	movs	r0, #0
  4028a4:	bd08      	pop	{r3, pc}
  4028a6:	bf00      	nop
  4028a8:	20400b64 	.word	0x20400b64
  4028ac:	00400e65 	.word	0x00400e65
  4028b0:	20400b60 	.word	0x20400b60

004028b4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  4028b4:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  4028b6:	4b10      	ldr	r3, [pc, #64]	; (4028f8 <prvCheckForValidListAndQueue+0x44>)
  4028b8:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  4028ba:	4b10      	ldr	r3, [pc, #64]	; (4028fc <prvCheckForValidListAndQueue+0x48>)
  4028bc:	681b      	ldr	r3, [r3, #0]
  4028be:	b113      	cbz	r3, 4028c6 <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  4028c0:	4b0f      	ldr	r3, [pc, #60]	; (402900 <prvCheckForValidListAndQueue+0x4c>)
  4028c2:	4798      	blx	r3
  4028c4:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  4028c6:	4d0f      	ldr	r5, [pc, #60]	; (402904 <prvCheckForValidListAndQueue+0x50>)
  4028c8:	4628      	mov	r0, r5
  4028ca:	4e0f      	ldr	r6, [pc, #60]	; (402908 <prvCheckForValidListAndQueue+0x54>)
  4028cc:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  4028ce:	4c0f      	ldr	r4, [pc, #60]	; (40290c <prvCheckForValidListAndQueue+0x58>)
  4028d0:	4620      	mov	r0, r4
  4028d2:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  4028d4:	4b0e      	ldr	r3, [pc, #56]	; (402910 <prvCheckForValidListAndQueue+0x5c>)
  4028d6:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  4028d8:	4b0e      	ldr	r3, [pc, #56]	; (402914 <prvCheckForValidListAndQueue+0x60>)
  4028da:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  4028dc:	2200      	movs	r2, #0
  4028de:	2110      	movs	r1, #16
  4028e0:	2005      	movs	r0, #5
  4028e2:	4b0d      	ldr	r3, [pc, #52]	; (402918 <prvCheckForValidListAndQueue+0x64>)
  4028e4:	4798      	blx	r3
  4028e6:	4b05      	ldr	r3, [pc, #20]	; (4028fc <prvCheckForValidListAndQueue+0x48>)
  4028e8:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
  4028ea:	2800      	cmp	r0, #0
  4028ec:	d0e8      	beq.n	4028c0 <prvCheckForValidListAndQueue+0xc>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  4028ee:	490b      	ldr	r1, [pc, #44]	; (40291c <prvCheckForValidListAndQueue+0x68>)
  4028f0:	4b0b      	ldr	r3, [pc, #44]	; (402920 <prvCheckForValidListAndQueue+0x6c>)
  4028f2:	4798      	blx	r3
  4028f4:	e7e4      	b.n	4028c0 <prvCheckForValidListAndQueue+0xc>
  4028f6:	bf00      	nop
  4028f8:	00400f95 	.word	0x00400f95
  4028fc:	20400b94 	.word	0x20400b94
  402900:	00400fe1 	.word	0x00400fe1
  402904:	20400b68 	.word	0x20400b68
  402908:	00400e31 	.word	0x00400e31
  40290c:	20400b7c 	.word	0x20400b7c
  402910:	20400b60 	.word	0x20400b60
  402914:	20400b64 	.word	0x20400b64
  402918:	00401501 	.word	0x00401501
  40291c:	0040b778 	.word	0x0040b778
  402920:	00401bed 	.word	0x00401bed

00402924 <xTimerCreateTimerTask>:
{
  402924:	b510      	push	{r4, lr}
  402926:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
  402928:	4b0e      	ldr	r3, [pc, #56]	; (402964 <xTimerCreateTimerTask+0x40>)
  40292a:	4798      	blx	r3
	if( xTimerQueue != NULL )
  40292c:	4b0e      	ldr	r3, [pc, #56]	; (402968 <xTimerCreateTimerTask+0x44>)
  40292e:	681b      	ldr	r3, [r3, #0]
  402930:	b16b      	cbz	r3, 40294e <xTimerCreateTimerTask+0x2a>
			xReturn = xTaskCreate(	prvTimerTask,
  402932:	4b0e      	ldr	r3, [pc, #56]	; (40296c <xTimerCreateTimerTask+0x48>)
  402934:	9301      	str	r3, [sp, #4]
  402936:	2304      	movs	r3, #4
  402938:	9300      	str	r3, [sp, #0]
  40293a:	2300      	movs	r3, #0
  40293c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  402940:	490b      	ldr	r1, [pc, #44]	; (402970 <xTimerCreateTimerTask+0x4c>)
  402942:	480c      	ldr	r0, [pc, #48]	; (402974 <xTimerCreateTimerTask+0x50>)
  402944:	4c0c      	ldr	r4, [pc, #48]	; (402978 <xTimerCreateTimerTask+0x54>)
  402946:	47a0      	blx	r4
	configASSERT( xReturn );
  402948:	b108      	cbz	r0, 40294e <xTimerCreateTimerTask+0x2a>
}
  40294a:	b002      	add	sp, #8
  40294c:	bd10      	pop	{r4, pc}
  40294e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402952:	b672      	cpsid	i
  402954:	f383 8811 	msr	BASEPRI, r3
  402958:	f3bf 8f6f 	isb	sy
  40295c:	f3bf 8f4f 	dsb	sy
  402960:	b662      	cpsie	i
  402962:	e7fe      	b.n	402962 <xTimerCreateTimerTask+0x3e>
  402964:	004028b5 	.word	0x004028b5
  402968:	20400b94 	.word	0x20400b94
  40296c:	20400b98 	.word	0x20400b98
  402970:	0040b780 	.word	0x0040b780
  402974:	00402aa5 	.word	0x00402aa5
  402978:	00401ddd 	.word	0x00401ddd

0040297c <xTimerGenericCommand>:
	configASSERT( xTimer );
  40297c:	b1d8      	cbz	r0, 4029b6 <xTimerGenericCommand+0x3a>
{
  40297e:	b530      	push	{r4, r5, lr}
  402980:	b085      	sub	sp, #20
  402982:	4615      	mov	r5, r2
  402984:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  402986:	4a15      	ldr	r2, [pc, #84]	; (4029dc <xTimerGenericCommand+0x60>)
  402988:	6810      	ldr	r0, [r2, #0]
  40298a:	b320      	cbz	r0, 4029d6 <xTimerGenericCommand+0x5a>
  40298c:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  40298e:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  402990:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  402992:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  402994:	2905      	cmp	r1, #5
  402996:	dc19      	bgt.n	4029cc <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  402998:	4b11      	ldr	r3, [pc, #68]	; (4029e0 <xTimerGenericCommand+0x64>)
  40299a:	4798      	blx	r3
  40299c:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  40299e:	f04f 0300 	mov.w	r3, #0
  4029a2:	bf0c      	ite	eq
  4029a4:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  4029a6:	461a      	movne	r2, r3
  4029a8:	4669      	mov	r1, sp
  4029aa:	480c      	ldr	r0, [pc, #48]	; (4029dc <xTimerGenericCommand+0x60>)
  4029ac:	6800      	ldr	r0, [r0, #0]
  4029ae:	4c0d      	ldr	r4, [pc, #52]	; (4029e4 <xTimerGenericCommand+0x68>)
  4029b0:	47a0      	blx	r4
}
  4029b2:	b005      	add	sp, #20
  4029b4:	bd30      	pop	{r4, r5, pc}
  4029b6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4029ba:	b672      	cpsid	i
  4029bc:	f383 8811 	msr	BASEPRI, r3
  4029c0:	f3bf 8f6f 	isb	sy
  4029c4:	f3bf 8f4f 	dsb	sy
  4029c8:	b662      	cpsie	i
  4029ca:	e7fe      	b.n	4029ca <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  4029cc:	2300      	movs	r3, #0
  4029ce:	4669      	mov	r1, sp
  4029d0:	4c05      	ldr	r4, [pc, #20]	; (4029e8 <xTimerGenericCommand+0x6c>)
  4029d2:	47a0      	blx	r4
  4029d4:	e7ed      	b.n	4029b2 <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  4029d6:	2000      	movs	r0, #0
	return xReturn;
  4029d8:	e7eb      	b.n	4029b2 <xTimerGenericCommand+0x36>
  4029da:	bf00      	nop
  4029dc:	20400b94 	.word	0x20400b94
  4029e0:	004025e5 	.word	0x004025e5
  4029e4:	0040155d 	.word	0x0040155d
  4029e8:	0040174d 	.word	0x0040174d

004029ec <prvSampleTimeNow>:
{
  4029ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4029f0:	b082      	sub	sp, #8
  4029f2:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  4029f4:	4b24      	ldr	r3, [pc, #144]	; (402a88 <prvSampleTimeNow+0x9c>)
  4029f6:	4798      	blx	r3
  4029f8:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  4029fa:	4b24      	ldr	r3, [pc, #144]	; (402a8c <prvSampleTimeNow+0xa0>)
  4029fc:	681b      	ldr	r3, [r3, #0]
  4029fe:	4298      	cmp	r0, r3
  402a00:	d31b      	bcc.n	402a3a <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  402a02:	2300      	movs	r3, #0
  402a04:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  402a08:	4b20      	ldr	r3, [pc, #128]	; (402a8c <prvSampleTimeNow+0xa0>)
  402a0a:	601f      	str	r7, [r3, #0]
}
  402a0c:	4638      	mov	r0, r7
  402a0e:	b002      	add	sp, #8
  402a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402a14:	2100      	movs	r1, #0
  402a16:	9100      	str	r1, [sp, #0]
  402a18:	460b      	mov	r3, r1
  402a1a:	4652      	mov	r2, sl
  402a1c:	4620      	mov	r0, r4
  402a1e:	4c1c      	ldr	r4, [pc, #112]	; (402a90 <prvSampleTimeNow+0xa4>)
  402a20:	47a0      	blx	r4
				configASSERT( xResult );
  402a22:	b960      	cbnz	r0, 402a3e <prvSampleTimeNow+0x52>
  402a24:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a28:	b672      	cpsid	i
  402a2a:	f383 8811 	msr	BASEPRI, r3
  402a2e:	f3bf 8f6f 	isb	sy
  402a32:	f3bf 8f4f 	dsb	sy
  402a36:	b662      	cpsie	i
  402a38:	e7fe      	b.n	402a38 <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402a3a:	4d16      	ldr	r5, [pc, #88]	; (402a94 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402a3c:	4e16      	ldr	r6, [pc, #88]	; (402a98 <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402a3e:	682b      	ldr	r3, [r5, #0]
  402a40:	681a      	ldr	r2, [r3, #0]
  402a42:	b1c2      	cbz	r2, 402a76 <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402a44:	68db      	ldr	r3, [r3, #12]
  402a46:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402a4a:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402a4c:	f104 0904 	add.w	r9, r4, #4
  402a50:	4648      	mov	r0, r9
  402a52:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402a54:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402a56:	4620      	mov	r0, r4
  402a58:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402a5a:	69e3      	ldr	r3, [r4, #28]
  402a5c:	2b01      	cmp	r3, #1
  402a5e:	d1ee      	bne.n	402a3e <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  402a60:	69a3      	ldr	r3, [r4, #24]
  402a62:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  402a64:	459a      	cmp	sl, r3
  402a66:	d2d5      	bcs.n	402a14 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  402a68:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402a6a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402a6c:	4649      	mov	r1, r9
  402a6e:	6828      	ldr	r0, [r5, #0]
  402a70:	4b0a      	ldr	r3, [pc, #40]	; (402a9c <prvSampleTimeNow+0xb0>)
  402a72:	4798      	blx	r3
  402a74:	e7e3      	b.n	402a3e <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  402a76:	4a0a      	ldr	r2, [pc, #40]	; (402aa0 <prvSampleTimeNow+0xb4>)
  402a78:	6810      	ldr	r0, [r2, #0]
  402a7a:	4906      	ldr	r1, [pc, #24]	; (402a94 <prvSampleTimeNow+0xa8>)
  402a7c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  402a7e:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  402a80:	2301      	movs	r3, #1
  402a82:	f8c8 3000 	str.w	r3, [r8]
  402a86:	e7bf      	b.n	402a08 <prvSampleTimeNow+0x1c>
  402a88:	00402079 	.word	0x00402079
  402a8c:	20400b90 	.word	0x20400b90
  402a90:	0040297d 	.word	0x0040297d
  402a94:	20400b60 	.word	0x20400b60
  402a98:	00400e99 	.word	0x00400e99
  402a9c:	00400e65 	.word	0x00400e65
  402aa0:	20400b64 	.word	0x20400b64

00402aa4 <prvTimerTask>:
{
  402aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402aa8:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402aaa:	4e75      	ldr	r6, [pc, #468]	; (402c80 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  402aac:	4f75      	ldr	r7, [pc, #468]	; (402c84 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  402aae:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 402cac <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402ab2:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 402cb0 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402ab6:	6833      	ldr	r3, [r6, #0]
  402ab8:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  402aba:	2a00      	cmp	r2, #0
  402abc:	f000 80ce 	beq.w	402c5c <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402ac0:	68db      	ldr	r3, [r3, #12]
  402ac2:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  402ac4:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402ac6:	a804      	add	r0, sp, #16
  402ac8:	4b6f      	ldr	r3, [pc, #444]	; (402c88 <prvTimerTask+0x1e4>)
  402aca:	4798      	blx	r3
  402acc:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402ace:	9b04      	ldr	r3, [sp, #16]
  402ad0:	2b00      	cmp	r3, #0
  402ad2:	d144      	bne.n	402b5e <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402ad4:	42a0      	cmp	r0, r4
  402ad6:	d212      	bcs.n	402afe <prvTimerTask+0x5a>
  402ad8:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  402ada:	1b61      	subs	r1, r4, r5
  402adc:	4b6b      	ldr	r3, [pc, #428]	; (402c8c <prvTimerTask+0x1e8>)
  402ade:	6818      	ldr	r0, [r3, #0]
  402ae0:	4b6b      	ldr	r3, [pc, #428]	; (402c90 <prvTimerTask+0x1ec>)
  402ae2:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402ae4:	4b6b      	ldr	r3, [pc, #428]	; (402c94 <prvTimerTask+0x1f0>)
  402ae6:	4798      	blx	r3
  402ae8:	2800      	cmp	r0, #0
  402aea:	d13a      	bne.n	402b62 <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  402aec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402af0:	f8c9 3000 	str.w	r3, [r9]
  402af4:	f3bf 8f4f 	dsb	sy
  402af8:	f3bf 8f6f 	isb	sy
  402afc:	e031      	b.n	402b62 <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  402afe:	4b65      	ldr	r3, [pc, #404]	; (402c94 <prvTimerTask+0x1f0>)
  402b00:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402b02:	6833      	ldr	r3, [r6, #0]
  402b04:	68db      	ldr	r3, [r3, #12]
  402b06:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402b0a:	f10a 0004 	add.w	r0, sl, #4
  402b0e:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402b10:	f8da 301c 	ldr.w	r3, [sl, #28]
  402b14:	2b01      	cmp	r3, #1
  402b16:	d004      	beq.n	402b22 <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402b18:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  402b1c:	4650      	mov	r0, sl
  402b1e:	4798      	blx	r3
  402b20:	e01f      	b.n	402b62 <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
  402b22:	f8da 1018 	ldr.w	r1, [sl, #24]
  402b26:	4623      	mov	r3, r4
  402b28:	462a      	mov	r2, r5
  402b2a:	4421      	add	r1, r4
  402b2c:	4650      	mov	r0, sl
  402b2e:	4d5a      	ldr	r5, [pc, #360]	; (402c98 <prvTimerTask+0x1f4>)
  402b30:	47a8      	blx	r5
  402b32:	2800      	cmp	r0, #0
  402b34:	d0f0      	beq.n	402b18 <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402b36:	2100      	movs	r1, #0
  402b38:	9100      	str	r1, [sp, #0]
  402b3a:	460b      	mov	r3, r1
  402b3c:	4622      	mov	r2, r4
  402b3e:	4650      	mov	r0, sl
  402b40:	4c56      	ldr	r4, [pc, #344]	; (402c9c <prvTimerTask+0x1f8>)
  402b42:	47a0      	blx	r4
			configASSERT( xResult );
  402b44:	2800      	cmp	r0, #0
  402b46:	d1e7      	bne.n	402b18 <prvTimerTask+0x74>
  402b48:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b4c:	b672      	cpsid	i
  402b4e:	f383 8811 	msr	BASEPRI, r3
  402b52:	f3bf 8f6f 	isb	sy
  402b56:	f3bf 8f4f 	dsb	sy
  402b5a:	b662      	cpsie	i
  402b5c:	e7fe      	b.n	402b5c <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  402b5e:	4b4d      	ldr	r3, [pc, #308]	; (402c94 <prvTimerTask+0x1f0>)
  402b60:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402b62:	4d4a      	ldr	r5, [pc, #296]	; (402c8c <prvTimerTask+0x1e8>)
  402b64:	4c4e      	ldr	r4, [pc, #312]	; (402ca0 <prvTimerTask+0x1fc>)
  402b66:	e006      	b.n	402b76 <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  402b68:	9907      	ldr	r1, [sp, #28]
  402b6a:	9806      	ldr	r0, [sp, #24]
  402b6c:	9b05      	ldr	r3, [sp, #20]
  402b6e:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  402b70:	9b04      	ldr	r3, [sp, #16]
  402b72:	2b00      	cmp	r3, #0
  402b74:	da08      	bge.n	402b88 <prvTimerTask+0xe4>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402b76:	2200      	movs	r2, #0
  402b78:	a904      	add	r1, sp, #16
  402b7a:	6828      	ldr	r0, [r5, #0]
  402b7c:	47a0      	blx	r4
  402b7e:	2800      	cmp	r0, #0
  402b80:	d099      	beq.n	402ab6 <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  402b82:	9b04      	ldr	r3, [sp, #16]
  402b84:	2b00      	cmp	r3, #0
  402b86:	dbef      	blt.n	402b68 <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  402b88:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
  402b8c:	f8da 3014 	ldr.w	r3, [sl, #20]
  402b90:	b113      	cbz	r3, 402b98 <prvTimerTask+0xf4>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402b92:	f10a 0004 	add.w	r0, sl, #4
  402b96:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402b98:	a803      	add	r0, sp, #12
  402b9a:	4b3b      	ldr	r3, [pc, #236]	; (402c88 <prvTimerTask+0x1e4>)
  402b9c:	4798      	blx	r3
			switch( xMessage.xMessageID )
  402b9e:	9b04      	ldr	r3, [sp, #16]
  402ba0:	2b09      	cmp	r3, #9
  402ba2:	d8e8      	bhi.n	402b76 <prvTimerTask+0xd2>
  402ba4:	a201      	add	r2, pc, #4	; (adr r2, 402bac <prvTimerTask+0x108>)
  402ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402baa:	bf00      	nop
  402bac:	00402bd5 	.word	0x00402bd5
  402bb0:	00402bd5 	.word	0x00402bd5
  402bb4:	00402bd5 	.word	0x00402bd5
  402bb8:	00402b77 	.word	0x00402b77
  402bbc:	00402c29 	.word	0x00402c29
  402bc0:	00402c55 	.word	0x00402c55
  402bc4:	00402bd5 	.word	0x00402bd5
  402bc8:	00402bd5 	.word	0x00402bd5
  402bcc:	00402b77 	.word	0x00402b77
  402bd0:	00402c29 	.word	0x00402c29
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
  402bd4:	9c05      	ldr	r4, [sp, #20]
  402bd6:	f8da 1018 	ldr.w	r1, [sl, #24]
  402bda:	4623      	mov	r3, r4
  402bdc:	4602      	mov	r2, r0
  402bde:	4421      	add	r1, r4
  402be0:	4650      	mov	r0, sl
  402be2:	4c2d      	ldr	r4, [pc, #180]	; (402c98 <prvTimerTask+0x1f4>)
  402be4:	47a0      	blx	r4
  402be6:	2800      	cmp	r0, #0
  402be8:	d0bc      	beq.n	402b64 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402bea:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  402bee:	4650      	mov	r0, sl
  402bf0:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402bf2:	f8da 301c 	ldr.w	r3, [sl, #28]
  402bf6:	2b01      	cmp	r3, #1
  402bf8:	d1b4      	bne.n	402b64 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  402bfa:	f8da 2018 	ldr.w	r2, [sl, #24]
  402bfe:	2100      	movs	r1, #0
  402c00:	9100      	str	r1, [sp, #0]
  402c02:	460b      	mov	r3, r1
  402c04:	9805      	ldr	r0, [sp, #20]
  402c06:	4402      	add	r2, r0
  402c08:	4650      	mov	r0, sl
  402c0a:	4c24      	ldr	r4, [pc, #144]	; (402c9c <prvTimerTask+0x1f8>)
  402c0c:	47a0      	blx	r4
							configASSERT( xResult );
  402c0e:	2800      	cmp	r0, #0
  402c10:	d1a8      	bne.n	402b64 <prvTimerTask+0xc0>
  402c12:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c16:	b672      	cpsid	i
  402c18:	f383 8811 	msr	BASEPRI, r3
  402c1c:	f3bf 8f6f 	isb	sy
  402c20:	f3bf 8f4f 	dsb	sy
  402c24:	b662      	cpsie	i
  402c26:	e7fe      	b.n	402c26 <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  402c28:	9905      	ldr	r1, [sp, #20]
  402c2a:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  402c2e:	b131      	cbz	r1, 402c3e <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  402c30:	4603      	mov	r3, r0
  402c32:	4602      	mov	r2, r0
  402c34:	4401      	add	r1, r0
  402c36:	4650      	mov	r0, sl
  402c38:	4c17      	ldr	r4, [pc, #92]	; (402c98 <prvTimerTask+0x1f4>)
  402c3a:	47a0      	blx	r4
  402c3c:	e792      	b.n	402b64 <prvTimerTask+0xc0>
  402c3e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c42:	b672      	cpsid	i
  402c44:	f383 8811 	msr	BASEPRI, r3
  402c48:	f3bf 8f6f 	isb	sy
  402c4c:	f3bf 8f4f 	dsb	sy
  402c50:	b662      	cpsie	i
  402c52:	e7fe      	b.n	402c52 <prvTimerTask+0x1ae>
						vPortFree( pxTimer );
  402c54:	4650      	mov	r0, sl
  402c56:	4b13      	ldr	r3, [pc, #76]	; (402ca4 <prvTimerTask+0x200>)
  402c58:	4798      	blx	r3
  402c5a:	e783      	b.n	402b64 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  402c5c:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402c5e:	a804      	add	r0, sp, #16
  402c60:	4b09      	ldr	r3, [pc, #36]	; (402c88 <prvTimerTask+0x1e4>)
  402c62:	4798      	blx	r3
  402c64:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402c66:	9b04      	ldr	r3, [sp, #16]
  402c68:	2b00      	cmp	r3, #0
  402c6a:	f47f af78 	bne.w	402b5e <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  402c6e:	4b0e      	ldr	r3, [pc, #56]	; (402ca8 <prvTimerTask+0x204>)
  402c70:	681b      	ldr	r3, [r3, #0]
  402c72:	681a      	ldr	r2, [r3, #0]
  402c74:	fab2 f282 	clz	r2, r2
  402c78:	0952      	lsrs	r2, r2, #5
  402c7a:	2400      	movs	r4, #0
  402c7c:	e72d      	b.n	402ada <prvTimerTask+0x36>
  402c7e:	bf00      	nop
  402c80:	20400b60 	.word	0x20400b60
  402c84:	00402069 	.word	0x00402069
  402c88:	004029ed 	.word	0x004029ed
  402c8c:	20400b94 	.word	0x20400b94
  402c90:	00401c21 	.word	0x00401c21
  402c94:	004021cd 	.word	0x004021cd
  402c98:	00402869 	.word	0x00402869
  402c9c:	0040297d 	.word	0x0040297d
  402ca0:	00401861 	.word	0x00401861
  402ca4:	00401251 	.word	0x00401251
  402ca8:	20400b64 	.word	0x20400b64
  402cac:	e000ed04 	.word	0xe000ed04
  402cb0:	00400e99 	.word	0x00400e99

00402cb4 <FusionAhrsReset>:
 * @brief Resets the AHRS algorithm.  This is equivalent to reinitialising the
 * algorithm while maintaining the current settings.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsReset(FusionAhrs *const ahrs) {
    ahrs->quaternion = FUSION_IDENTITY_QUATERNION;
  402cb4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
  402cb8:	6103      	str	r3, [r0, #16]
  402cba:	2300      	movs	r3, #0
  402cbc:	6143      	str	r3, [r0, #20]
  402cbe:	6183      	str	r3, [r0, #24]
  402cc0:	61c3      	str	r3, [r0, #28]
    ahrs->accelerometer = FUSION_VECTOR_ZERO;
  402cc2:	6203      	str	r3, [r0, #32]
  402cc4:	6243      	str	r3, [r0, #36]	; 0x24
  402cc6:	6283      	str	r3, [r0, #40]	; 0x28
    ahrs->initialising = true;
  402cc8:	2201      	movs	r2, #1
  402cca:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
    ahrs->rampedGain = INITIAL_GAIN;
  402cce:	4a0a      	ldr	r2, [pc, #40]	; (402cf8 <FusionAhrsReset+0x44>)
  402cd0:	6302      	str	r2, [r0, #48]	; 0x30
    ahrs->halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
  402cd2:	6383      	str	r3, [r0, #56]	; 0x38
  402cd4:	63c3      	str	r3, [r0, #60]	; 0x3c
  402cd6:	6403      	str	r3, [r0, #64]	; 0x40
    ahrs->halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
  402cd8:	6443      	str	r3, [r0, #68]	; 0x44
  402cda:	6483      	str	r3, [r0, #72]	; 0x48
  402cdc:	64c3      	str	r3, [r0, #76]	; 0x4c
    ahrs->accelerometerIgnored = false;
  402cde:	2300      	movs	r3, #0
  402ce0:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    ahrs->accelerationRejectionTimer = 0;
  402ce4:	6543      	str	r3, [r0, #84]	; 0x54
    ahrs->accelerationRejectionTimeout = false;
  402ce6:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
    ahrs->magnetometerIgnored = false;
  402cea:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
    ahrs->magneticRejectionTimer = 0;
  402cee:	65c3      	str	r3, [r0, #92]	; 0x5c
    ahrs->magneticRejectionTimeout = false;
  402cf0:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
  402cf4:	4770      	bx	lr
  402cf6:	bf00      	nop
  402cf8:	41200000 	.word	0x41200000

00402cfc <FusionAhrsSetSettings>:
/**
 * @brief Sets the AHRS algorithm settings.
 * @param ahrs AHRS algorithm structure.
 * @param settings Settings.
 */
void FusionAhrsSetSettings(FusionAhrs *const ahrs, const FusionAhrsSettings *const settings) {
  402cfc:	b538      	push	{r3, r4, r5, lr}
  402cfe:	ed2d 8b02 	vpush	{d8}
  402d02:	4604      	mov	r4, r0
  402d04:	460d      	mov	r5, r1
    ahrs->settings.gain = settings->gain;
  402d06:	ed91 8a00 	vldr	s16, [r1]
  402d0a:	ed80 8a00 	vstr	s16, [r0]
    if ((settings->accelerationRejection == 0.0f) || (settings->rejectionTimeout == 0)) {
  402d0e:	edd1 7a01 	vldr	s15, [r1, #4]
  402d12:	eef5 7a40 	vcmp.f32	s15, #0.0
  402d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  402d1a:	d001      	beq.n	402d20 <FusionAhrsSetSettings+0x24>
  402d1c:	68cb      	ldr	r3, [r1, #12]
  402d1e:	bb03      	cbnz	r3, 402d62 <FusionAhrsSetSettings+0x66>
        ahrs->settings.accelerationRejection = FLT_MAX;
  402d20:	4b23      	ldr	r3, [pc, #140]	; (402db0 <FusionAhrsSetSettings+0xb4>)
  402d22:	6063      	str	r3, [r4, #4]
    } else {
        ahrs->settings.accelerationRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->accelerationRejection)), 2);
    }
    if ((settings->magneticRejection == 0.0f) || (settings->rejectionTimeout == 0)) {
  402d24:	edd5 7a02 	vldr	s15, [r5, #8]
  402d28:	eef5 7a40 	vcmp.f32	s15, #0.0
  402d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  402d30:	d001      	beq.n	402d36 <FusionAhrsSetSettings+0x3a>
  402d32:	68eb      	ldr	r3, [r5, #12]
  402d34:	bb43      	cbnz	r3, 402d88 <FusionAhrsSetSettings+0x8c>
        ahrs->settings.magneticRejection = FLT_MAX;
  402d36:	4b1e      	ldr	r3, [pc, #120]	; (402db0 <FusionAhrsSetSettings+0xb4>)
  402d38:	60a3      	str	r3, [r4, #8]
    } else {
        ahrs->settings.magneticRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->magneticRejection)), 2);
    }
    ahrs->settings.rejectionTimeout = settings->rejectionTimeout;
  402d3a:	68eb      	ldr	r3, [r5, #12]
  402d3c:	60e3      	str	r3, [r4, #12]
    if (ahrs->initialising == false) {
  402d3e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
  402d42:	b90b      	cbnz	r3, 402d48 <FusionAhrsSetSettings+0x4c>
        ahrs->rampedGain = ahrs->settings.gain;
  402d44:	ed84 8a0c 	vstr	s16, [r4, #48]	; 0x30
    }
    ahrs->rampedGainStep = (INITIAL_GAIN - ahrs->settings.gain) / INITIALISATION_PERIOD;
  402d48:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
  402d4c:	ee77 7ac8 	vsub.f32	s15, s15, s16
  402d50:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
  402d54:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  402d58:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
}
  402d5c:	ecbd 8b02 	vpop	{d8}
  402d60:	bd38      	pop	{r3, r4, r5, pc}
        ahrs->settings.accelerationRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->accelerationRejection)), 2);
  402d62:	ed9f 7a14 	vldr	s14, [pc, #80]	; 402db4 <FusionAhrsSetSettings+0xb8>
  402d66:	ee67 7a87 	vmul.f32	s15, s15, s14
  402d6a:	ee17 0a90 	vmov	r0, s15
  402d6e:	4b12      	ldr	r3, [pc, #72]	; (402db8 <FusionAhrsSetSettings+0xbc>)
  402d70:	4798      	blx	r3
  402d72:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
  402d76:	ee07 0a10 	vmov	s14, r0
  402d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
  402d7e:	ee67 7aa7 	vmul.f32	s15, s15, s15
  402d82:	edc4 7a01 	vstr	s15, [r4, #4]
  402d86:	e7cd      	b.n	402d24 <FusionAhrsSetSettings+0x28>
        ahrs->settings.magneticRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->magneticRejection)), 2);
  402d88:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 402db4 <FusionAhrsSetSettings+0xb8>
  402d8c:	ee67 7a87 	vmul.f32	s15, s15, s14
  402d90:	ee17 0a90 	vmov	r0, s15
  402d94:	4b08      	ldr	r3, [pc, #32]	; (402db8 <FusionAhrsSetSettings+0xbc>)
  402d96:	4798      	blx	r3
  402d98:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
  402d9c:	ee07 0a10 	vmov	s14, r0
  402da0:	ee67 7a27 	vmul.f32	s15, s14, s15
  402da4:	ee67 7aa7 	vmul.f32	s15, s15, s15
  402da8:	edc4 7a02 	vstr	s15, [r4, #8]
  402dac:	e7c5      	b.n	402d3a <FusionAhrsSetSettings+0x3e>
  402dae:	bf00      	nop
  402db0:	7f7fffff 	.word	0x7f7fffff
  402db4:	3c8efa35 	.word	0x3c8efa35
  402db8:	004040d9 	.word	0x004040d9

00402dbc <FusionAhrsInitialise>:
void FusionAhrsInitialise(FusionAhrs *const ahrs) {
  402dbc:	b530      	push	{r4, r5, lr}
  402dbe:	b085      	sub	sp, #20
  402dc0:	4605      	mov	r5, r0
    const FusionAhrsSettings settings = {
  402dc2:	4b06      	ldr	r3, [pc, #24]	; (402ddc <FusionAhrsInitialise+0x20>)
  402dc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  402dc6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    FusionAhrsSetSettings(ahrs, &settings);
  402dca:	4669      	mov	r1, sp
  402dcc:	4628      	mov	r0, r5
  402dce:	4b04      	ldr	r3, [pc, #16]	; (402de0 <FusionAhrsInitialise+0x24>)
  402dd0:	4798      	blx	r3
    FusionAhrsReset(ahrs);
  402dd2:	4628      	mov	r0, r5
  402dd4:	4b03      	ldr	r3, [pc, #12]	; (402de4 <FusionAhrsInitialise+0x28>)
  402dd6:	4798      	blx	r3
}
  402dd8:	b005      	add	sp, #20
  402dda:	bd30      	pop	{r4, r5, pc}
  402ddc:	0040b788 	.word	0x0040b788
  402de0:	00402cfd 	.word	0x00402cfd
  402de4:	00402cb5 	.word	0x00402cb5

00402de8 <FusionAhrsGetQuaternion>:
/**
 * @brief Returns the quaternion describing the sensor relative to the Earth.
 * @param ahrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs *const ahrs) {
  402de8:	b410      	push	{r4}
  402dea:	4604      	mov	r4, r0
    return ahrs->quaternion;
  402dec:	3110      	adds	r1, #16
  402dee:	c90f      	ldmia	r1, {r0, r1, r2, r3}
  402df0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
  402df4:	4620      	mov	r0, r4
  402df6:	f85d 4b04 	ldr.w	r4, [sp], #4
  402dfa:	4770      	bx	lr

00402dfc <FusionAhrsSetHeading>:
 * algorithm.  This function can be used to reset drift in heading when the AHRS
 * algorithm is being used without a magnetometer.
 * @param ahrs AHRS algorithm structure.
 * @param heading Heading angle in degrees.
 */
void FusionAhrsSetHeading(FusionAhrs *const ahrs, const float heading) {
  402dfc:	b510      	push	{r4, lr}
  402dfe:	ed2d 8b04 	vpush	{d8-d9}
  402e02:	4604      	mov	r4, r0
  402e04:	ee08 1a10 	vmov	s16, r1
#define Q ahrs->quaternion.element
    const float yaw = atan2f(Q.w * Q.z + Q.x * Q.y, 0.5f - Q.y * Q.y - Q.z * Q.z);
  402e08:	ed90 7a07 	vldr	s14, [r0, #28]
  402e0c:	edd0 7a06 	vldr	s15, [r0, #24]
  402e10:	ee67 6aa7 	vmul.f32	s13, s15, s15
  402e14:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
  402e18:	ee79 6a66 	vsub.f32	s13, s18, s13
  402e1c:	ee27 6a07 	vmul.f32	s12, s14, s14
  402e20:	edd0 5a04 	vldr	s11, [r0, #16]
  402e24:	ee27 7a25 	vmul.f32	s14, s14, s11
  402e28:	edd0 5a05 	vldr	s11, [r0, #20]
  402e2c:	ee67 7aa5 	vmul.f32	s15, s15, s11
  402e30:	ee76 6ac6 	vsub.f32	s13, s13, s12
  402e34:	ee16 1a90 	vmov	r1, s13
  402e38:	ee77 7a27 	vadd.f32	s15, s14, s15
  402e3c:	ee17 0a90 	vmov	r0, s15
  402e40:	4b2f      	ldr	r3, [pc, #188]	; (402f00 <FusionAhrsSetHeading+0x104>)
  402e42:	4798      	blx	r3
 * @brief Converts degrees to radians.
 * @param degrees Degrees.
 * @return Radians.
 */
static inline float FusionDegreesToRadians(const float degrees) {
    return degrees * ((float) M_PI / 180.0f);
  402e44:	eddf 8a2f 	vldr	s17, [pc, #188]	; 402f04 <FusionAhrsSetHeading+0x108>
  402e48:	ee68 8a28 	vmul.f32	s17, s16, s17
    const float halfYawMinusHeading = 0.5f * (yaw - FusionDegreesToRadians(heading));
  402e4c:	ee07 0a90 	vmov	s15, r0
  402e50:	ee77 8ae8 	vsub.f32	s17, s15, s17
  402e54:	ee68 8a89 	vmul.f32	s17, s17, s18
    const FusionQuaternion rotation = {
            .element.w = cosf(halfYawMinusHeading),
  402e58:	ee18 0a90 	vmov	r0, s17
  402e5c:	4b2a      	ldr	r3, [pc, #168]	; (402f08 <FusionAhrsSetHeading+0x10c>)
  402e5e:	4798      	blx	r3
  402e60:	ee08 0a10 	vmov	s16, r0
            .element.x = 0.0f,
            .element.y = 0.0f,
            .element.z = -1.0f * sinf(halfYawMinusHeading),
  402e64:	ee18 0a90 	vmov	r0, s17
  402e68:	4b28      	ldr	r3, [pc, #160]	; (402f0c <FusionAhrsSetHeading+0x110>)
  402e6a:	4798      	blx	r3
  402e6c:	ee07 0a90 	vmov	s15, r0
  402e70:	eeb1 5a67 	vneg.f32	s10, s15
  402e74:	ed94 6a04 	vldr	s12, [r4, #16]
  402e78:	edd4 5a05 	vldr	s11, [r4, #20]
  402e7c:	edd4 7a06 	vldr	s15, [r4, #24]
  402e80:	edd4 4a07 	vldr	s9, [r4, #28]
 */
static inline FusionQuaternion FusionQuaternionMultiply(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
#define A quaternionA.element
#define B quaternionB.element
    FusionQuaternion result;
    result.element.w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z;
  402e84:	ed9f 7a22 	vldr	s14, [pc, #136]	; 402f10 <FusionAhrsSetHeading+0x114>
  402e88:	ee25 4a87 	vmul.f32	s8, s11, s14
  402e8c:	ee67 3a87 	vmul.f32	s7, s15, s14
    result.element.x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y;
  402e90:	ee26 3a07 	vmul.f32	s6, s12, s14
  402e94:	ee24 7a87 	vmul.f32	s14, s9, s14
    result.element.w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z;
  402e98:	ee68 6a06 	vmul.f32	s13, s16, s12
  402e9c:	ee76 6ac4 	vsub.f32	s13, s13, s8
  402ea0:	ee76 6ae3 	vsub.f32	s13, s13, s7
  402ea4:	ee65 2a24 	vmul.f32	s5, s10, s9
  402ea8:	ee76 6ae2 	vsub.f32	s13, s13, s5
    };
    ahrs->quaternion = FusionQuaternionMultiply(rotation, ahrs->quaternion);
  402eac:	edc4 6a04 	vstr	s13, [r4, #16]
    result.element.x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y;
  402eb0:	ee68 6a25 	vmul.f32	s13, s16, s11
  402eb4:	ee76 6a83 	vadd.f32	s13, s13, s6
  402eb8:	ee76 6a87 	vadd.f32	s13, s13, s14
  402ebc:	ee67 2a85 	vmul.f32	s5, s15, s10
  402ec0:	ee76 6ae2 	vsub.f32	s13, s13, s5
  402ec4:	edc4 6a05 	vstr	s13, [r4, #20]
    result.element.y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x;
  402ec8:	ee68 7a27 	vmul.f32	s15, s16, s15
  402ecc:	ee77 7ac7 	vsub.f32	s15, s15, s14
  402ed0:	ee77 7a83 	vadd.f32	s15, s15, s6
  402ed4:	ee65 5a85 	vmul.f32	s11, s11, s10
  402ed8:	ee77 7aa5 	vadd.f32	s15, s15, s11
  402edc:	edc4 7a06 	vstr	s15, [r4, #24]
    result.element.z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w;
  402ee0:	ee28 8a24 	vmul.f32	s16, s16, s9
  402ee4:	ee38 8a23 	vadd.f32	s16, s16, s7
  402ee8:	ee38 8a44 	vsub.f32	s16, s16, s8
  402eec:	ee26 6a05 	vmul.f32	s12, s12, s10
  402ef0:	ee38 8a06 	vadd.f32	s16, s16, s12
  402ef4:	ed84 8a07 	vstr	s16, [r4, #28]
#undef Q
}
  402ef8:	ecbd 8b04 	vpop	{d8-d9}
  402efc:	bd10      	pop	{r4, pc}
  402efe:	bf00      	nop
  402f00:	004042b1 	.word	0x004042b1
  402f04:	3c8efa35 	.word	0x3c8efa35
  402f08:	00404061 	.word	0x00404061
  402f0c:	004040d9 	.word	0x004040d9
  402f10:	00000000 	.word	0x00000000

00402f14 <FusionAhrsUpdate>:
void FusionAhrsUpdate(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const FusionVector magnetometer, const float deltaTime) {
  402f14:	b570      	push	{r4, r5, r6, lr}
  402f16:	ed2d 8b0a 	vpush	{d8-d12}
  402f1a:	b08e      	sub	sp, #56	; 0x38
  402f1c:	4604      	mov	r4, r0
  402f1e:	a803      	add	r0, sp, #12
  402f20:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  402f24:	ed9d 9a22 	vldr	s18, [sp, #136]	; 0x88
    ahrs->accelerometer = accelerometer;
  402f28:	f104 0320 	add.w	r3, r4, #32
  402f2c:	aa1c      	add	r2, sp, #112	; 0x70
  402f2e:	ca07      	ldmia	r2, {r0, r1, r2}
  402f30:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (ahrs->initialising == true) {
  402f34:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
  402f38:	b1bb      	cbz	r3, 402f6a <FusionAhrsUpdate+0x56>
        ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
  402f3a:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
  402f3e:	ee29 7a27 	vmul.f32	s14, s18, s15
  402f42:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
  402f46:	ee77 7ac7 	vsub.f32	s15, s15, s14
  402f4a:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
        if (ahrs->rampedGain < ahrs->settings.gain) {
  402f4e:	ed94 7a00 	vldr	s14, [r4]
  402f52:	eef4 7ac7 	vcmpe.f32	s15, s14
  402f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  402f5a:	d506      	bpl.n	402f6a <FusionAhrsUpdate+0x56>
            ahrs->rampedGain = ahrs->settings.gain;
  402f5c:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
            ahrs->initialising = false;
  402f60:	2300      	movs	r3, #0
  402f62:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            ahrs->accelerationRejectionTimeout = false;
  402f66:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
            .axis.x = Q.x * Q.z - Q.w * Q.y,
  402f6a:	ed94 6a05 	vldr	s12, [r4, #20]
  402f6e:	edd4 9a07 	vldr	s19, [r4, #28]
  402f72:	ed94 7a04 	vldr	s14, [r4, #16]
  402f76:	edd4 aa06 	vldr	s21, [r4, #24]
  402f7a:	ee66 6a29 	vmul.f32	s13, s12, s19
  402f7e:	ee67 7a2a 	vmul.f32	s15, s14, s21
  402f82:	ee36 bae7 	vsub.f32	s22, s13, s15
            .axis.y = Q.y * Q.z + Q.w * Q.x,
  402f86:	ee69 aaaa 	vmul.f32	s21, s19, s21
  402f8a:	ee26 6a07 	vmul.f32	s12, s12, s14
  402f8e:	ee7a aa86 	vadd.f32	s21, s21, s12
            .axis.z = Q.w * Q.w - 0.5f + Q.z * Q.z,
  402f92:	ee27 7a07 	vmul.f32	s14, s14, s14
  402f96:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
  402f9a:	ee37 7a67 	vsub.f32	s14, s14, s15
  402f9e:	ee69 9aa9 	vmul.f32	s19, s19, s19
  402fa2:	ee77 9a29 	vadd.f32	s19, s14, s19
    ahrs->accelerometerIgnored = true;
  402fa6:	2301      	movs	r3, #1
  402fa8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  402fac:	ed9d 8a1c 	vldr	s16, [sp, #112]	; 0x70
  402fb0:	ed9d aa1d 	vldr	s20, [sp, #116]	; 0x74
  402fb4:	eddd 8a1e 	vldr	s17, [sp, #120]	; 0x78
    return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
  402fb8:	eeb5 aa40 	vcmp.f32	s20, #0.0
  402fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  402fc0:	bf18      	it	ne
  402fc2:	2300      	movne	r3, #0
  402fc4:	eeb5 8a40 	vcmp.f32	s16, #0.0
  402fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (FusionVectorIsZero(accelerometer) == false) {
  402fcc:	f003 0301 	and.w	r3, r3, #1
  402fd0:	bf18      	it	ne
  402fd2:	2300      	movne	r3, #0
  402fd4:	b38b      	cbz	r3, 40303a <FusionAhrsUpdate+0x126>
  402fd6:	eef5 8a40 	vcmp.f32	s17, #0.0
  402fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  402fde:	d12c      	bne.n	40303a <FusionAhrsUpdate+0x126>
    FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
  402fe0:	ed9f 8ae8 	vldr	s16, [pc, #928]	; 403384 <FusionAhrsUpdate+0x470>
  402fe4:	eef0 8a48 	vmov.f32	s17, s16
  402fe8:	eeb0 aa48 	vmov.f32	s20, s16
    ahrs->magnetometerIgnored = true;
  402fec:	2301      	movs	r3, #1
  402fee:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
  402ff2:	eddd ba1f 	vldr	s23, [sp, #124]	; 0x7c
  402ff6:	ed9d ca20 	vldr	s24, [sp, #128]	; 0x80
  402ffa:	eddd ca21 	vldr	s25, [sp, #132]	; 0x84
  402ffe:	eeb5 ca40 	vcmp.f32	s24, #0.0
  403002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403006:	bf18      	it	ne
  403008:	2300      	movne	r3, #0
  40300a:	eef5 ba40 	vcmp.f32	s23, #0.0
  40300e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (FusionVectorIsZero(magnetometer) == false) {
  403012:	f003 0301 	and.w	r3, r3, #1
  403016:	bf18      	it	ne
  403018:	2300      	movne	r3, #0
  40301a:	2b00      	cmp	r3, #0
  40301c:	f000 8089 	beq.w	403132 <FusionAhrsUpdate+0x21e>
  403020:	eef5 ca40 	vcmp.f32	s25, #0.0
  403024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403028:	f040 8083 	bne.w	403132 <FusionAhrsUpdate+0x21e>
    FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
  40302c:	eddf 9ad5 	vldr	s19, [pc, #852]	; 403384 <FusionAhrsUpdate+0x470>
  403030:	eef0 6a69 	vmov.f32	s13, s19
  403034:	eeb0 7a69 	vmov.f32	s14, s19
  403038:	e10d      	b.n	403256 <FusionAhrsUpdate+0x342>
        if (ahrs->accelerationRejectionTimer > ahrs->settings.rejectionTimeout) {
  40303a:	6d62      	ldr	r2, [r4, #84]	; 0x54
  40303c:	68e3      	ldr	r3, [r4, #12]
  40303e:	429a      	cmp	r2, r3
  403040:	d859      	bhi.n	4030f6 <FusionAhrsUpdate+0x1e2>
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
  403042:	ee68 7a08 	vmul.f32	s15, s16, s16
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
  403046:	ee2a 7a0a 	vmul.f32	s14, s20, s20
    return vector.axis.x + vector.axis.y + vector.axis.z;
  40304a:	ee77 7a87 	vadd.f32	s15, s15, s14
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
  40304e:	ee28 7aa8 	vmul.f32	s14, s17, s17
    return vector.axis.x + vector.axis.y + vector.axis.z;
  403052:	ee77 7a87 	vadd.f32	s15, s15, s14
    union32.i = 0x5F1F1412 - (union32.i >> 1);
  403056:	4bcc      	ldr	r3, [pc, #816]	; (403388 <FusionAhrsUpdate+0x474>)
  403058:	ee17 2a90 	vmov	r2, s15
  40305c:	eba3 0362 	sub.w	r3, r3, r2, asr #1
  403060:	ee06 3a90 	vmov	s13, r3
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
  403064:	ed9f 7ac9 	vldr	s14, [pc, #804]	; 40338c <FusionAhrsUpdate+0x478>
  403068:	ee67 7a87 	vmul.f32	s15, s15, s14
  40306c:	ee67 7aa6 	vmul.f32	s15, s15, s13
  403070:	ee67 7aa6 	vmul.f32	s15, s15, s13
  403074:	ed9f 7ac6 	vldr	s14, [pc, #792]	; 403390 <FusionAhrsUpdate+0x47c>
  403078:	ee77 7a67 	vsub.f32	s15, s14, s15
  40307c:	ee67 7aa6 	vmul.f32	s15, s15, s13
    result.axis.x = vector.axis.x * scalar;
  403080:	ee28 8a27 	vmul.f32	s16, s16, s15
    result.axis.y = vector.axis.y * scalar;
  403084:	ee2a 6a27 	vmul.f32	s12, s20, s15
    result.axis.z = vector.axis.z * scalar;
  403088:	ee68 8aa7 	vmul.f32	s17, s17, s15
    result.axis.x = A.y * B.z - A.z * B.y;
  40308c:	ee29 7a86 	vmul.f32	s14, s19, s12
  403090:	ee6a 7aa8 	vmul.f32	s15, s21, s17
  403094:	ee37 aa67 	vsub.f32	s20, s14, s15
    result.axis.y = A.z * B.x - A.x * B.z;
  403098:	ee6b 8a28 	vmul.f32	s17, s22, s17
  40309c:	ee69 6a88 	vmul.f32	s13, s19, s16
  4030a0:	ee78 8ae6 	vsub.f32	s17, s17, s13
    result.axis.z = A.x * B.y - A.y * B.x;
  4030a4:	ee2a 8a88 	vmul.f32	s16, s21, s16
  4030a8:	ee2b 6a06 	vmul.f32	s12, s22, s12
  4030ac:	ee38 8a46 	vsub.f32	s16, s16, s12
        ahrs->halfAccelerometerFeedback = FusionVectorCrossProduct(FusionVectorNormalise(accelerometer), halfGravity);
  4030b0:	ed84 aa0e 	vstr	s20, [r4, #56]	; 0x38
  4030b4:	edc4 8a0f 	vstr	s17, [r4, #60]	; 0x3c
  4030b8:	ed84 8a10 	vstr	s16, [r4, #64]	; 0x40
        if ((ahrs->initialising == true) || (FusionVectorMagnitudeSquared(ahrs->halfAccelerometerFeedback) <= ahrs->settings.accelerationRejection)) {
  4030bc:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
  4030c0:	b973      	cbnz	r3, 4030e0 <FusionAhrsUpdate+0x1cc>
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
  4030c2:	ee6a 7a0a 	vmul.f32	s15, s20, s20
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
  4030c6:	ee28 7aa8 	vmul.f32	s14, s17, s17
    return vector.axis.x + vector.axis.y + vector.axis.z;
  4030ca:	ee77 7a87 	vadd.f32	s15, s15, s14
  4030ce:	ee48 7a08 	vmla.f32	s15, s16, s16
  4030d2:	ed94 7a01 	vldr	s14, [r4, #4]
  4030d6:	eef4 7ac7 	vcmpe.f32	s15, s14
  4030da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4030de:	d81e      	bhi.n	40311e <FusionAhrsUpdate+0x20a>
            ahrs->accelerometerIgnored = false;
  4030e0:	2300      	movs	r3, #0
  4030e2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
            ahrs->accelerationRejectionTimer -= ahrs->accelerationRejectionTimer >= 10 ? 10 : 0;
  4030e6:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4030e8:	2b09      	cmp	r3, #9
  4030ea:	bf8c      	ite	hi
  4030ec:	220a      	movhi	r2, #10
  4030ee:	2200      	movls	r2, #0
  4030f0:	1a9b      	subs	r3, r3, r2
  4030f2:	6563      	str	r3, [r4, #84]	; 0x54
  4030f4:	e77a      	b.n	402fec <FusionAhrsUpdate+0xd8>
            const FusionQuaternion quaternion = ahrs->quaternion;
  4030f6:	ae07      	add	r6, sp, #28
  4030f8:	f104 0510 	add.w	r5, r4, #16
  4030fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  403100:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
            FusionAhrsReset(ahrs);
  403104:	4620      	mov	r0, r4
  403106:	4ba3      	ldr	r3, [pc, #652]	; (403394 <FusionAhrsUpdate+0x480>)
  403108:	4798      	blx	r3
            ahrs->quaternion = quaternion;
  40310a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
  40310e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            ahrs->accelerationRejectionTimer = 0;
  403112:	2300      	movs	r3, #0
  403114:	6563      	str	r3, [r4, #84]	; 0x54
            ahrs->accelerationRejectionTimeout = true;
  403116:	2301      	movs	r3, #1
  403118:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
  40311c:	e791      	b.n	403042 <FusionAhrsUpdate+0x12e>
            ahrs->accelerationRejectionTimer++;
  40311e:	6d63      	ldr	r3, [r4, #84]	; 0x54
  403120:	3301      	adds	r3, #1
  403122:	6563      	str	r3, [r4, #84]	; 0x54
    FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
  403124:	ed9f 8a97 	vldr	s16, [pc, #604]	; 403384 <FusionAhrsUpdate+0x470>
  403128:	eef0 8a48 	vmov.f32	s17, s16
  40312c:	eeb0 aa48 	vmov.f32	s20, s16
  403130:	e75c      	b.n	402fec <FusionAhrsUpdate+0xd8>
        ahrs->magneticRejectionTimeout = false;
  403132:	2300      	movs	r3, #0
  403134:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
        if (ahrs->magneticRejectionTimer > ahrs->settings.rejectionTimeout) {
  403138:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  40313a:	68e3      	ldr	r3, [r4, #12]
  40313c:	429a      	cmp	r2, r3
  40313e:	f200 812d 	bhi.w	40339c <FusionAhrsUpdate+0x488>
                .axis.x = Q.x * Q.y + Q.w * Q.z,
  403142:	edd4 6a05 	vldr	s13, [r4, #20]
  403146:	ed94 7a06 	vldr	s14, [r4, #24]
  40314a:	edd4 4a04 	vldr	s9, [r4, #16]
  40314e:	edd4 5a07 	vldr	s11, [r4, #28]
  403152:	ee26 5a87 	vmul.f32	s10, s13, s14
  403156:	ee64 7aa5 	vmul.f32	s15, s9, s11
  40315a:	ee35 5a27 	vadd.f32	s10, s10, s15
                .axis.y = Q.w * Q.w - 0.5f + Q.y * Q.y,
  40315e:	ee64 7aa4 	vmul.f32	s15, s9, s9
  403162:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
  403166:	ee77 7ac6 	vsub.f32	s15, s15, s12
  40316a:	ee27 6a07 	vmul.f32	s12, s14, s14
  40316e:	ee37 6a86 	vadd.f32	s12, s15, s12
                .axis.z = Q.y * Q.z - Q.w * Q.x
  403172:	ee27 7a25 	vmul.f32	s14, s14, s11
  403176:	ee66 6aa4 	vmul.f32	s13, s13, s9
  40317a:	ee77 4a66 	vsub.f32	s9, s14, s13
    result.axis.x = A.y * B.z - A.z * B.y;
  40317e:	ee6a 5aac 	vmul.f32	s11, s21, s25
  403182:	ee69 7a8c 	vmul.f32	s15, s19, s24
  403186:	ee75 5ae7 	vsub.f32	s11, s11, s15
    result.axis.y = A.z * B.x - A.x * B.z;
  40318a:	ee69 9aab 	vmul.f32	s19, s19, s23
  40318e:	ee6b ca2c 	vmul.f32	s25, s22, s25
  403192:	ee79 9aec 	vsub.f32	s19, s19, s25
    result.axis.z = A.x * B.y - A.y * B.x;
  403196:	ee6b 6a0c 	vmul.f32	s13, s22, s24
  40319a:	ee6a 7aab 	vmul.f32	s15, s21, s23
  40319e:	ee76 6ae7 	vsub.f32	s13, s13, s15
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
  4031a2:	ee25 7aa5 	vmul.f32	s14, s11, s11
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
  4031a6:	ee69 7aa9 	vmul.f32	s15, s19, s19
    return vector.axis.x + vector.axis.y + vector.axis.z;
  4031aa:	ee37 7a27 	vadd.f32	s14, s14, s15
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
  4031ae:	ee66 7aa6 	vmul.f32	s15, s13, s13
    return vector.axis.x + vector.axis.y + vector.axis.z;
  4031b2:	ee37 7a27 	vadd.f32	s14, s14, s15
    union32.i = 0x5F1F1412 - (union32.i >> 1);
  4031b6:	4b74      	ldr	r3, [pc, #464]	; (403388 <FusionAhrsUpdate+0x474>)
  4031b8:	ee17 2a10 	vmov	r2, s14
  4031bc:	eba3 0362 	sub.w	r3, r3, r2, asr #1
  4031c0:	ee04 3a10 	vmov	s8, r3
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
  4031c4:	eddf 7a71 	vldr	s15, [pc, #452]	; 40338c <FusionAhrsUpdate+0x478>
  4031c8:	ee27 7a27 	vmul.f32	s14, s14, s15
  4031cc:	ee27 7a04 	vmul.f32	s14, s14, s8
  4031d0:	ee27 7a04 	vmul.f32	s14, s14, s8
  4031d4:	eddf 7a6e 	vldr	s15, [pc, #440]	; 403390 <FusionAhrsUpdate+0x47c>
  4031d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
  4031dc:	ee67 7a84 	vmul.f32	s15, s15, s8
    result.axis.x = vector.axis.x * scalar;
  4031e0:	ee67 5aa5 	vmul.f32	s11, s15, s11
    result.axis.y = vector.axis.y * scalar;
  4031e4:	ee67 9aa9 	vmul.f32	s19, s15, s19
    result.axis.z = vector.axis.z * scalar;
  4031e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
    result.axis.x = A.y * B.z - A.z * B.y;
  4031ec:	ee24 7aa9 	vmul.f32	s14, s9, s19
  4031f0:	ee66 6a27 	vmul.f32	s13, s12, s15
  4031f4:	ee37 7a66 	vsub.f32	s14, s14, s13
    result.axis.y = A.z * B.x - A.x * B.z;
  4031f8:	ee65 7a27 	vmul.f32	s15, s10, s15
  4031fc:	ee64 6aa5 	vmul.f32	s13, s9, s11
  403200:	ee77 6ae6 	vsub.f32	s13, s15, s13
    result.axis.z = A.x * B.y - A.y * B.x;
  403204:	ee66 7a25 	vmul.f32	s15, s12, s11
  403208:	ee65 9a29 	vmul.f32	s19, s10, s19
  40320c:	ee77 9ae9 	vsub.f32	s19, s15, s19
        ahrs->halfMagnetometerFeedback = FusionVectorCrossProduct(FusionVectorNormalise(FusionVectorCrossProduct(halfGravity, magnetometer)), halfWest);
  403210:	ed84 7a11 	vstr	s14, [r4, #68]	; 0x44
  403214:	edc4 6a12 	vstr	s13, [r4, #72]	; 0x48
  403218:	edc4 9a13 	vstr	s19, [r4, #76]	; 0x4c
        if ((ahrs->initialising == true) || (FusionVectorMagnitudeSquared(ahrs->halfMagnetometerFeedback) <= ahrs->settings.magneticRejection)) {
  40321c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
  403220:	b97b      	cbnz	r3, 403242 <FusionAhrsUpdate+0x32e>
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
  403222:	ee67 7a07 	vmul.f32	s15, s14, s14
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
  403226:	ee26 6aa6 	vmul.f32	s12, s13, s13
    return vector.axis.x + vector.axis.y + vector.axis.z;
  40322a:	ee77 7a86 	vadd.f32	s15, s15, s12
  40322e:	ee49 7aa9 	vmla.f32	s15, s19, s19
  403232:	ed94 6a02 	vldr	s12, [r4, #8]
  403236:	eef4 7ac6 	vcmpe.f32	s15, s12
  40323a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40323e:	f200 80c8 	bhi.w	4033d2 <FusionAhrsUpdate+0x4be>
            ahrs->magnetometerIgnored = false;
  403242:	2300      	movs	r3, #0
  403244:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
            ahrs->magneticRejectionTimer -= ahrs->magneticRejectionTimer >= 10 ? 10 : 0;
  403248:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  40324a:	2b09      	cmp	r3, #9
  40324c:	bf8c      	ite	hi
  40324e:	220a      	movhi	r2, #10
  403250:	2200      	movls	r2, #0
  403252:	1a9b      	subs	r3, r3, r2
  403254:	65e3      	str	r3, [r4, #92]	; 0x5c
    const FusionVector adjustedHalfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(FusionVectorAdd(halfAccelerometerFeedback, halfMagnetometerFeedback), ahrs->rampedGain));
  403256:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
  40325a:	ee37 7a0a 	vadd.f32	s14, s14, s20
    result.axis.x = vector.axis.x * scalar;
  40325e:	ee27 7a27 	vmul.f32	s14, s14, s15
  403262:	ed9f 6a4d 	vldr	s12, [pc, #308]	; 403398 <FusionAhrsUpdate+0x484>
  403266:	eddd 5a03 	vldr	s11, [sp, #12]
  40326a:	ee65 5a86 	vmul.f32	s11, s11, s12
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
  40326e:	ee37 7a25 	vadd.f32	s14, s14, s11
    result.axis.x = vector.axis.x * scalar;
  403272:	ee27 7a09 	vmul.f32	s14, s14, s18
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
  403276:	ee78 6aa6 	vadd.f32	s13, s17, s13
    result.axis.y = vector.axis.y * scalar;
  40327a:	ee66 6aa7 	vmul.f32	s13, s13, s15
  40327e:	eddd 8a04 	vldr	s17, [sp, #16]
  403282:	ee68 8a86 	vmul.f32	s17, s17, s12
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
  403286:	ee76 6aa8 	vadd.f32	s13, s13, s17
    result.axis.y = vector.axis.y * scalar;
  40328a:	ee66 6a89 	vmul.f32	s13, s13, s18
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
  40328e:	ee38 8a29 	vadd.f32	s16, s16, s19
    result.axis.z = vector.axis.z * scalar;
  403292:	ee28 8a27 	vmul.f32	s16, s16, s15
  403296:	eddd 7a05 	vldr	s15, [sp, #20]
  40329a:	ee67 7a86 	vmul.f32	s15, s15, s12
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
  40329e:	ee38 8a27 	vadd.f32	s16, s16, s15
    result.axis.z = vector.axis.z * scalar;
  4032a2:	ee68 7a09 	vmul.f32	s15, s16, s18
  4032a6:	ed94 3a04 	vldr	s6, [r4, #16]
  4032aa:	edd4 3a05 	vldr	s7, [r4, #20]
  4032ae:	ed94 4a06 	vldr	s8, [r4, #24]
  4032b2:	ed94 5a07 	vldr	s10, [r4, #28]
 */
static inline FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector vector) {
#define Q quaternion.element
#define V vector.axis
    FusionQuaternion result;
    result.element.w = -Q.x * V.x - Q.y * V.y - Q.z * V.z;
  4032b6:	ee63 5ac7 	vnmul.f32	s11, s7, s14
  4032ba:	ee26 6a84 	vmul.f32	s12, s13, s8
  4032be:	ee75 5ac6 	vsub.f32	s11, s11, s12
  4032c2:	ee27 6a85 	vmul.f32	s12, s15, s10
  4032c6:	ee75 5ac6 	vsub.f32	s11, s11, s12
    result.element.w = quaternionA.element.w + quaternionB.element.w;
  4032ca:	ee75 5a83 	vadd.f32	s11, s11, s6
    result.element.x = Q.w * V.x + Q.y * V.z - Q.z * V.y;
  4032ce:	ee67 4a03 	vmul.f32	s9, s14, s6
  4032d2:	ee27 6a84 	vmul.f32	s12, s15, s8
  4032d6:	ee74 4a86 	vadd.f32	s9, s9, s12
  4032da:	ee26 6a85 	vmul.f32	s12, s13, s10
  4032de:	ee74 4ac6 	vsub.f32	s9, s9, s12
    result.element.x = quaternionA.element.x + quaternionB.element.x;
  4032e2:	ee74 4aa3 	vadd.f32	s9, s9, s7
    result.element.y = Q.w * V.y - Q.x * V.z + Q.z * V.x;
  4032e6:	ee26 6a83 	vmul.f32	s12, s13, s6
  4032ea:	ee67 2aa3 	vmul.f32	s5, s15, s7
  4032ee:	ee36 6a62 	vsub.f32	s12, s12, s5
  4032f2:	ee67 2a05 	vmul.f32	s5, s14, s10
  4032f6:	ee36 6a22 	vadd.f32	s12, s12, s5
    result.element.y = quaternionA.element.y + quaternionB.element.y;
  4032fa:	ee36 6a04 	vadd.f32	s12, s12, s8
    result.element.z = Q.w * V.z + Q.x * V.y - Q.y * V.x;
  4032fe:	ee67 7a83 	vmul.f32	s15, s15, s6
  403302:	ee66 6aa3 	vmul.f32	s13, s13, s7
  403306:	ee77 7aa6 	vadd.f32	s15, s15, s13
  40330a:	ee27 7a04 	vmul.f32	s14, s14, s8
  40330e:	ee77 7ac7 	vsub.f32	s15, s15, s14
    result.element.z = quaternionA.element.z + quaternionB.element.z;
  403312:	ee77 7a85 	vadd.f32	s15, s15, s10
static inline FusionQuaternion FusionQuaternionNormalise(const FusionQuaternion quaternion) {
#define Q quaternion.element
#ifdef FUSION_USE_NORMAL_SQRT
    const float magnitudeReciprocal = 1.0f / sqrtf(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
#else
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
  403316:	ee25 7aa5 	vmul.f32	s14, s11, s11
  40331a:	ee64 6aa4 	vmul.f32	s13, s9, s9
  40331e:	ee37 7a26 	vadd.f32	s14, s14, s13
  403322:	ee66 6a06 	vmul.f32	s13, s12, s12
  403326:	ee37 7a26 	vadd.f32	s14, s14, s13
  40332a:	ee67 6aa7 	vmul.f32	s13, s15, s15
  40332e:	ee37 7a26 	vadd.f32	s14, s14, s13
    union32.i = 0x5F1F1412 - (union32.i >> 1);
  403332:	4b15      	ldr	r3, [pc, #84]	; (403388 <FusionAhrsUpdate+0x474>)
  403334:	ee17 2a10 	vmov	r2, s14
  403338:	eba3 0362 	sub.w	r3, r3, r2, asr #1
  40333c:	ee05 3a10 	vmov	s10, r3
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
  403340:	eddf 6a12 	vldr	s13, [pc, #72]	; 40338c <FusionAhrsUpdate+0x478>
  403344:	ee27 7a26 	vmul.f32	s14, s14, s13
  403348:	ee27 7a05 	vmul.f32	s14, s14, s10
  40334c:	ee27 7a05 	vmul.f32	s14, s14, s10
  403350:	eddf 6a0f 	vldr	s13, [pc, #60]	; 403390 <FusionAhrsUpdate+0x47c>
  403354:	ee36 7ac7 	vsub.f32	s14, s13, s14
  403358:	ee27 7a05 	vmul.f32	s14, s14, s10
#endif
    FusionQuaternion normalisedQuaternion;
    normalisedQuaternion.element.w = Q.w * magnitudeReciprocal;
  40335c:	ee67 5a25 	vmul.f32	s11, s14, s11
    ahrs->quaternion = FusionQuaternionNormalise(ahrs->quaternion);
  403360:	edc4 5a04 	vstr	s11, [r4, #16]
    normalisedQuaternion.element.x = Q.x * magnitudeReciprocal;
  403364:	ee67 6a24 	vmul.f32	s13, s14, s9
  403368:	edc4 6a05 	vstr	s13, [r4, #20]
    normalisedQuaternion.element.y = Q.y * magnitudeReciprocal;
  40336c:	ee27 6a06 	vmul.f32	s12, s14, s12
  403370:	ed84 6a06 	vstr	s12, [r4, #24]
    normalisedQuaternion.element.z = Q.z * magnitudeReciprocal;
  403374:	ee27 7a27 	vmul.f32	s14, s14, s15
  403378:	ed84 7a07 	vstr	s14, [r4, #28]
}
  40337c:	b00e      	add	sp, #56	; 0x38
  40337e:	ecbd 8b0a 	vpop	{d8-d12}
  403382:	bd70      	pop	{r4, r5, r6, pc}
  403384:	00000000 	.word	0x00000000
  403388:	5f1f1412 	.word	0x5f1f1412
  40338c:	3f36d312 	.word	0x3f36d312
  403390:	3fd851ff 	.word	0x3fd851ff
  403394:	00402cb5 	.word	0x00402cb5
  403398:	3c0efa35 	.word	0x3c0efa35
            FusionAhrsSetHeading(ahrs, FusionCompassCalculateHeading(halfGravity, magnetometer));
  40339c:	ed8d ba0b 	vstr	s22, [sp, #44]	; 0x2c
  4033a0:	edcd aa0c 	vstr	s21, [sp, #48]	; 0x30
  4033a4:	edcd 9a0d 	vstr	s19, [sp, #52]	; 0x34
  4033a8:	ab20      	add	r3, sp, #128	; 0x80
  4033aa:	e893 0003 	ldmia.w	r3, {r0, r1}
  4033ae:	e88d 0003 	stmia.w	sp, {r0, r1}
  4033b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4033b4:	aa0e      	add	r2, sp, #56	; 0x38
  4033b6:	e912 0007 	ldmdb	r2, {r0, r1, r2}
  4033ba:	4d0b      	ldr	r5, [pc, #44]	; (4033e8 <FusionAhrsUpdate+0x4d4>)
  4033bc:	47a8      	blx	r5
  4033be:	4601      	mov	r1, r0
  4033c0:	4620      	mov	r0, r4
  4033c2:	4b0a      	ldr	r3, [pc, #40]	; (4033ec <FusionAhrsUpdate+0x4d8>)
  4033c4:	4798      	blx	r3
            ahrs->magneticRejectionTimer = 0;
  4033c6:	2300      	movs	r3, #0
  4033c8:	65e3      	str	r3, [r4, #92]	; 0x5c
            ahrs->magneticRejectionTimeout = true;
  4033ca:	2301      	movs	r3, #1
  4033cc:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
  4033d0:	e6b7      	b.n	403142 <FusionAhrsUpdate+0x22e>
            ahrs->magneticRejectionTimer++;
  4033d2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  4033d4:	3301      	adds	r3, #1
  4033d6:	65e3      	str	r3, [r4, #92]	; 0x5c
    FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
  4033d8:	eddf 9a05 	vldr	s19, [pc, #20]	; 4033f0 <FusionAhrsUpdate+0x4dc>
  4033dc:	eef0 6a69 	vmov.f32	s13, s19
  4033e0:	eeb0 7a69 	vmov.f32	s14, s19
  4033e4:	e737      	b.n	403256 <FusionAhrsUpdate+0x342>
  4033e6:	bf00      	nop
  4033e8:	00403451 	.word	0x00403451
  4033ec:	00402dfd 	.word	0x00402dfd
  4033f0:	00000000 	.word	0x00000000

004033f4 <FusionAhrsUpdateNoMagnetometer>:
void FusionAhrsUpdateNoMagnetometer(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const float deltaTime) {
  4033f4:	b530      	push	{r4, r5, lr}
  4033f6:	b091      	sub	sp, #68	; 0x44
  4033f8:	4605      	mov	r5, r0
  4033fa:	ac09      	add	r4, sp, #36	; 0x24
  4033fc:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    FusionAhrsUpdate(ahrs, gyroscope, accelerometer, FUSION_VECTOR_ZERO, deltaTime);
  403400:	2300      	movs	r3, #0
  403402:	930d      	str	r3, [sp, #52]	; 0x34
  403404:	930e      	str	r3, [sp, #56]	; 0x38
  403406:	930f      	str	r3, [sp, #60]	; 0x3c
  403408:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40340a:	9306      	str	r3, [sp, #24]
  40340c:	ab03      	add	r3, sp, #12
  40340e:	aa10      	add	r2, sp, #64	; 0x40
  403410:	e912 0007 	ldmdb	r2, {r0, r1, r2}
  403414:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  403418:	ab14      	add	r3, sp, #80	; 0x50
  40341a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  40341e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  403422:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
  403426:	4628      	mov	r0, r5
  403428:	4c07      	ldr	r4, [pc, #28]	; (403448 <FusionAhrsUpdateNoMagnetometer+0x54>)
  40342a:	47a0      	blx	r4
    if ((ahrs->initialising == true) && (ahrs->accelerationRejectionTimeout == false)) {
  40342c:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
  403430:	b113      	cbz	r3, 403438 <FusionAhrsUpdateNoMagnetometer+0x44>
  403432:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
  403436:	b10b      	cbz	r3, 40343c <FusionAhrsUpdateNoMagnetometer+0x48>
}
  403438:	b011      	add	sp, #68	; 0x44
  40343a:	bd30      	pop	{r4, r5, pc}
        FusionAhrsSetHeading(ahrs, 0.0f);
  40343c:	2100      	movs	r1, #0
  40343e:	4628      	mov	r0, r5
  403440:	4b02      	ldr	r3, [pc, #8]	; (40344c <FusionAhrsUpdateNoMagnetometer+0x58>)
  403442:	4798      	blx	r3
}
  403444:	e7f8      	b.n	403438 <FusionAhrsUpdateNoMagnetometer+0x44>
  403446:	bf00      	nop
  403448:	00402f15 	.word	0x00402f15
  40344c:	00402dfd 	.word	0x00402dfd

00403450 <FusionCompassCalculateHeading>:
 * @brief Calculates the heading relative to magnetic north.
 * @param accelerometer Accelerometer measurement in any calibrated units.
 * @param magnetometer Magnetometer measurement in any calibrated units.
 * @return Heading angle in degrees.
 */
float FusionCompassCalculateHeading(const FusionVector accelerometer, const FusionVector magnetometer) {
  403450:	b082      	sub	sp, #8
  403452:	b500      	push	{lr}
  403454:	b085      	sub	sp, #20
  403456:	f10d 0e10 	add.w	lr, sp, #16
  40345a:	e90e 0007 	stmdb	lr, {r0, r1, r2}
  40345e:	9307      	str	r3, [sp, #28]
  403460:	eddd 3a01 	vldr	s7, [sp, #4]
  403464:	eddd 6a02 	vldr	s13, [sp, #8]
  403468:	ed9d 4a03 	vldr	s8, [sp, #12]
  40346c:	eddd 7a07 	vldr	s15, [sp, #28]
  403470:	ed9d 5a08 	vldr	s10, [sp, #32]
  403474:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
    result.axis.x = A.y * B.z - A.z * B.y;
  403478:	ee66 5a26 	vmul.f32	s11, s12, s13
  40347c:	ee24 7a05 	vmul.f32	s14, s8, s10
  403480:	ee75 5ac7 	vsub.f32	s11, s11, s14
    result.axis.y = A.z * B.x - A.x * B.z;
  403484:	ee24 7a27 	vmul.f32	s14, s8, s15
  403488:	ee26 6a23 	vmul.f32	s12, s12, s7
  40348c:	ee37 6a46 	vsub.f32	s12, s14, s12
    result.axis.z = A.x * B.y - A.y * B.x;
  403490:	ee25 5a23 	vmul.f32	s10, s10, s7
  403494:	ee67 7aa6 	vmul.f32	s15, s15, s13
  403498:	ee35 5a67 	vsub.f32	s10, s10, s15
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
  40349c:	ee25 7aa5 	vmul.f32	s14, s11, s11
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
  4034a0:	ee66 7a06 	vmul.f32	s15, s12, s12
    return vector.axis.x + vector.axis.y + vector.axis.z;
  4034a4:	ee37 7a27 	vadd.f32	s14, s14, s15
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
  4034a8:	ee65 7a05 	vmul.f32	s15, s10, s10
    return vector.axis.x + vector.axis.y + vector.axis.z;
  4034ac:	ee37 7a27 	vadd.f32	s14, s14, s15
    union32.i = 0x5F1F1412 - (union32.i >> 1);
  4034b0:	4b2d      	ldr	r3, [pc, #180]	; (403568 <FusionCompassCalculateHeading+0x118>)
  4034b2:	ee17 2a10 	vmov	r2, s14
  4034b6:	eba3 0262 	sub.w	r2, r3, r2, asr #1
  4034ba:	ee03 2a10 	vmov	s6, r2
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
  4034be:	eddf 2a2b 	vldr	s5, [pc, #172]	; 40356c <FusionCompassCalculateHeading+0x11c>
  4034c2:	ee27 7a22 	vmul.f32	s14, s14, s5
  4034c6:	ee27 7a03 	vmul.f32	s14, s14, s6
  4034ca:	ee27 7a03 	vmul.f32	s14, s14, s6
  4034ce:	eddf 4a28 	vldr	s9, [pc, #160]	; 403570 <FusionCompassCalculateHeading+0x120>
  4034d2:	ee34 7ac7 	vsub.f32	s14, s9, s14
  4034d6:	ee67 7a03 	vmul.f32	s15, s14, s6
    result.axis.x = vector.axis.x * scalar;
  4034da:	ee67 5aa5 	vmul.f32	s11, s15, s11
    result.axis.y = vector.axis.y * scalar;
  4034de:	ee27 6a86 	vmul.f32	s12, s15, s12
    result.axis.z = vector.axis.z * scalar;
  4034e2:	ee67 7a85 	vmul.f32	s15, s15, s10
    result.axis.x = A.y * B.z - A.z * B.y;
  4034e6:	ee24 5a06 	vmul.f32	s10, s8, s12
  4034ea:	ee26 7aa7 	vmul.f32	s14, s13, s15
  4034ee:	ee35 5a47 	vsub.f32	s10, s10, s14
    result.axis.y = A.z * B.x - A.x * B.z;
  4034f2:	ee67 7aa3 	vmul.f32	s15, s15, s7
  4034f6:	ee24 4a25 	vmul.f32	s8, s8, s11
  4034fa:	ee77 7ac4 	vsub.f32	s15, s15, s8
    result.axis.z = A.x * B.y - A.y * B.x;
  4034fe:	ee66 6aa5 	vmul.f32	s13, s13, s11
  403502:	ee26 6a23 	vmul.f32	s12, s12, s7
  403506:	ee76 6ac6 	vsub.f32	s13, s13, s12
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
  40350a:	ee25 7a05 	vmul.f32	s14, s10, s10
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
  40350e:	ee67 7aa7 	vmul.f32	s15, s15, s15
    return vector.axis.x + vector.axis.y + vector.axis.z;
  403512:	ee77 7a27 	vadd.f32	s15, s14, s15
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
  403516:	ee66 6aa6 	vmul.f32	s13, s13, s13
    return vector.axis.x + vector.axis.y + vector.axis.z;
  40351a:	ee77 7aa6 	vadd.f32	s15, s15, s13
    union32.i = 0x5F1F1412 - (union32.i >> 1);
  40351e:	ee17 2a90 	vmov	r2, s15
  403522:	eba3 0362 	sub.w	r3, r3, r2, asr #1
  403526:	ee07 3a10 	vmov	s14, r3
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
  40352a:	ee67 7aa2 	vmul.f32	s15, s15, s5
  40352e:	ee67 7a87 	vmul.f32	s15, s15, s14
  403532:	ee67 7a87 	vmul.f32	s15, s15, s14
  403536:	ee74 7ae7 	vsub.f32	s15, s9, s15
  40353a:	ee67 7a87 	vmul.f32	s15, s15, s14

    // Compute direction of magnetic north (Earth's x axis)
    const FusionVector magneticNorth = FusionVectorNormalise(FusionVectorCrossProduct(magneticWest, accelerometer));

    // Calculate angular heading relative to magnetic north
    return FusionRadiansToDegrees(atan2f(magneticWest.axis.x, magneticNorth.axis.x));
  40353e:	ee67 7a85 	vmul.f32	s15, s15, s10
  403542:	ee17 1a90 	vmov	r1, s15
  403546:	ee15 0a90 	vmov	r0, s11
  40354a:	4b0a      	ldr	r3, [pc, #40]	; (403574 <FusionCompassCalculateHeading+0x124>)
  40354c:	4798      	blx	r3
}
  40354e:	eddf 7a0a 	vldr	s15, [pc, #40]	; 403578 <FusionCompassCalculateHeading+0x128>
  403552:	ee07 0a10 	vmov	s14, r0
  403556:	ee67 7a27 	vmul.f32	s15, s14, s15
  40355a:	ee17 0a90 	vmov	r0, s15
  40355e:	b005      	add	sp, #20
  403560:	f85d eb04 	ldr.w	lr, [sp], #4
  403564:	b002      	add	sp, #8
  403566:	4770      	bx	lr
  403568:	5f1f1412 	.word	0x5f1f1412
  40356c:	3f36d312 	.word	0x3f36d312
  403570:	3fd851ff 	.word	0x3fd851ff
  403574:	004042b1 	.word	0x004042b1
  403578:	42652ee0 	.word	0x42652ee0

0040357c <task_orientacao>:

/************************/
/* Tasks                                                                */
/************************/

static void task_orientacao(void *pvParameters) {
  40357c:	b580      	push	{r7, lr}
  40357e:	b082      	sub	sp, #8
  enum orientacao ori;
  for (;;) {
    if (xQueueReceive(xQueueOrientacao, &ori, 1)) {
  403580:	4d29      	ldr	r5, [pc, #164]	; (403628 <task_orientacao+0xac>)
				pio_set(LED3_PIO, LED3_PIO_IDX_MASK);
				vTaskDelay(10);
			}
		}
		else {
			pio_set(LED1_PIO, LED1_PIO_IDX_MASK);
  403582:	4f2a      	ldr	r7, [pc, #168]	; (40362c <task_orientacao+0xb0>)
			pio_set(LED2_PIO, LED2_PIO_IDX_MASK);
  403584:	4e2a      	ldr	r6, [pc, #168]	; (403630 <task_orientacao+0xb4>)
  403586:	e007      	b.n	403598 <task_orientacao+0x1c>
			if (ori == DIREITA){
  403588:	f89d 3007 	ldrb.w	r3, [sp, #7]
  40358c:	2b01      	cmp	r3, #1
  40358e:	d01f      	beq.n	4035d0 <task_orientacao+0x54>
			if (ori == FRENTE){
  403590:	f89d 3007 	ldrb.w	r3, [sp, #7]
  403594:	2b02      	cmp	r3, #2
  403596:	d02b      	beq.n	4035f0 <task_orientacao+0x74>
    if (xQueueReceive(xQueueOrientacao, &ori, 1)) {
  403598:	2201      	movs	r2, #1
  40359a:	f10d 0107 	add.w	r1, sp, #7
  40359e:	6828      	ldr	r0, [r5, #0]
  4035a0:	4b24      	ldr	r3, [pc, #144]	; (403634 <task_orientacao+0xb8>)
  4035a2:	4798      	blx	r3
  4035a4:	2800      	cmp	r0, #0
  4035a6:	d033      	beq.n	403610 <task_orientacao+0x94>
			if (ori == ESQUERDA){
  4035a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
  4035ac:	2b00      	cmp	r3, #0
  4035ae:	d1eb      	bne.n	403588 <task_orientacao+0xc>
				pio_clear(LED1_PIO, LED1_PIO_IDX_MASK);
  4035b0:	2101      	movs	r1, #1
  4035b2:	4638      	mov	r0, r7
  4035b4:	4b20      	ldr	r3, [pc, #128]	; (403638 <task_orientacao+0xbc>)
  4035b6:	4798      	blx	r3
				pio_set(LED2_PIO, LED2_PIO_IDX_MASK);
  4035b8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4035bc:	4630      	mov	r0, r6
  4035be:	4c1f      	ldr	r4, [pc, #124]	; (40363c <task_orientacao+0xc0>)
  4035c0:	47a0      	blx	r4
				pio_set(LED3_PIO, LED3_PIO_IDX_MASK);
  4035c2:	2104      	movs	r1, #4
  4035c4:	481e      	ldr	r0, [pc, #120]	; (403640 <task_orientacao+0xc4>)
  4035c6:	47a0      	blx	r4
				vTaskDelay(10);
  4035c8:	200a      	movs	r0, #10
  4035ca:	4b1e      	ldr	r3, [pc, #120]	; (403644 <task_orientacao+0xc8>)
  4035cc:	4798      	blx	r3
  4035ce:	e7db      	b.n	403588 <task_orientacao+0xc>
				pio_clear(LED3_PIO, LED3_PIO_IDX_MASK);
  4035d0:	2104      	movs	r1, #4
  4035d2:	481b      	ldr	r0, [pc, #108]	; (403640 <task_orientacao+0xc4>)
  4035d4:	4b18      	ldr	r3, [pc, #96]	; (403638 <task_orientacao+0xbc>)
  4035d6:	4798      	blx	r3
				pio_set(LED1_PIO, LED1_PIO_IDX_MASK);
  4035d8:	2101      	movs	r1, #1
  4035da:	4638      	mov	r0, r7
  4035dc:	4c17      	ldr	r4, [pc, #92]	; (40363c <task_orientacao+0xc0>)
  4035de:	47a0      	blx	r4
				pio_set(LED2_PIO, LED2_PIO_IDX_MASK);
  4035e0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4035e4:	4630      	mov	r0, r6
  4035e6:	47a0      	blx	r4
				vTaskDelay(10);
  4035e8:	200a      	movs	r0, #10
  4035ea:	4b16      	ldr	r3, [pc, #88]	; (403644 <task_orientacao+0xc8>)
  4035ec:	4798      	blx	r3
  4035ee:	e7cf      	b.n	403590 <task_orientacao+0x14>
				pio_clear(LED2_PIO, LED2_PIO_IDX_MASK);
  4035f0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4035f4:	4630      	mov	r0, r6
  4035f6:	4b10      	ldr	r3, [pc, #64]	; (403638 <task_orientacao+0xbc>)
  4035f8:	4798      	blx	r3
				pio_set(LED1_PIO, LED1_PIO_IDX_MASK);
  4035fa:	2101      	movs	r1, #1
  4035fc:	4638      	mov	r0, r7
  4035fe:	4c0f      	ldr	r4, [pc, #60]	; (40363c <task_orientacao+0xc0>)
  403600:	47a0      	blx	r4
				pio_set(LED3_PIO, LED3_PIO_IDX_MASK);
  403602:	2104      	movs	r1, #4
  403604:	480e      	ldr	r0, [pc, #56]	; (403640 <task_orientacao+0xc4>)
  403606:	47a0      	blx	r4
				vTaskDelay(10);
  403608:	200a      	movs	r0, #10
  40360a:	4b0e      	ldr	r3, [pc, #56]	; (403644 <task_orientacao+0xc8>)
  40360c:	4798      	blx	r3
  40360e:	e7c3      	b.n	403598 <task_orientacao+0x1c>
			pio_set(LED1_PIO, LED1_PIO_IDX_MASK);
  403610:	2101      	movs	r1, #1
  403612:	4638      	mov	r0, r7
  403614:	4c09      	ldr	r4, [pc, #36]	; (40363c <task_orientacao+0xc0>)
  403616:	47a0      	blx	r4
			pio_set(LED2_PIO, LED2_PIO_IDX_MASK);
  403618:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40361c:	4630      	mov	r0, r6
  40361e:	47a0      	blx	r4
			pio_set(LED3_PIO, LED3_PIO_IDX_MASK);
  403620:	2104      	movs	r1, #4
  403622:	4807      	ldr	r0, [pc, #28]	; (403640 <task_orientacao+0xc4>)
  403624:	47a0      	blx	r4
  403626:	e7b7      	b.n	403598 <task_orientacao+0x1c>
  403628:	20400c1c 	.word	0x20400c1c
  40362c:	400e0e00 	.word	0x400e0e00
  403630:	400e1200 	.word	0x400e1200
  403634:	00401861 	.word	0x00401861
  403638:	00400469 	.word	0x00400469
  40363c:	00400465 	.word	0x00400465
  403640:	400e1000 	.word	0x400e1000
  403644:	004022e5 	.word	0x004022e5

00403648 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  403648:	b5f0      	push	{r4, r5, r6, r7, lr}
  40364a:	b083      	sub	sp, #12
  40364c:	4605      	mov	r5, r0
  40364e:	460c      	mov	r4, r1
	uint32_t val = 0;
  403650:	2300      	movs	r3, #0
  403652:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403654:	4b2a      	ldr	r3, [pc, #168]	; (403700 <usart_serial_getchar+0xb8>)
  403656:	4298      	cmp	r0, r3
  403658:	d013      	beq.n	403682 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40365a:	4b2a      	ldr	r3, [pc, #168]	; (403704 <usart_serial_getchar+0xbc>)
  40365c:	4298      	cmp	r0, r3
  40365e:	d018      	beq.n	403692 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  403660:	4b29      	ldr	r3, [pc, #164]	; (403708 <usart_serial_getchar+0xc0>)
  403662:	4298      	cmp	r0, r3
  403664:	d01d      	beq.n	4036a2 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403666:	4b29      	ldr	r3, [pc, #164]	; (40370c <usart_serial_getchar+0xc4>)
  403668:	429d      	cmp	r5, r3
  40366a:	d022      	beq.n	4036b2 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40366c:	4b28      	ldr	r3, [pc, #160]	; (403710 <usart_serial_getchar+0xc8>)
  40366e:	429d      	cmp	r5, r3
  403670:	d027      	beq.n	4036c2 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  403672:	4b28      	ldr	r3, [pc, #160]	; (403714 <usart_serial_getchar+0xcc>)
  403674:	429d      	cmp	r5, r3
  403676:	d02e      	beq.n	4036d6 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  403678:	4b27      	ldr	r3, [pc, #156]	; (403718 <usart_serial_getchar+0xd0>)
  40367a:	429d      	cmp	r5, r3
  40367c:	d035      	beq.n	4036ea <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  40367e:	b003      	add	sp, #12
  403680:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  403682:	461f      	mov	r7, r3
  403684:	4e25      	ldr	r6, [pc, #148]	; (40371c <usart_serial_getchar+0xd4>)
  403686:	4621      	mov	r1, r4
  403688:	4638      	mov	r0, r7
  40368a:	47b0      	blx	r6
  40368c:	2800      	cmp	r0, #0
  40368e:	d1fa      	bne.n	403686 <usart_serial_getchar+0x3e>
  403690:	e7e9      	b.n	403666 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  403692:	461f      	mov	r7, r3
  403694:	4e21      	ldr	r6, [pc, #132]	; (40371c <usart_serial_getchar+0xd4>)
  403696:	4621      	mov	r1, r4
  403698:	4638      	mov	r0, r7
  40369a:	47b0      	blx	r6
  40369c:	2800      	cmp	r0, #0
  40369e:	d1fa      	bne.n	403696 <usart_serial_getchar+0x4e>
  4036a0:	e7e4      	b.n	40366c <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  4036a2:	461f      	mov	r7, r3
  4036a4:	4e1d      	ldr	r6, [pc, #116]	; (40371c <usart_serial_getchar+0xd4>)
  4036a6:	4621      	mov	r1, r4
  4036a8:	4638      	mov	r0, r7
  4036aa:	47b0      	blx	r6
  4036ac:	2800      	cmp	r0, #0
  4036ae:	d1fa      	bne.n	4036a6 <usart_serial_getchar+0x5e>
  4036b0:	e7df      	b.n	403672 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  4036b2:	461f      	mov	r7, r3
  4036b4:	4e19      	ldr	r6, [pc, #100]	; (40371c <usart_serial_getchar+0xd4>)
  4036b6:	4621      	mov	r1, r4
  4036b8:	4638      	mov	r0, r7
  4036ba:	47b0      	blx	r6
  4036bc:	2800      	cmp	r0, #0
  4036be:	d1fa      	bne.n	4036b6 <usart_serial_getchar+0x6e>
  4036c0:	e7da      	b.n	403678 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  4036c2:	461e      	mov	r6, r3
  4036c4:	4d16      	ldr	r5, [pc, #88]	; (403720 <usart_serial_getchar+0xd8>)
  4036c6:	a901      	add	r1, sp, #4
  4036c8:	4630      	mov	r0, r6
  4036ca:	47a8      	blx	r5
  4036cc:	2800      	cmp	r0, #0
  4036ce:	d1fa      	bne.n	4036c6 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  4036d0:	9b01      	ldr	r3, [sp, #4]
  4036d2:	7023      	strb	r3, [r4, #0]
  4036d4:	e7d3      	b.n	40367e <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4036d6:	461e      	mov	r6, r3
  4036d8:	4d11      	ldr	r5, [pc, #68]	; (403720 <usart_serial_getchar+0xd8>)
  4036da:	a901      	add	r1, sp, #4
  4036dc:	4630      	mov	r0, r6
  4036de:	47a8      	blx	r5
  4036e0:	2800      	cmp	r0, #0
  4036e2:	d1fa      	bne.n	4036da <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  4036e4:	9b01      	ldr	r3, [sp, #4]
  4036e6:	7023      	strb	r3, [r4, #0]
  4036e8:	e7c9      	b.n	40367e <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4036ea:	461e      	mov	r6, r3
  4036ec:	4d0c      	ldr	r5, [pc, #48]	; (403720 <usart_serial_getchar+0xd8>)
  4036ee:	a901      	add	r1, sp, #4
  4036f0:	4630      	mov	r0, r6
  4036f2:	47a8      	blx	r5
  4036f4:	2800      	cmp	r0, #0
  4036f6:	d1fa      	bne.n	4036ee <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  4036f8:	9b01      	ldr	r3, [sp, #4]
  4036fa:	7023      	strb	r3, [r4, #0]
}
  4036fc:	e7bf      	b.n	40367e <usart_serial_getchar+0x36>
  4036fe:	bf00      	nop
  403700:	400e0800 	.word	0x400e0800
  403704:	400e0a00 	.word	0x400e0a00
  403708:	400e1a00 	.word	0x400e1a00
  40370c:	400e1c00 	.word	0x400e1c00
  403710:	40024000 	.word	0x40024000
  403714:	40028000 	.word	0x40028000
  403718:	4002c000 	.word	0x4002c000
  40371c:	00400a5b 	.word	0x00400a5b
  403720:	00400b67 	.word	0x00400b67

00403724 <usart_serial_putchar>:
{
  403724:	b570      	push	{r4, r5, r6, lr}
  403726:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  403728:	4b2a      	ldr	r3, [pc, #168]	; (4037d4 <usart_serial_putchar+0xb0>)
  40372a:	4298      	cmp	r0, r3
  40372c:	d013      	beq.n	403756 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  40372e:	4b2a      	ldr	r3, [pc, #168]	; (4037d8 <usart_serial_putchar+0xb4>)
  403730:	4298      	cmp	r0, r3
  403732:	d019      	beq.n	403768 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  403734:	4b29      	ldr	r3, [pc, #164]	; (4037dc <usart_serial_putchar+0xb8>)
  403736:	4298      	cmp	r0, r3
  403738:	d01f      	beq.n	40377a <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  40373a:	4b29      	ldr	r3, [pc, #164]	; (4037e0 <usart_serial_putchar+0xbc>)
  40373c:	4298      	cmp	r0, r3
  40373e:	d025      	beq.n	40378c <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  403740:	4b28      	ldr	r3, [pc, #160]	; (4037e4 <usart_serial_putchar+0xc0>)
  403742:	4298      	cmp	r0, r3
  403744:	d02b      	beq.n	40379e <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  403746:	4b28      	ldr	r3, [pc, #160]	; (4037e8 <usart_serial_putchar+0xc4>)
  403748:	4298      	cmp	r0, r3
  40374a:	d031      	beq.n	4037b0 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  40374c:	4b27      	ldr	r3, [pc, #156]	; (4037ec <usart_serial_putchar+0xc8>)
  40374e:	4298      	cmp	r0, r3
  403750:	d037      	beq.n	4037c2 <usart_serial_putchar+0x9e>
	return 0;
  403752:	2000      	movs	r0, #0
}
  403754:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403756:	461e      	mov	r6, r3
  403758:	4d25      	ldr	r5, [pc, #148]	; (4037f0 <usart_serial_putchar+0xcc>)
  40375a:	4621      	mov	r1, r4
  40375c:	4630      	mov	r0, r6
  40375e:	47a8      	blx	r5
  403760:	2800      	cmp	r0, #0
  403762:	d1fa      	bne.n	40375a <usart_serial_putchar+0x36>
		return 1;
  403764:	2001      	movs	r0, #1
  403766:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403768:	461e      	mov	r6, r3
  40376a:	4d21      	ldr	r5, [pc, #132]	; (4037f0 <usart_serial_putchar+0xcc>)
  40376c:	4621      	mov	r1, r4
  40376e:	4630      	mov	r0, r6
  403770:	47a8      	blx	r5
  403772:	2800      	cmp	r0, #0
  403774:	d1fa      	bne.n	40376c <usart_serial_putchar+0x48>
		return 1;
  403776:	2001      	movs	r0, #1
  403778:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40377a:	461e      	mov	r6, r3
  40377c:	4d1c      	ldr	r5, [pc, #112]	; (4037f0 <usart_serial_putchar+0xcc>)
  40377e:	4621      	mov	r1, r4
  403780:	4630      	mov	r0, r6
  403782:	47a8      	blx	r5
  403784:	2800      	cmp	r0, #0
  403786:	d1fa      	bne.n	40377e <usart_serial_putchar+0x5a>
		return 1;
  403788:	2001      	movs	r0, #1
  40378a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40378c:	461e      	mov	r6, r3
  40378e:	4d18      	ldr	r5, [pc, #96]	; (4037f0 <usart_serial_putchar+0xcc>)
  403790:	4621      	mov	r1, r4
  403792:	4630      	mov	r0, r6
  403794:	47a8      	blx	r5
  403796:	2800      	cmp	r0, #0
  403798:	d1fa      	bne.n	403790 <usart_serial_putchar+0x6c>
		return 1;
  40379a:	2001      	movs	r0, #1
  40379c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40379e:	461e      	mov	r6, r3
  4037a0:	4d14      	ldr	r5, [pc, #80]	; (4037f4 <usart_serial_putchar+0xd0>)
  4037a2:	4621      	mov	r1, r4
  4037a4:	4630      	mov	r0, r6
  4037a6:	47a8      	blx	r5
  4037a8:	2800      	cmp	r0, #0
  4037aa:	d1fa      	bne.n	4037a2 <usart_serial_putchar+0x7e>
		return 1;
  4037ac:	2001      	movs	r0, #1
  4037ae:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4037b0:	461e      	mov	r6, r3
  4037b2:	4d10      	ldr	r5, [pc, #64]	; (4037f4 <usart_serial_putchar+0xd0>)
  4037b4:	4621      	mov	r1, r4
  4037b6:	4630      	mov	r0, r6
  4037b8:	47a8      	blx	r5
  4037ba:	2800      	cmp	r0, #0
  4037bc:	d1fa      	bne.n	4037b4 <usart_serial_putchar+0x90>
		return 1;
  4037be:	2001      	movs	r0, #1
  4037c0:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4037c2:	461e      	mov	r6, r3
  4037c4:	4d0b      	ldr	r5, [pc, #44]	; (4037f4 <usart_serial_putchar+0xd0>)
  4037c6:	4621      	mov	r1, r4
  4037c8:	4630      	mov	r0, r6
  4037ca:	47a8      	blx	r5
  4037cc:	2800      	cmp	r0, #0
  4037ce:	d1fa      	bne.n	4037c6 <usart_serial_putchar+0xa2>
		return 1;
  4037d0:	2001      	movs	r0, #1
  4037d2:	bd70      	pop	{r4, r5, r6, pc}
  4037d4:	400e0800 	.word	0x400e0800
  4037d8:	400e0a00 	.word	0x400e0a00
  4037dc:	400e1a00 	.word	0x400e1a00
  4037e0:	400e1c00 	.word	0x400e1c00
  4037e4:	40024000 	.word	0x40024000
  4037e8:	40028000 	.word	0x40028000
  4037ec:	4002c000 	.word	0x4002c000
  4037f0:	00400a49 	.word	0x00400a49
  4037f4:	00400b51 	.word	0x00400b51

004037f8 <vApplicationStackOverflowHook>:
                                          signed char *pcTaskName) {
  4037f8:	b508      	push	{r3, lr}
  printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  4037fa:	460a      	mov	r2, r1
  4037fc:	4601      	mov	r1, r0
  4037fe:	4802      	ldr	r0, [pc, #8]	; (403808 <vApplicationStackOverflowHook+0x10>)
  403800:	4b02      	ldr	r3, [pc, #8]	; (40380c <vApplicationStackOverflowHook+0x14>)
  403802:	4798      	blx	r3
  403804:	e7fe      	b.n	403804 <vApplicationStackOverflowHook+0xc>
  403806:	bf00      	nop
  403808:	0040b924 	.word	0x0040b924
  40380c:	00406fc9 	.word	0x00406fc9

00403810 <vApplicationIdleHook>:
extern void vApplicationIdleHook(void) {}
  403810:	4770      	bx	lr

00403812 <vApplicationTickHook>:
extern void vApplicationTickHook(void) {}
  403812:	4770      	bx	lr

00403814 <vApplicationMallocFailedHook>:
  403814:	f04f 0380 	mov.w	r3, #128	; 0x80
  403818:	b672      	cpsid	i
  40381a:	f383 8811 	msr	BASEPRI, r3
  40381e:	f3bf 8f6f 	isb	sy
  403822:	f3bf 8f4f 	dsb	sy
  403826:	b662      	cpsie	i
  403828:	e7fe      	b.n	403828 <vApplicationMallocFailedHook+0x14>
	...

0040382c <io_init>:
void io_init(void){
  40382c:	b570      	push	{r4, r5, r6, lr}
  pmc_enable_periph_clk(LED_PIO_ID);
  40382e:	200c      	movs	r0, #12
  403830:	4d12      	ldr	r5, [pc, #72]	; (40387c <io_init+0x50>)
  403832:	47a8      	blx	r5
	pio_configure(LED_PIO, PIO_OUTPUT_0, LED_PIO_IDX_MASK, PIO_DEFAULT);
  403834:	4e12      	ldr	r6, [pc, #72]	; (403880 <io_init+0x54>)
  403836:	2300      	movs	r3, #0
  403838:	f44f 7280 	mov.w	r2, #256	; 0x100
  40383c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  403840:	4630      	mov	r0, r6
  403842:	4c10      	ldr	r4, [pc, #64]	; (403884 <io_init+0x58>)
  403844:	47a0      	blx	r4
	pmc_enable_periph_clk(LED1_PIO_ID);
  403846:	200a      	movs	r0, #10
  403848:	47a8      	blx	r5
	pio_configure(LED1_PIO, PIO_OUTPUT_0, LED1_PIO_IDX_MASK, PIO_DEFAULT);
  40384a:	2300      	movs	r3, #0
  40384c:	2201      	movs	r2, #1
  40384e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  403852:	480d      	ldr	r0, [pc, #52]	; (403888 <io_init+0x5c>)
  403854:	47a0      	blx	r4
	pmc_enable_periph_clk(LED2_PIO_ID);
  403856:	200c      	movs	r0, #12
  403858:	47a8      	blx	r5
	pio_configure(LED2_PIO, PIO_OUTPUT_0, LED2_PIO_IDX_MASK, PIO_DEFAULT);
  40385a:	2300      	movs	r3, #0
  40385c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  403860:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  403864:	4630      	mov	r0, r6
  403866:	47a0      	blx	r4
	pmc_enable_periph_clk(LED3_PIO_ID);
  403868:	200b      	movs	r0, #11
  40386a:	47a8      	blx	r5
	pio_configure(LED3_PIO, PIO_OUTPUT_0, LED3_PIO_IDX_MASK, PIO_DEFAULT);
  40386c:	2300      	movs	r3, #0
  40386e:	2204      	movs	r2, #4
  403870:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  403874:	4805      	ldr	r0, [pc, #20]	; (40388c <io_init+0x60>)
  403876:	47a0      	blx	r4
  403878:	bd70      	pop	{r4, r5, r6, pc}
  40387a:	bf00      	nop
  40387c:	004007c9 	.word	0x004007c9
  403880:	400e1200 	.word	0x400e1200
  403884:	0040055d 	.word	0x0040055d
  403888:	400e0e00 	.word	0x400e0e00
  40388c:	400e1000 	.word	0x400e1000

00403890 <task_house_down>:
		}
  }
}

static void task_house_down(void *pvParameters) {
  403890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  io_init();
  403894:	4b12      	ldr	r3, [pc, #72]	; (4038e0 <task_house_down+0x50>)
  403896:	4798      	blx	r3
  pio_set(LED_PIO, LED_PIO_IDX_MASK);
  403898:	f44f 7180 	mov.w	r1, #256	; 0x100
  40389c:	4811      	ldr	r0, [pc, #68]	; (4038e4 <task_house_down+0x54>)
  40389e:	4b12      	ldr	r3, [pc, #72]	; (4038e8 <task_house_down+0x58>)
  4038a0:	4798      	blx	r3
  for (;;) {
    if (xSemaphoreTake(xSemaphoreLed, 250)) {
  4038a2:	4f12      	ldr	r7, [pc, #72]	; (4038ec <task_house_down+0x5c>)
  4038a4:	4e12      	ldr	r6, [pc, #72]	; (4038f0 <task_house_down+0x60>)
			for(int i = 0; i < 5; i++){
				pio_clear(LED_PIO, LED_PIO_IDX_MASK);
  4038a6:	f8df 903c 	ldr.w	r9, [pc, #60]	; 4038e4 <task_house_down+0x54>
    if (xSemaphoreTake(xSemaphoreLed, 250)) {
  4038aa:	24fa      	movs	r4, #250	; 0xfa
  4038ac:	4621      	mov	r1, r4
  4038ae:	6838      	ldr	r0, [r7, #0]
  4038b0:	47b0      	blx	r6
  4038b2:	2800      	cmp	r0, #0
  4038b4:	d0fa      	beq.n	4038ac <task_house_down+0x1c>
  4038b6:	2405      	movs	r4, #5
				pio_clear(LED_PIO, LED_PIO_IDX_MASK);
  4038b8:	f44f 7880 	mov.w	r8, #256	; 0x100
  4038bc:	f8df a038 	ldr.w	sl, [pc, #56]	; 4038f8 <task_house_down+0x68>
  4038c0:	4641      	mov	r1, r8
  4038c2:	4648      	mov	r0, r9
  4038c4:	47d0      	blx	sl
				vTaskDelay(50);
  4038c6:	2032      	movs	r0, #50	; 0x32
  4038c8:	4d0a      	ldr	r5, [pc, #40]	; (4038f4 <task_house_down+0x64>)
  4038ca:	47a8      	blx	r5
				pio_set(LED_PIO, LED_PIO_IDX_MASK);
  4038cc:	4641      	mov	r1, r8
  4038ce:	4648      	mov	r0, r9
  4038d0:	4b05      	ldr	r3, [pc, #20]	; (4038e8 <task_house_down+0x58>)
  4038d2:	4798      	blx	r3
				vTaskDelay(50);
  4038d4:	2032      	movs	r0, #50	; 0x32
  4038d6:	47a8      	blx	r5
			for(int i = 0; i < 5; i++){
  4038d8:	3c01      	subs	r4, #1
  4038da:	d1f1      	bne.n	4038c0 <task_house_down+0x30>
  4038dc:	e7e5      	b.n	4038aa <task_house_down+0x1a>
  4038de:	bf00      	nop
  4038e0:	0040382d 	.word	0x0040382d
  4038e4:	400e1200 	.word	0x400e1200
  4038e8:	00400465 	.word	0x00400465
  4038ec:	20400c20 	.word	0x20400c20
  4038f0:	004019f9 	.word	0x004019f9
  4038f4:	004022e5 	.word	0x004022e5
  4038f8:	00400469 	.word	0x00400469

004038fc <mcu6050_i2c_bus_init>:
{
  4038fc:	b530      	push	{r4, r5, lr}
  4038fe:	b085      	sub	sp, #20
    pmc_enable_periph_clk(ID_TWIHS2);
  403900:	2029      	movs	r0, #41	; 0x29
  403902:	4c0e      	ldr	r4, [pc, #56]	; (40393c <mcu6050_i2c_bus_init+0x40>)
  403904:	47a0      	blx	r4
    mcu6050_option.master_clk = sysclk_get_cpu_hz();
  403906:	4b0e      	ldr	r3, [pc, #56]	; (403940 <mcu6050_i2c_bus_init+0x44>)
  403908:	9301      	str	r3, [sp, #4]
    mcu6050_option.speed      = 40000;
  40390a:	f649 4340 	movw	r3, #40000	; 0x9c40
  40390e:	9302      	str	r3, [sp, #8]
    twihs_master_init(TWIHS2, &mcu6050_option);
  403910:	a901      	add	r1, sp, #4
  403912:	480c      	ldr	r0, [pc, #48]	; (403944 <mcu6050_i2c_bus_init+0x48>)
  403914:	4b0c      	ldr	r3, [pc, #48]	; (403948 <mcu6050_i2c_bus_init+0x4c>)
  403916:	4798      	blx	r3
    pmc_enable_periph_clk(ID_PIOD);
  403918:	2010      	movs	r0, #16
  40391a:	47a0      	blx	r4
    pio_set_peripheral(PIOD, PIO_TYPE_PIO_PERIPH_C, 1 << 28);
  40391c:	4d0b      	ldr	r5, [pc, #44]	; (40394c <mcu6050_i2c_bus_init+0x50>)
  40391e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403922:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  403926:	4628      	mov	r0, r5
  403928:	4c09      	ldr	r4, [pc, #36]	; (403950 <mcu6050_i2c_bus_init+0x54>)
  40392a:	47a0      	blx	r4
    pio_set_peripheral(PIOD, PIO_TYPE_PIO_PERIPH_C, 1 << 27);
  40392c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  403930:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  403934:	4628      	mov	r0, r5
  403936:	47a0      	blx	r4
}
  403938:	b005      	add	sp, #20
  40393a:	bd30      	pop	{r4, r5, pc}
  40393c:	004007c9 	.word	0x004007c9
  403940:	11e1a300 	.word	0x11e1a300
  403944:	40060000 	.word	0x40060000
  403948:	00400899 	.word	0x00400899
  40394c:	400e1400 	.word	0x400e1400
  403950:	0040046d 	.word	0x0040046d

00403954 <mcu6050_i2c_bus_write>:
{
  403954:	b500      	push	{lr}
  403956:	b087      	sub	sp, #28
    p_packet.chip         = dev_addr;
  403958:	f88d 0014 	strb.w	r0, [sp, #20]
    p_packet.addr[0]      = reg_addr;
  40395c:	f88d 1004 	strb.w	r1, [sp, #4]
    p_packet.addr_length  = 1;
  403960:	2101      	movs	r1, #1
  403962:	9102      	str	r1, [sp, #8]
    p_packet.buffer       = reg_data;
  403964:	9203      	str	r2, [sp, #12]
    p_packet.length       = cnt;
  403966:	9304      	str	r3, [sp, #16]
    ierror = twihs_master_write(TWIHS2, &p_packet);
  403968:	a901      	add	r1, sp, #4
  40396a:	4803      	ldr	r0, [pc, #12]	; (403978 <mcu6050_i2c_bus_write+0x24>)
  40396c:	4b03      	ldr	r3, [pc, #12]	; (40397c <mcu6050_i2c_bus_write+0x28>)
  40396e:	4798      	blx	r3
}
  403970:	b240      	sxtb	r0, r0
  403972:	b007      	add	sp, #28
  403974:	f85d fb04 	ldr.w	pc, [sp], #4
  403978:	40060000 	.word	0x40060000
  40397c:	0040097b 	.word	0x0040097b

00403980 <mcu6050_i2c_bus_read>:
{
  403980:	b500      	push	{lr}
  403982:	b087      	sub	sp, #28
    p_packet.chip         = dev_addr;
  403984:	f88d 0014 	strb.w	r0, [sp, #20]
    p_packet.addr[0]      = reg_addr;
  403988:	f88d 1004 	strb.w	r1, [sp, #4]
    p_packet.addr_length  = 1;
  40398c:	2101      	movs	r1, #1
  40398e:	9102      	str	r1, [sp, #8]
    p_packet.buffer       = reg_data;
  403990:	9203      	str	r2, [sp, #12]
    p_packet.length       = cnt;
  403992:	9304      	str	r3, [sp, #16]
    ierror = twihs_master_read(TWIHS2, &p_packet);
  403994:	a901      	add	r1, sp, #4
  403996:	4803      	ldr	r0, [pc, #12]	; (4039a4 <mcu6050_i2c_bus_read+0x24>)
  403998:	4b03      	ldr	r3, [pc, #12]	; (4039a8 <mcu6050_i2c_bus_read+0x28>)
  40399a:	4798      	blx	r3
}
  40399c:	b240      	sxtb	r0, r0
  40399e:	b007      	add	sp, #28
  4039a0:	f85d fb04 	ldr.w	pc, [sp], #4
  4039a4:	40060000 	.word	0x40060000
  4039a8:	004008cd 	.word	0x004008cd
  4039ac:	00000000 	.word	0x00000000

004039b0 <task_imu>:
			}
		}
  }
}

static void task_imu(void *pvParameters) {
  4039b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4039b4:	ed2d 8b0a 	vpush	{d8-d12}
  4039b8:	b0b2      	sub	sp, #200	; 0xc8
  mcu6050_i2c_bus_init();
  4039ba:	4b43      	ldr	r3, [pc, #268]	; (403ac8 <task_imu+0x118>)
  4039bc:	4798      	blx	r3
  uint8_t bufferTX[10];

  /* resultado da função */
  uint8_t rtn;

  rtn = twihs_probe(TWIHS2, MPU6050_DEFAULT_ADDRESS);
  4039be:	2168      	movs	r1, #104	; 0x68
  4039c0:	4842      	ldr	r0, [pc, #264]	; (403acc <task_imu+0x11c>)
  4039c2:	4b43      	ldr	r3, [pc, #268]	; (403ad0 <task_imu+0x120>)
  4039c4:	4798      	blx	r3
  if (rtn != TWIHS_SUCCESS){
  4039c6:	b2c0      	uxtb	r0, r0
  4039c8:	2800      	cmp	r0, #0
  4039ca:	d03f      	beq.n	403a4c <task_imu+0x9c>
    printf("[ERRO] [i2c] [probe] \n");
  4039cc:	4841      	ldr	r0, [pc, #260]	; (403ad4 <task_imu+0x124>)
  4039ce:	4b42      	ldr	r3, [pc, #264]	; (403ad8 <task_imu+0x128>)
  4039d0:	4798      	blx	r3
  } else {
    printf("[DADO] [i2c] probe OK\n" );
  }

  // Lê registrador WHO AM I
  rtn = mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_WHO_AM_I, bufferRX, 1);
  4039d2:	2301      	movs	r3, #1
  4039d4:	aa2b      	add	r2, sp, #172	; 0xac
  4039d6:	2175      	movs	r1, #117	; 0x75
  4039d8:	2068      	movs	r0, #104	; 0x68
  4039da:	4c40      	ldr	r4, [pc, #256]	; (403adc <task_imu+0x12c>)
  4039dc:	47a0      	blx	r4
  if (rtn != TWIHS_SUCCESS){
  4039de:	2800      	cmp	r0, #0
  4039e0:	d038      	beq.n	403a54 <task_imu+0xa4>
    printf("[ERRO] [i2c] [read] \n");
  4039e2:	483f      	ldr	r0, [pc, #252]	; (403ae0 <task_imu+0x130>)
  4039e4:	4b3c      	ldr	r3, [pc, #240]	; (403ad8 <task_imu+0x128>)
  4039e6:	4798      	blx	r3
  } else {
    printf("[DADO] [i2c] %x:%x \n", MPU6050_RA_WHO_AM_I, bufferRX[0]);
  }

  if (bufferRX[0] == 0x68){
  4039e8:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
  4039ec:	2b68      	cmp	r3, #104	; 0x68
	printf("Sucesso! MPU6050 encontrado!\r");
  4039ee:	bf0c      	ite	eq
  4039f0:	483c      	ldreq	r0, [pc, #240]	; (403ae4 <task_imu+0x134>)
  } else {
	printf("Falha! MPU6050 não encontrado!\r");
  4039f2:	483d      	ldrne	r0, [pc, #244]	; (403ae8 <task_imu+0x138>)
  4039f4:	4b3d      	ldr	r3, [pc, #244]	; (403aec <task_imu+0x13c>)
  4039f6:	4798      	blx	r3
  }
  
  // Set Clock source
  bufferTX[0] = MPU6050_CLOCK_PLL_XGYRO;
  4039f8:	2301      	movs	r3, #1
  4039fa:	aa32      	add	r2, sp, #200	; 0xc8
  4039fc:	f802 3d28 	strb.w	r3, [r2, #-40]!
  rtn = mcu6050_i2c_bus_write(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_PWR_MGMT_1, bufferTX, 1);
  403a00:	216b      	movs	r1, #107	; 0x6b
  403a02:	2068      	movs	r0, #104	; 0x68
  403a04:	4c3a      	ldr	r4, [pc, #232]	; (403af0 <task_imu+0x140>)
  403a06:	47a0      	blx	r4
  if(rtn != TWIHS_SUCCESS)
  403a08:	bb58      	cbnz	r0, 403a62 <task_imu+0xb2>
  printf("[ERRO] [i2c] [write] \n");

  // Aceletromtro em 2G
  bufferTX[0] = MPU6050_ACCEL_FS_2 << MPU6050_ACONFIG_AFS_SEL_BIT;
  403a0a:	aa32      	add	r2, sp, #200	; 0xc8
  403a0c:	2300      	movs	r3, #0
  403a0e:	f802 3d28 	strb.w	r3, [r2, #-40]!
  rtn = mcu6050_i2c_bus_write(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_CONFIG, bufferTX, 1);
  403a12:	2301      	movs	r3, #1
  403a14:	211c      	movs	r1, #28
  403a16:	2068      	movs	r0, #104	; 0x68
  403a18:	4c35      	ldr	r4, [pc, #212]	; (403af0 <task_imu+0x140>)
  403a1a:	47a0      	blx	r4
  if(rtn != TWIHS_SUCCESS)
  403a1c:	bb28      	cbnz	r0, 403a6a <task_imu+0xba>
  printf("[ERRO] [i2c] [write] \n");

  // Configura range giroscopio para operar com 250 °/s
  bufferTX[0] = 0x00; // 250 °/s
  403a1e:	aa32      	add	r2, sp, #200	; 0xc8
  403a20:	2300      	movs	r3, #0
  403a22:	f802 3d28 	strb.w	r3, [r2, #-40]!
  rtn = mcu6050_i2c_bus_write(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_CONFIG, bufferTX, 1);
  403a26:	2301      	movs	r3, #1
  403a28:	211b      	movs	r1, #27
  403a2a:	2068      	movs	r0, #104	; 0x68
  403a2c:	4c30      	ldr	r4, [pc, #192]	; (403af0 <task_imu+0x140>)
  403a2e:	47a0      	blx	r4
  if(rtn != TWIHS_SUCCESS)
  403a30:	b9f8      	cbnz	r0, 403a72 <task_imu+0xc2>
  
  enum orientacao ori;

  /* Inicializa Função de fusão */
  FusionAhrs ahrs;
  FusionAhrsInitialise(&ahrs);
  403a32:	a80e      	add	r0, sp, #56	; 0x38
  403a34:	4b2f      	ldr	r3, [pc, #188]	; (403af4 <task_imu+0x144>)
  403a36:	4798      	blx	r3
	  volatile uint8_t  raw_gyr_xHigh, raw_gyr_yHigh, raw_gyr_zHigh;
	  volatile uint8_t  raw_gyr_xLow,  raw_gyr_yLow,  raw_gyr_zLow;
	  float proc_gyr_x, proc_gyr_y, proc_gyr_z;
	  
	  // Le valor do acc X High e Low
	  mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, &raw_acc_xHigh, 1);
  403a38:	2501      	movs	r5, #1
  403a3a:	2668      	movs	r6, #104	; 0x68
	  mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_XOUT_L, &raw_acc_xLow,  1);
		
	  // Le valor do acc y High e  Low
	  mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_YOUT_H, &raw_acc_yHigh, 1);
	  mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_YOUT_H, &raw_acc_yHigh, 1);
	  mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_ZOUT_L, &raw_acc_yLow,  1);
  403a3c:	f04f 0a40 	mov.w	sl, #64	; 0x40
	  mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_XOUT_L, &raw_gyr_xLow,  1);
	  
	  // Le valor do gyr y High e  Low
	  mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_YOUT_H, &raw_gyr_yHigh, 1);
	  mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_YOUT_H, &raw_gyr_yHigh, 1);
	  mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_ZOUT_L, &raw_gyr_yLow,  1);
  403a40:	2748      	movs	r7, #72	; 0x48
    return radians * (180.0f / (float) M_PI);
  403a42:	ed9f 9a2d 	vldr	s18, [pc, #180]	; 403af8 <task_imu+0x148>
      printf("Roll %0.1f, Pitch %0.1f, Yaw %0.1f\n", euler.angle.roll, euler.angle.pitch, euler.angle.yaw);

      // EM RELAÇÃO À POSIÇÃO DE INÍCIO DO SENSOR

      // em relação ao eixo z, rotacionando para a direita
      if (euler.angle.yaw > 60){
  403a46:	eddf 9a2d 	vldr	s19, [pc, #180]	; 403afc <task_imu+0x14c>
  403a4a:	e06c      	b.n	403b26 <task_imu+0x176>
    printf("[DADO] [i2c] probe OK\n" );
  403a4c:	482c      	ldr	r0, [pc, #176]	; (403b00 <task_imu+0x150>)
  403a4e:	4b22      	ldr	r3, [pc, #136]	; (403ad8 <task_imu+0x128>)
  403a50:	4798      	blx	r3
  403a52:	e7be      	b.n	4039d2 <task_imu+0x22>
    printf("[DADO] [i2c] %x:%x \n", MPU6050_RA_WHO_AM_I, bufferRX[0]);
  403a54:	f89d 20ac 	ldrb.w	r2, [sp, #172]	; 0xac
  403a58:	2175      	movs	r1, #117	; 0x75
  403a5a:	482a      	ldr	r0, [pc, #168]	; (403b04 <task_imu+0x154>)
  403a5c:	4b23      	ldr	r3, [pc, #140]	; (403aec <task_imu+0x13c>)
  403a5e:	4798      	blx	r3
  403a60:	e7c2      	b.n	4039e8 <task_imu+0x38>
  printf("[ERRO] [i2c] [write] \n");
  403a62:	4829      	ldr	r0, [pc, #164]	; (403b08 <task_imu+0x158>)
  403a64:	4b1c      	ldr	r3, [pc, #112]	; (403ad8 <task_imu+0x128>)
  403a66:	4798      	blx	r3
  403a68:	e7cf      	b.n	403a0a <task_imu+0x5a>
  printf("[ERRO] [i2c] [write] \n");
  403a6a:	4827      	ldr	r0, [pc, #156]	; (403b08 <task_imu+0x158>)
  403a6c:	4b1a      	ldr	r3, [pc, #104]	; (403ad8 <task_imu+0x128>)
  403a6e:	4798      	blx	r3
  403a70:	e7d5      	b.n	403a1e <task_imu+0x6e>
  printf("[ERRO] [i2c] [write] \n");
  403a72:	4825      	ldr	r0, [pc, #148]	; (403b08 <task_imu+0x158>)
  403a74:	4b18      	ldr	r3, [pc, #96]	; (403ad8 <task_imu+0x128>)
  403a76:	4798      	blx	r3
  403a78:	e7db      	b.n	403a32 <task_imu+0x82>
		  xSemaphoreGive(xSemaphoreLed);
  403a7a:	2300      	movs	r3, #0
  403a7c:	461a      	mov	r2, r3
  403a7e:	4619      	mov	r1, r3
  403a80:	4822      	ldr	r0, [pc, #136]	; (403b0c <task_imu+0x15c>)
  403a82:	6800      	ldr	r0, [r0, #0]
  403a84:	4c22      	ldr	r4, [pc, #136]	; (403b10 <task_imu+0x160>)
  403a86:	47a0      	blx	r4
  403a88:	e142      	b.n	403d10 <task_imu+0x360>
    return asinf(value);
  403a8a:	ee17 0a90 	vmov	r0, s15
  403a8e:	4b21      	ldr	r3, [pc, #132]	; (403b14 <task_imu+0x164>)
  403a90:	4798      	blx	r3
  403a92:	ee0c 0a10 	vmov	s24, r0
  403a96:	e193      	b.n	403dc0 <task_imu+0x410>
        return (float) M_PI / -2.0f;
  403a98:	ed9f ca1f 	vldr	s24, [pc, #124]	; 403b18 <task_imu+0x168>
  403a9c:	e190      	b.n	403dc0 <task_imu+0x410>
		    ori = DIREITA;
  403a9e:	a932      	add	r1, sp, #200	; 0xc8
  403aa0:	f801 5d29 	strb.w	r5, [r1, #-41]!
		    xQueueSend(xQueueOrientacao, &ori, 0);
  403aa4:	2300      	movs	r3, #0
  403aa6:	461a      	mov	r2, r3
  403aa8:	481c      	ldr	r0, [pc, #112]	; (403b1c <task_imu+0x16c>)
  403aaa:	6800      	ldr	r0, [r0, #0]
  403aac:	4c18      	ldr	r4, [pc, #96]	; (403b10 <task_imu+0x160>)
  403aae:	47a0      	blx	r4
  403ab0:	e1b7      	b.n	403e22 <task_imu+0x472>
      }

      // em relação ao eixo z, rotacionando para a esquerda
      if (euler.angle.yaw < -60){
        ori = ESQUERDA;
  403ab2:	2200      	movs	r2, #0
  403ab4:	a932      	add	r1, sp, #200	; 0xc8
  403ab6:	f801 2d29 	strb.w	r2, [r1, #-41]!
        xQueueSend(xQueueOrientacao, &ori, 0);
  403aba:	4613      	mov	r3, r2
  403abc:	4817      	ldr	r0, [pc, #92]	; (403b1c <task_imu+0x16c>)
  403abe:	6800      	ldr	r0, [r0, #0]
  403ac0:	4c13      	ldr	r4, [pc, #76]	; (403b10 <task_imu+0x160>)
  403ac2:	47a0      	blx	r4
  403ac4:	e1b5      	b.n	403e32 <task_imu+0x482>
  403ac6:	bf00      	nop
  403ac8:	004038fd 	.word	0x004038fd
  403acc:	40060000 	.word	0x40060000
  403ad0:	00400a1d 	.word	0x00400a1d
  403ad4:	0040b844 	.word	0x0040b844
  403ad8:	0040708d 	.word	0x0040708d
  403adc:	00403981 	.word	0x00403981
  403ae0:	0040b874 	.word	0x0040b874
  403ae4:	0040b8a4 	.word	0x0040b8a4
  403ae8:	0040b8c4 	.word	0x0040b8c4
  403aec:	00406fc9 	.word	0x00406fc9
  403af0:	00403955 	.word	0x00403955
  403af4:	00402dbd 	.word	0x00402dbd
  403af8:	42652ee0 	.word	0x42652ee0
  403afc:	42700000 	.word	0x42700000
  403b00:	0040b85c 	.word	0x0040b85c
  403b04:	0040b88c 	.word	0x0040b88c
  403b08:	0040b8e8 	.word	0x0040b8e8
  403b0c:	20400c20 	.word	0x20400c20
  403b10:	0040155d 	.word	0x0040155d
  403b14:	00404211 	.word	0x00404211
  403b18:	bfc90fdb 	.word	0xbfc90fdb
  403b1c:	20400c1c 	.word	0x20400c1c
        ori = FRENTE;   
        xQueueSend(xQueueOrientacao, &ori, 0);
      }

	  // uma amostra a cada 10ms
	  vTaskDelay(10);
  403b20:	200a      	movs	r0, #10
  403b22:	4bd3      	ldr	r3, [pc, #844]	; (403e70 <task_imu+0x4c0>)
  403b24:	4798      	blx	r3
	  mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, &raw_acc_xHigh, 1);
  403b26:	462b      	mov	r3, r5
  403b28:	aa05      	add	r2, sp, #20
  403b2a:	213b      	movs	r1, #59	; 0x3b
  403b2c:	4630      	mov	r0, r6
  403b2e:	4cd1      	ldr	r4, [pc, #836]	; (403e74 <task_imu+0x4c4>)
  403b30:	47a0      	blx	r4
	  mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, &raw_acc_xHigh, 1);
  403b32:	462b      	mov	r3, r5
  403b34:	aa05      	add	r2, sp, #20
  403b36:	213b      	movs	r1, #59	; 0x3b
  403b38:	4630      	mov	r0, r6
  403b3a:	47a0      	blx	r4
	  mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_XOUT_L, &raw_acc_xLow,  1);
  403b3c:	462b      	mov	r3, r5
  403b3e:	f10d 0217 	add.w	r2, sp, #23
  403b42:	213c      	movs	r1, #60	; 0x3c
  403b44:	4630      	mov	r0, r6
  403b46:	47a0      	blx	r4
	  mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_XOUT_L, &raw_acc_xLow,  1);
  403b48:	462b      	mov	r3, r5
  403b4a:	f10d 0217 	add.w	r2, sp, #23
  403b4e:	213c      	movs	r1, #60	; 0x3c
  403b50:	4630      	mov	r0, r6
  403b52:	47a0      	blx	r4
	  mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_YOUT_H, &raw_acc_yHigh, 1);
  403b54:	462b      	mov	r3, r5
  403b56:	f10d 0215 	add.w	r2, sp, #21
  403b5a:	213d      	movs	r1, #61	; 0x3d
  403b5c:	4630      	mov	r0, r6
  403b5e:	47a0      	blx	r4
	  mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_YOUT_H, &raw_acc_yHigh, 1);
  403b60:	462b      	mov	r3, r5
  403b62:	f10d 0215 	add.w	r2, sp, #21
  403b66:	213d      	movs	r1, #61	; 0x3d
  403b68:	4630      	mov	r0, r6
  403b6a:	47a0      	blx	r4
	  mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_ZOUT_L, &raw_acc_yLow,  1);
  403b6c:	462b      	mov	r3, r5
  403b6e:	aa06      	add	r2, sp, #24
  403b70:	4651      	mov	r1, sl
  403b72:	4630      	mov	r0, r6
  403b74:	47a0      	blx	r4
      mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_ZOUT_L, &raw_acc_yLow,  1);
  403b76:	462b      	mov	r3, r5
  403b78:	aa06      	add	r2, sp, #24
  403b7a:	4651      	mov	r1, sl
  403b7c:	4630      	mov	r0, r6
  403b7e:	47a0      	blx	r4
	  mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_ZOUT_H, &raw_acc_zHigh, 1);
  403b80:	462b      	mov	r3, r5
  403b82:	f10d 0216 	add.w	r2, sp, #22
  403b86:	213f      	movs	r1, #63	; 0x3f
  403b88:	4630      	mov	r0, r6
  403b8a:	47a0      	blx	r4
	  mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_ZOUT_H, &raw_acc_zHigh, 1);
  403b8c:	462b      	mov	r3, r5
  403b8e:	f10d 0216 	add.w	r2, sp, #22
  403b92:	213f      	movs	r1, #63	; 0x3f
  403b94:	4630      	mov	r0, r6
  403b96:	47a0      	blx	r4
	  mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_ZOUT_L, &raw_acc_zLow,  1);
  403b98:	462b      	mov	r3, r5
  403b9a:	f10d 0219 	add.w	r2, sp, #25
  403b9e:	4651      	mov	r1, sl
  403ba0:	4630      	mov	r0, r6
  403ba2:	47a0      	blx	r4
	  mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_ZOUT_L, &raw_acc_zLow,  1);
  403ba4:	462b      	mov	r3, r5
  403ba6:	f10d 0219 	add.w	r2, sp, #25
  403baa:	4651      	mov	r1, sl
  403bac:	4630      	mov	r0, r6
  403bae:	47a0      	blx	r4
	  raw_acc_x = (raw_acc_xHigh << 8) | (raw_acc_xLow << 0);
  403bb0:	f89d 2014 	ldrb.w	r2, [sp, #20]
  403bb4:	f89d 3017 	ldrb.w	r3, [sp, #23]
  403bb8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  403bbc:	b21b      	sxth	r3, r3
  403bbe:	ee0a 3a10 	vmov	s20, r3
	  raw_acc_y = (raw_acc_yHigh << 8) | (raw_acc_yLow << 0);
  403bc2:	f89d 2015 	ldrb.w	r2, [sp, #21]
  403bc6:	f89d 3018 	ldrb.w	r3, [sp, #24]
  403bca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  403bce:	b21b      	sxth	r3, r3
  403bd0:	ee08 3a90 	vmov	s17, r3
	  raw_acc_z = (raw_acc_zHigh << 8) | (raw_acc_zLow << 0);
  403bd4:	f89d 2016 	ldrb.w	r2, [sp, #22]
  403bd8:	f89d 3019 	ldrb.w	r3, [sp, #25]
  403bdc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  403be0:	b21b      	sxth	r3, r3
  403be2:	ee08 3a10 	vmov	s16, r3
	  mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_XOUT_H, &raw_gyr_xHigh, 1);
  403be6:	462b      	mov	r3, r5
  403be8:	f10d 021a 	add.w	r2, sp, #26
  403bec:	2143      	movs	r1, #67	; 0x43
  403bee:	4630      	mov	r0, r6
  403bf0:	47a0      	blx	r4
	  mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_XOUT_H, &raw_gyr_xHigh, 1);
  403bf2:	462b      	mov	r3, r5
  403bf4:	f10d 021a 	add.w	r2, sp, #26
  403bf8:	2143      	movs	r1, #67	; 0x43
  403bfa:	4630      	mov	r0, r6
  403bfc:	47a0      	blx	r4
	  mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_XOUT_L, &raw_gyr_xLow,  1);
  403bfe:	462b      	mov	r3, r5
  403c00:	f10d 021d 	add.w	r2, sp, #29
  403c04:	2144      	movs	r1, #68	; 0x44
  403c06:	4630      	mov	r0, r6
  403c08:	47a0      	blx	r4
	  mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_XOUT_L, &raw_gyr_xLow,  1);
  403c0a:	462b      	mov	r3, r5
  403c0c:	f10d 021d 	add.w	r2, sp, #29
  403c10:	2144      	movs	r1, #68	; 0x44
  403c12:	4630      	mov	r0, r6
  403c14:	47a0      	blx	r4
	  mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_YOUT_H, &raw_gyr_yHigh, 1);
  403c16:	462b      	mov	r3, r5
  403c18:	f10d 021b 	add.w	r2, sp, #27
  403c1c:	2145      	movs	r1, #69	; 0x45
  403c1e:	4630      	mov	r0, r6
  403c20:	47a0      	blx	r4
	  mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_YOUT_H, &raw_gyr_yHigh, 1);
  403c22:	462b      	mov	r3, r5
  403c24:	f10d 021b 	add.w	r2, sp, #27
  403c28:	2145      	movs	r1, #69	; 0x45
  403c2a:	4630      	mov	r0, r6
  403c2c:	47a0      	blx	r4
	  mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_ZOUT_L, &raw_gyr_yLow,  1);
  403c2e:	462b      	mov	r3, r5
  403c30:	f10d 021e 	add.w	r2, sp, #30
  403c34:	4639      	mov	r1, r7
  403c36:	4630      	mov	r0, r6
  403c38:	47a0      	blx	r4
	  mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_ZOUT_L, &raw_gyr_yLow,  1);
  403c3a:	462b      	mov	r3, r5
  403c3c:	f10d 021e 	add.w	r2, sp, #30
  403c40:	4639      	mov	r1, r7
  403c42:	4630      	mov	r0, r6
  403c44:	47a0      	blx	r4
	  mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_ZOUT_H, &raw_gyr_zHigh, 1);
  403c46:	462b      	mov	r3, r5
  403c48:	aa07      	add	r2, sp, #28
  403c4a:	2147      	movs	r1, #71	; 0x47
  403c4c:	4630      	mov	r0, r6
  403c4e:	47a0      	blx	r4
	  mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_ZOUT_H, &raw_gyr_zHigh, 1);
  403c50:	462b      	mov	r3, r5
  403c52:	aa07      	add	r2, sp, #28
  403c54:	2147      	movs	r1, #71	; 0x47
  403c56:	4630      	mov	r0, r6
  403c58:	47a0      	blx	r4
	  mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_ZOUT_L, &raw_gyr_zLow,  1);
  403c5a:	462b      	mov	r3, r5
  403c5c:	f10d 021f 	add.w	r2, sp, #31
  403c60:	4639      	mov	r1, r7
  403c62:	4630      	mov	r0, r6
  403c64:	47a0      	blx	r4
	  mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_ZOUT_L, &raw_gyr_zLow,  1);
  403c66:	462b      	mov	r3, r5
  403c68:	f10d 021f 	add.w	r2, sp, #31
  403c6c:	4639      	mov	r1, r7
  403c6e:	4630      	mov	r0, r6
  403c70:	47a0      	blx	r4
	  raw_gyr_x = (raw_gyr_xHigh << 8) | (raw_gyr_xLow << 0);
  403c72:	f89d e01a 	ldrb.w	lr, [sp, #26]
  403c76:	f89d 101d 	ldrb.w	r1, [sp, #29]
	  raw_gyr_y = (raw_gyr_yHigh << 8) | (raw_gyr_yLow << 0);
  403c7a:	f89d 401b 	ldrb.w	r4, [sp, #27]
  403c7e:	f89d 201e 	ldrb.w	r2, [sp, #30]
	  raw_gyr_z = (raw_gyr_zHigh << 8) | (raw_gyr_zLow << 0);
  403c82:	f89d 001c 	ldrb.w	r0, [sp, #28]
  403c86:	f89d 301f 	ldrb.w	r3, [sp, #31]
	  proc_acc_x = (float)raw_acc_x/16384;
  403c8a:	eeb8 aaca 	vcvt.f32.s32	s20, s20
  403c8e:	eddf 7a7a 	vldr	s15, [pc, #488]	; 403e78 <task_imu+0x4c8>
  403c92:	ee2a aa27 	vmul.f32	s20, s20, s15
	  proc_acc_y = (float)raw_acc_y/16384;
  403c96:	eef8 8ae8 	vcvt.f32.s32	s17, s17
  403c9a:	ee68 8aa7 	vmul.f32	s17, s17, s15
	  proc_acc_z = (float)raw_acc_z/16384;
  403c9e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
  403ca2:	ee28 8a27 	vmul.f32	s16, s16, s15
	  raw_gyr_x = (raw_gyr_xHigh << 8) | (raw_gyr_xLow << 0);
  403ca6:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
	  proc_gyr_x = (float)raw_gyr_x/131;
  403caa:	b209      	sxth	r1, r1
  403cac:	ee07 1a90 	vmov	s15, r1
  403cb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  403cb4:	ed9f 7a71 	vldr	s14, [pc, #452]	; 403e7c <task_imu+0x4cc>
  403cb8:	eec7 ba87 	vdiv.f32	s23, s15, s14
	  raw_gyr_y = (raw_gyr_yHigh << 8) | (raw_gyr_yLow << 0);
  403cbc:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
	  proc_gyr_y = (float)raw_gyr_y/131;
  403cc0:	b212      	sxth	r2, r2
  403cc2:	ee07 2a90 	vmov	s15, r2
  403cc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  403cca:	ee87 ba87 	vdiv.f32	s22, s15, s14
	  raw_gyr_z = (raw_gyr_zHigh << 8) | (raw_gyr_zLow << 0);
  403cce:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	  proc_gyr_z = (float)raw_gyr_z/131;
  403cd2:	b21b      	sxth	r3, r3
  403cd4:	ee07 3a90 	vmov	s15, r3
  403cd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  403cdc:	eec7 aa87 	vdiv.f32	s21, s15, s14
	  if (sqrt(proc_acc_x*proc_acc_x + proc_acc_y*proc_acc_y + proc_acc_z*proc_acc_z) < 0.3) {
  403ce0:	ee6a 7a0a 	vmul.f32	s15, s20, s20
  403ce4:	ee28 7aa8 	vmul.f32	s14, s17, s17
  403ce8:	ee77 7a87 	vadd.f32	s15, s15, s14
  403cec:	ee28 7a08 	vmul.f32	s14, s16, s16
  403cf0:	ee77 7a87 	vadd.f32	s15, s15, s14
  403cf4:	ee17 0a90 	vmov	r0, s15
  403cf8:	4b61      	ldr	r3, [pc, #388]	; (403e80 <task_imu+0x4d0>)
  403cfa:	4798      	blx	r3
  403cfc:	4b61      	ldr	r3, [pc, #388]	; (403e84 <task_imu+0x4d4>)
  403cfe:	4798      	blx	r3
  403d00:	a359      	add	r3, pc, #356	; (adr r3, 403e68 <task_imu+0x4b8>)
  403d02:	e9d3 2300 	ldrd	r2, r3, [r3]
  403d06:	4c60      	ldr	r4, [pc, #384]	; (403e88 <task_imu+0x4d8>)
  403d08:	47a0      	blx	r4
  403d0a:	2800      	cmp	r0, #0
  403d0c:	f47f aeb5 	bne.w	403a7a <task_imu+0xca>
      const FusionVector gyroscope = {proc_gyr_x, proc_gyr_y, proc_gyr_z}; 
  403d10:	edcd ba08 	vstr	s23, [sp, #32]
  403d14:	ed8d ba09 	vstr	s22, [sp, #36]	; 0x24
  403d18:	edcd aa0a 	vstr	s21, [sp, #40]	; 0x28
      const FusionVector accelerometer = {proc_acc_x, proc_acc_y, proc_acc_z};
  403d1c:	ed8d aa0b 	vstr	s20, [sp, #44]	; 0x2c
  403d20:	edcd 8a0c 	vstr	s17, [sp, #48]	; 0x30
  403d24:	ed8d 8a0d 	vstr	s16, [sp, #52]	; 0x34
      FusionAhrsUpdateNoMagnetometer(&ahrs, gyroscope, accelerometer, dT);
  403d28:	4b58      	ldr	r3, [pc, #352]	; (403e8c <task_imu+0x4dc>)
  403d2a:	9303      	str	r3, [sp, #12]
  403d2c:	ab0b      	add	r3, sp, #44	; 0x2c
  403d2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  403d32:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  403d36:	ab08      	add	r3, sp, #32
  403d38:	cb0e      	ldmia	r3, {r1, r2, r3}
  403d3a:	a80e      	add	r0, sp, #56	; 0x38
  403d3c:	4c54      	ldr	r4, [pc, #336]	; (403e90 <task_imu+0x4e0>)
  403d3e:	47a0      	blx	r4
      const FusionEuler euler = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
  403d40:	a90e      	add	r1, sp, #56	; 0x38
  403d42:	a82e      	add	r0, sp, #184	; 0xb8
  403d44:	4b53      	ldr	r3, [pc, #332]	; (403e94 <task_imu+0x4e4>)
  403d46:	4798      	blx	r3
  403d48:	ed9d ba2e 	vldr	s22, [sp, #184]	; 0xb8
  403d4c:	ed9d 8a2f 	vldr	s16, [sp, #188]	; 0xbc
  403d50:	ed9d aa30 	vldr	s20, [sp, #192]	; 0xc0
  403d54:	eddd 8a31 	vldr	s17, [sp, #196]	; 0xc4
 * @param quaternion Quaternion.
 * @return Euler angles in degrees.
 */
static inline FusionEuler FusionQuaternionToEuler(const FusionQuaternion quaternion) {
#define Q quaternion.element
    const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated operations
  403d58:	ee6a 7a0a 	vmul.f32	s15, s20, s20
  403d5c:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
  403d60:	ee7a aae7 	vsub.f32	s21, s21, s15
    FusionEuler euler;
    euler.angle.roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x * Q.x));
  403d64:	ee68 6a08 	vmul.f32	s13, s16, s16
  403d68:	ee2b 7a08 	vmul.f32	s14, s22, s16
  403d6c:	ee68 7a8a 	vmul.f32	s15, s17, s20
  403d70:	ee7a 6ae6 	vsub.f32	s13, s21, s13
  403d74:	ee16 1a90 	vmov	r1, s13
  403d78:	ee77 7a27 	vadd.f32	s15, s14, s15
  403d7c:	ee17 0a90 	vmov	r0, s15
  403d80:	4b45      	ldr	r3, [pc, #276]	; (403e98 <task_imu+0x4e8>)
  403d82:	4798      	blx	r3
    return radians * (180.0f / (float) M_PI);
  403d84:	ee07 0a90 	vmov	s15, r0
  403d88:	ee67 ba89 	vmul.f32	s23, s15, s18
    euler.angle.pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x)));
  403d8c:	ee6b 7a0a 	vmul.f32	s15, s22, s20
  403d90:	ee28 7a88 	vmul.f32	s14, s17, s16
  403d94:	ee77 7ac7 	vsub.f32	s15, s15, s14
  403d98:	ee77 7aa7 	vadd.f32	s15, s15, s15
    if (value <= -1.0f) {
  403d9c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
  403da0:	eef4 7ac7 	vcmpe.f32	s15, s14
  403da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403da8:	f67f ae76 	bls.w	403a98 <task_imu+0xe8>
    if (value >= 1.0f) {
  403dac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  403db0:	eef4 7ac7 	vcmpe.f32	s15, s14
  403db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403db8:	f6ff ae67 	blt.w	403a8a <task_imu+0xda>
        return (float) M_PI / 2.0f;
  403dbc:	ed9f ca37 	vldr	s24, [pc, #220]	; 403e9c <task_imu+0x4ec>
    euler.angle.yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z * Q.z));
  403dc0:	ee68 6aa8 	vmul.f32	s13, s17, s17
  403dc4:	ee28 7a8b 	vmul.f32	s14, s17, s22
  403dc8:	ee68 7a0a 	vmul.f32	s15, s16, s20
  403dcc:	ee7a 6ae6 	vsub.f32	s13, s21, s13
  403dd0:	ee16 1a90 	vmov	r1, s13
  403dd4:	ee77 7a27 	vadd.f32	s15, s14, s15
  403dd8:	ee17 0a90 	vmov	r0, s15
  403ddc:	4b2e      	ldr	r3, [pc, #184]	; (403e98 <task_imu+0x4e8>)
  403dde:	4798      	blx	r3
    return radians * (180.0f / (float) M_PI);
  403de0:	ee07 0a90 	vmov	s15, r0
  403de4:	ee27 8a89 	vmul.f32	s16, s15, s18
      printf("Roll %0.1f, Pitch %0.1f, Yaw %0.1f\n", euler.angle.roll, euler.angle.pitch, euler.angle.yaw);
  403de8:	4c25      	ldr	r4, [pc, #148]	; (403e80 <task_imu+0x4d0>)
  403dea:	ee1b 0a90 	vmov	r0, s23
  403dee:	47a0      	blx	r4
  403df0:	4680      	mov	r8, r0
  403df2:	4689      	mov	r9, r1
  403df4:	ee18 0a10 	vmov	r0, s16
  403df8:	47a0      	blx	r4
  403dfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403dfe:	ee6c 7a09 	vmul.f32	s15, s24, s18
  403e02:	ee17 0a90 	vmov	r0, s15
  403e06:	47a0      	blx	r4
  403e08:	e9cd 0100 	strd	r0, r1, [sp]
  403e0c:	4642      	mov	r2, r8
  403e0e:	464b      	mov	r3, r9
  403e10:	4823      	ldr	r0, [pc, #140]	; (403ea0 <task_imu+0x4f0>)
  403e12:	4924      	ldr	r1, [pc, #144]	; (403ea4 <task_imu+0x4f4>)
  403e14:	4788      	blx	r1
      if (euler.angle.yaw > 60){
  403e16:	eeb4 8ae9 	vcmpe.f32	s16, s19
  403e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403e1e:	f73f ae3e 	bgt.w	403a9e <task_imu+0xee>
      if (euler.angle.yaw < -60){
  403e22:	eddf 7a21 	vldr	s15, [pc, #132]	; 403ea8 <task_imu+0x4f8>
  403e26:	eeb4 8ae7 	vcmpe.f32	s16, s15
  403e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403e2e:	f53f ae40 	bmi.w	403ab2 <task_imu+0x102>
      if ((euler.angle.yaw < 60) && (euler.angle.yaw > -60)){
  403e32:	eeb4 8ae9 	vcmpe.f32	s16, s19
  403e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403e3a:	f57f ae71 	bpl.w	403b20 <task_imu+0x170>
  403e3e:	eddf 7a1a 	vldr	s15, [pc, #104]	; 403ea8 <task_imu+0x4f8>
  403e42:	eeb4 8ae7 	vcmpe.f32	s16, s15
  403e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403e4a:	f77f ae69 	ble.w	403b20 <task_imu+0x170>
        ori = FRENTE;   
  403e4e:	a932      	add	r1, sp, #200	; 0xc8
  403e50:	2302      	movs	r3, #2
  403e52:	f801 3d29 	strb.w	r3, [r1, #-41]!
        xQueueSend(xQueueOrientacao, &ori, 0);
  403e56:	2300      	movs	r3, #0
  403e58:	461a      	mov	r2, r3
  403e5a:	4814      	ldr	r0, [pc, #80]	; (403eac <task_imu+0x4fc>)
  403e5c:	6800      	ldr	r0, [r0, #0]
  403e5e:	4c14      	ldr	r4, [pc, #80]	; (403eb0 <task_imu+0x500>)
  403e60:	47a0      	blx	r4
  403e62:	e65d      	b.n	403b20 <task_imu+0x170>
  403e64:	f3af 8000 	nop.w
  403e68:	33333333 	.word	0x33333333
  403e6c:	3fd33333 	.word	0x3fd33333
  403e70:	004022e5 	.word	0x004022e5
  403e74:	00403981 	.word	0x00403981
  403e78:	38800000 	.word	0x38800000
  403e7c:	43030000 	.word	0x43030000
  403e80:	00405b3d 	.word	0x00405b3d
  403e84:	00404155 	.word	0x00404155
  403e88:	004060c9 	.word	0x004060c9
  403e8c:	3dcccccd 	.word	0x3dcccccd
  403e90:	004033f5 	.word	0x004033f5
  403e94:	00402de9 	.word	0x00402de9
  403e98:	004042b1 	.word	0x004042b1
  403e9c:	3fc90fdb 	.word	0x3fc90fdb
  403ea0:	0040b900 	.word	0x0040b900
  403ea4:	00406fc9 	.word	0x00406fc9
  403ea8:	c2700000 	.word	0xc2700000
  403eac:	20400c1c 	.word	0x20400c1c
  403eb0:	0040155d 	.word	0x0040155d

00403eb4 <main>:

/************************/
/* main                                                                */
/************************/

int main(void) {
  403eb4:	b570      	push	{r4, r5, r6, lr}
  403eb6:	b088      	sub	sp, #32
	
  pio_set(LED1_PIO, LED1_PIO_IDX_MASK);
  403eb8:	2101      	movs	r1, #1
  403eba:	4843      	ldr	r0, [pc, #268]	; (403fc8 <main+0x114>)
  403ebc:	4c43      	ldr	r4, [pc, #268]	; (403fcc <main+0x118>)
  403ebe:	47a0      	blx	r4
  pio_set(LED2_PIO, LED2_PIO_IDX_MASK);
  403ec0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403ec4:	4842      	ldr	r0, [pc, #264]	; (403fd0 <main+0x11c>)
  403ec6:	47a0      	blx	r4
  pio_set(LED3_PIO, LED3_PIO_IDX_MASK);
  403ec8:	2104      	movs	r1, #4
  403eca:	4842      	ldr	r0, [pc, #264]	; (403fd4 <main+0x120>)
  403ecc:	47a0      	blx	r4
	
  xQueueOrientacao = xQueueCreate(32, sizeof(enum orientacao));
  403ece:	2200      	movs	r2, #0
  403ed0:	2101      	movs	r1, #1
  403ed2:	2020      	movs	r0, #32
  403ed4:	4c40      	ldr	r4, [pc, #256]	; (403fd8 <main+0x124>)
  403ed6:	47a0      	blx	r4
  403ed8:	4b40      	ldr	r3, [pc, #256]	; (403fdc <main+0x128>)
  403eda:	6018      	str	r0, [r3, #0]

  /* Attempt to create a semaphore. */
  xSemaphoreLed = xSemaphoreCreateBinary();
  403edc:	2203      	movs	r2, #3
  403ede:	2100      	movs	r1, #0
  403ee0:	2001      	movs	r0, #1
  403ee2:	47a0      	blx	r4
  403ee4:	4b3e      	ldr	r3, [pc, #248]	; (403fe0 <main+0x12c>)
  403ee6:	6018      	str	r0, [r3, #0]
  if (xSemaphoreLed == NULL)
  403ee8:	2800      	cmp	r0, #0
  403eea:	d068      	beq.n	403fbe <main+0x10a>
  printf("falha em criar o semaforo led \n");\

  sysclk_init();
  403eec:	4b3d      	ldr	r3, [pc, #244]	; (403fe4 <main+0x130>)
  403eee:	4798      	blx	r3
  board_init();
  403ef0:	4b3d      	ldr	r3, [pc, #244]	; (403fe8 <main+0x134>)
  403ef2:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  403ef4:	4d3d      	ldr	r5, [pc, #244]	; (403fec <main+0x138>)
  403ef6:	4b3e      	ldr	r3, [pc, #248]	; (403ff0 <main+0x13c>)
  403ef8:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  403efa:	4a3e      	ldr	r2, [pc, #248]	; (403ff4 <main+0x140>)
  403efc:	4b3e      	ldr	r3, [pc, #248]	; (403ff8 <main+0x144>)
  403efe:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  403f00:	4a3e      	ldr	r2, [pc, #248]	; (403ffc <main+0x148>)
  403f02:	4b3f      	ldr	r3, [pc, #252]	; (404000 <main+0x14c>)
  403f04:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  403f06:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  403f0a:	9302      	str	r3, [sp, #8]
	usart_settings.char_length = opt->charlength;
  403f0c:	23c0      	movs	r3, #192	; 0xc0
  403f0e:	9303      	str	r3, [sp, #12]
	usart_settings.parity_type = opt->paritytype;
  403f10:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403f14:	9304      	str	r3, [sp, #16]
	usart_settings.stop_bits= opt->stopbits;
  403f16:	2400      	movs	r4, #0
  403f18:	9405      	str	r4, [sp, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  403f1a:	9406      	str	r4, [sp, #24]
  403f1c:	200e      	movs	r0, #14
  403f1e:	4b39      	ldr	r3, [pc, #228]	; (404004 <main+0x150>)
  403f20:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  403f22:	4a39      	ldr	r2, [pc, #228]	; (404008 <main+0x154>)
  403f24:	a902      	add	r1, sp, #8
  403f26:	4628      	mov	r0, r5
  403f28:	4b38      	ldr	r3, [pc, #224]	; (40400c <main+0x158>)
  403f2a:	4798      	blx	r3
		usart_enable_tx(p_usart);
  403f2c:	4628      	mov	r0, r5
  403f2e:	4b38      	ldr	r3, [pc, #224]	; (404010 <main+0x15c>)
  403f30:	4798      	blx	r3
		usart_enable_rx(p_usart);
  403f32:	4628      	mov	r0, r5
  403f34:	4b37      	ldr	r3, [pc, #220]	; (404014 <main+0x160>)
  403f36:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  403f38:	4e37      	ldr	r6, [pc, #220]	; (404018 <main+0x164>)
  403f3a:	6833      	ldr	r3, [r6, #0]
  403f3c:	4621      	mov	r1, r4
  403f3e:	6898      	ldr	r0, [r3, #8]
  403f40:	4d36      	ldr	r5, [pc, #216]	; (40401c <main+0x168>)
  403f42:	47a8      	blx	r5
	setbuf(stdin, NULL);
  403f44:	6833      	ldr	r3, [r6, #0]
  403f46:	4621      	mov	r1, r4
  403f48:	6858      	ldr	r0, [r3, #4]
  403f4a:	47a8      	blx	r5
  setbuf(stdout, NULL);
  403f4c:	6833      	ldr	r3, [r6, #0]
  403f4e:	4621      	mov	r1, r4
  403f50:	6898      	ldr	r0, [r3, #8]
  403f52:	47a8      	blx	r5

  /* Initialize the console uart */
  configure_console();

  /* Output demo information. */
  printf("-- Freertos Example --\n\r");
  403f54:	4832      	ldr	r0, [pc, #200]	; (404020 <main+0x16c>)
  403f56:	4d33      	ldr	r5, [pc, #204]	; (404024 <main+0x170>)
  403f58:	47a8      	blx	r5
  printf("-- %s\n\r", BOARD_NAME);
  403f5a:	4933      	ldr	r1, [pc, #204]	; (404028 <main+0x174>)
  403f5c:	4833      	ldr	r0, [pc, #204]	; (40402c <main+0x178>)
  403f5e:	47a8      	blx	r5
  
  /* Create task of orientation */
  if (xTaskCreate(task_orientacao, "Orientacao", TASK_LED_STACK_SIZE, NULL,
  403f60:	9401      	str	r4, [sp, #4]
  403f62:	9400      	str	r4, [sp, #0]
  403f64:	4623      	mov	r3, r4
  403f66:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  403f6a:	4931      	ldr	r1, [pc, #196]	; (404030 <main+0x17c>)
  403f6c:	4831      	ldr	r0, [pc, #196]	; (404034 <main+0x180>)
  403f6e:	4c32      	ldr	r4, [pc, #200]	; (404038 <main+0x184>)
  403f70:	47a0      	blx	r4
  403f72:	2801      	cmp	r0, #1
  403f74:	d002      	beq.n	403f7c <main+0xc8>
                  TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
    printf("Failed to create orientacao task\r\n");
  403f76:	4831      	ldr	r0, [pc, #196]	; (40403c <main+0x188>)
  403f78:	4b31      	ldr	r3, [pc, #196]	; (404040 <main+0x18c>)
  403f7a:	4798      	blx	r3
  }
  
  /* Create task house down */
  if (xTaskCreate(task_house_down, "HouseDown", TASK_LED_STACK_SIZE, NULL,
  403f7c:	2300      	movs	r3, #0
  403f7e:	9301      	str	r3, [sp, #4]
  403f80:	9300      	str	r3, [sp, #0]
  403f82:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  403f86:	492f      	ldr	r1, [pc, #188]	; (404044 <main+0x190>)
  403f88:	482f      	ldr	r0, [pc, #188]	; (404048 <main+0x194>)
  403f8a:	4c2b      	ldr	r4, [pc, #172]	; (404038 <main+0x184>)
  403f8c:	47a0      	blx	r4
  403f8e:	2801      	cmp	r0, #1
  403f90:	d002      	beq.n	403f98 <main+0xe4>
                  TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
	  printf("Failed to create imu task\r\n");
  403f92:	482e      	ldr	r0, [pc, #184]	; (40404c <main+0x198>)
  403f94:	4b2a      	ldr	r3, [pc, #168]	; (404040 <main+0x18c>)
  403f96:	4798      	blx	r3
  }

  /* Create task imu */
  if (xTaskCreate(task_imu, "Imu", TASK_LED_STACK_SIZE, NULL,
  403f98:	2300      	movs	r3, #0
  403f9a:	9301      	str	r3, [sp, #4]
  403f9c:	9300      	str	r3, [sp, #0]
  403f9e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  403fa2:	492b      	ldr	r1, [pc, #172]	; (404050 <main+0x19c>)
  403fa4:	482b      	ldr	r0, [pc, #172]	; (404054 <main+0x1a0>)
  403fa6:	4c24      	ldr	r4, [pc, #144]	; (404038 <main+0x184>)
  403fa8:	47a0      	blx	r4
  403faa:	2801      	cmp	r0, #1
  403fac:	d002      	beq.n	403fb4 <main+0x100>
                  TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
    printf("Failed to create imu task\r\n");
  403fae:	4827      	ldr	r0, [pc, #156]	; (40404c <main+0x198>)
  403fb0:	4b23      	ldr	r3, [pc, #140]	; (404040 <main+0x18c>)
  403fb2:	4798      	blx	r3
  }

  /* Start the scheduler. */
  vTaskStartScheduler();
  403fb4:	4b28      	ldr	r3, [pc, #160]	; (404058 <main+0x1a4>)
  403fb6:	4798      	blx	r3

  /* Will only get here if there was insufficient memory to create the idle
   * task. */
  return 0;
  403fb8:	2000      	movs	r0, #0
  403fba:	b008      	add	sp, #32
  403fbc:	bd70      	pop	{r4, r5, r6, pc}
  printf("falha em criar o semaforo led \n");\
  403fbe:	4827      	ldr	r0, [pc, #156]	; (40405c <main+0x1a8>)
  403fc0:	4b1f      	ldr	r3, [pc, #124]	; (404040 <main+0x18c>)
  403fc2:	4798      	blx	r3
  403fc4:	e792      	b.n	403eec <main+0x38>
  403fc6:	bf00      	nop
  403fc8:	400e0e00 	.word	0x400e0e00
  403fcc:	00400465 	.word	0x00400465
  403fd0:	400e1200 	.word	0x400e1200
  403fd4:	400e1000 	.word	0x400e1000
  403fd8:	00401501 	.word	0x00401501
  403fdc:	20400c1c 	.word	0x20400c1c
  403fe0:	20400c20 	.word	0x20400c20
  403fe4:	004001d5 	.word	0x004001d5
  403fe8:	004002d1 	.word	0x004002d1
  403fec:	40028000 	.word	0x40028000
  403ff0:	20400bd8 	.word	0x20400bd8
  403ff4:	00403725 	.word	0x00403725
  403ff8:	20400bd4 	.word	0x20400bd4
  403ffc:	00403649 	.word	0x00403649
  404000:	20400bd0 	.word	0x20400bd0
  404004:	004007c9 	.word	0x004007c9
  404008:	08f0d180 	.word	0x08f0d180
  40400c:	00400af1 	.word	0x00400af1
  404010:	00400b45 	.word	0x00400b45
  404014:	00400b4b 	.word	0x00400b4b
  404018:	20400010 	.word	0x20400010
  40401c:	004070c1 	.word	0x004070c1
  404020:	0040b7b8 	.word	0x0040b7b8
  404024:	00406fc9 	.word	0x00406fc9
  404028:	0040b7d4 	.word	0x0040b7d4
  40402c:	0040b7e0 	.word	0x0040b7e0
  404030:	0040b7e8 	.word	0x0040b7e8
  404034:	0040357d 	.word	0x0040357d
  404038:	00401ddd 	.word	0x00401ddd
  40403c:	0040b7f4 	.word	0x0040b7f4
  404040:	0040708d 	.word	0x0040708d
  404044:	0040b818 	.word	0x0040b818
  404048:	00403891 	.word	0x00403891
  40404c:	0040b824 	.word	0x0040b824
  404050:	0040b840 	.word	0x0040b840
  404054:	004039b1 	.word	0x004039b1
  404058:	00401fd1 	.word	0x00401fd1
  40405c:	0040b798 	.word	0x0040b798

00404060 <cosf>:
  404060:	b500      	push	{lr}
  404062:	4a1c      	ldr	r2, [pc, #112]	; (4040d4 <cosf+0x74>)
  404064:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
  404068:	4293      	cmp	r3, r2
  40406a:	b083      	sub	sp, #12
  40406c:	dd18      	ble.n	4040a0 <cosf+0x40>
  40406e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
  404072:	db05      	blt.n	404080 <cosf+0x20>
  404074:	4601      	mov	r1, r0
  404076:	f002 f8b9 	bl	4061ec <__aeabi_fsub>
  40407a:	b003      	add	sp, #12
  40407c:	f85d fb04 	ldr.w	pc, [sp], #4
  404080:	4669      	mov	r1, sp
  404082:	f000 fbaf 	bl	4047e4 <__ieee754_rem_pio2f>
  404086:	f000 0203 	and.w	r2, r0, #3
  40408a:	2a01      	cmp	r2, #1
  40408c:	d015      	beq.n	4040ba <cosf+0x5a>
  40408e:	2a02      	cmp	r2, #2
  404090:	d00c      	beq.n	4040ac <cosf+0x4c>
  404092:	b1ca      	cbz	r2, 4040c8 <cosf+0x68>
  404094:	2201      	movs	r2, #1
  404096:	9901      	ldr	r1, [sp, #4]
  404098:	9800      	ldr	r0, [sp, #0]
  40409a:	f001 f9af 	bl	4053fc <__kernel_sinf>
  40409e:	e7ec      	b.n	40407a <cosf+0x1a>
  4040a0:	2100      	movs	r1, #0
  4040a2:	f000 fd61 	bl	404b68 <__kernel_cosf>
  4040a6:	b003      	add	sp, #12
  4040a8:	f85d fb04 	ldr.w	pc, [sp], #4
  4040ac:	9901      	ldr	r1, [sp, #4]
  4040ae:	9800      	ldr	r0, [sp, #0]
  4040b0:	f000 fd5a 	bl	404b68 <__kernel_cosf>
  4040b4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  4040b8:	e7df      	b.n	40407a <cosf+0x1a>
  4040ba:	9901      	ldr	r1, [sp, #4]
  4040bc:	9800      	ldr	r0, [sp, #0]
  4040be:	f001 f99d 	bl	4053fc <__kernel_sinf>
  4040c2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  4040c6:	e7d8      	b.n	40407a <cosf+0x1a>
  4040c8:	9901      	ldr	r1, [sp, #4]
  4040ca:	9800      	ldr	r0, [sp, #0]
  4040cc:	f000 fd4c 	bl	404b68 <__kernel_cosf>
  4040d0:	e7d3      	b.n	40407a <cosf+0x1a>
  4040d2:	bf00      	nop
  4040d4:	3f490fd8 	.word	0x3f490fd8

004040d8 <sinf>:
  4040d8:	b500      	push	{lr}
  4040da:	4a1d      	ldr	r2, [pc, #116]	; (404150 <sinf+0x78>)
  4040dc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
  4040e0:	4293      	cmp	r3, r2
  4040e2:	b083      	sub	sp, #12
  4040e4:	dd19      	ble.n	40411a <sinf+0x42>
  4040e6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
  4040ea:	db05      	blt.n	4040f8 <sinf+0x20>
  4040ec:	4601      	mov	r1, r0
  4040ee:	f002 f87d 	bl	4061ec <__aeabi_fsub>
  4040f2:	b003      	add	sp, #12
  4040f4:	f85d fb04 	ldr.w	pc, [sp], #4
  4040f8:	4669      	mov	r1, sp
  4040fa:	f000 fb73 	bl	4047e4 <__ieee754_rem_pio2f>
  4040fe:	f000 0003 	and.w	r0, r0, #3
  404102:	2801      	cmp	r0, #1
  404104:	d018      	beq.n	404138 <sinf+0x60>
  404106:	2802      	cmp	r0, #2
  404108:	d00e      	beq.n	404128 <sinf+0x50>
  40410a:	b1d0      	cbz	r0, 404142 <sinf+0x6a>
  40410c:	9901      	ldr	r1, [sp, #4]
  40410e:	9800      	ldr	r0, [sp, #0]
  404110:	f000 fd2a 	bl	404b68 <__kernel_cosf>
  404114:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  404118:	e7eb      	b.n	4040f2 <sinf+0x1a>
  40411a:	2200      	movs	r2, #0
  40411c:	2100      	movs	r1, #0
  40411e:	f001 f96d 	bl	4053fc <__kernel_sinf>
  404122:	b003      	add	sp, #12
  404124:	f85d fb04 	ldr.w	pc, [sp], #4
  404128:	2201      	movs	r2, #1
  40412a:	9901      	ldr	r1, [sp, #4]
  40412c:	9800      	ldr	r0, [sp, #0]
  40412e:	f001 f965 	bl	4053fc <__kernel_sinf>
  404132:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  404136:	e7dc      	b.n	4040f2 <sinf+0x1a>
  404138:	9901      	ldr	r1, [sp, #4]
  40413a:	9800      	ldr	r0, [sp, #0]
  40413c:	f000 fd14 	bl	404b68 <__kernel_cosf>
  404140:	e7d7      	b.n	4040f2 <sinf+0x1a>
  404142:	2201      	movs	r2, #1
  404144:	9901      	ldr	r1, [sp, #4]
  404146:	9800      	ldr	r0, [sp, #0]
  404148:	f001 f958 	bl	4053fc <__kernel_sinf>
  40414c:	e7d1      	b.n	4040f2 <sinf+0x1a>
  40414e:	bf00      	nop
  404150:	3f490fd8 	.word	0x3f490fd8

00404154 <sqrt>:
  404154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404158:	b08b      	sub	sp, #44	; 0x2c
  40415a:	4604      	mov	r4, r0
  40415c:	460d      	mov	r5, r1
  40415e:	f000 f8a9 	bl	4042b4 <__ieee754_sqrt>
  404162:	4b29      	ldr	r3, [pc, #164]	; (404208 <sqrt+0xb4>)
  404164:	f993 a000 	ldrsb.w	sl, [r3]
  404168:	f1ba 3fff 	cmp.w	sl, #4294967295
  40416c:	4606      	mov	r6, r0
  40416e:	460f      	mov	r7, r1
  404170:	d012      	beq.n	404198 <sqrt+0x44>
  404172:	4622      	mov	r2, r4
  404174:	462b      	mov	r3, r5
  404176:	4620      	mov	r0, r4
  404178:	4629      	mov	r1, r5
  40417a:	f001 ffcd 	bl	406118 <__aeabi_dcmpun>
  40417e:	4683      	mov	fp, r0
  404180:	b950      	cbnz	r0, 404198 <sqrt+0x44>
  404182:	f04f 0800 	mov.w	r8, #0
  404186:	f04f 0900 	mov.w	r9, #0
  40418a:	4642      	mov	r2, r8
  40418c:	464b      	mov	r3, r9
  40418e:	4620      	mov	r0, r4
  404190:	4629      	mov	r1, r5
  404192:	f001 ff99 	bl	4060c8 <__aeabi_dcmplt>
  404196:	b920      	cbnz	r0, 4041a2 <sqrt+0x4e>
  404198:	4630      	mov	r0, r6
  40419a:	4639      	mov	r1, r7
  40419c:	b00b      	add	sp, #44	; 0x2c
  40419e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4041a2:	4b1a      	ldr	r3, [pc, #104]	; (40420c <sqrt+0xb8>)
  4041a4:	f8cd b020 	str.w	fp, [sp, #32]
  4041a8:	2201      	movs	r2, #1
  4041aa:	e9cd 4504 	strd	r4, r5, [sp, #16]
  4041ae:	e9cd 4502 	strd	r4, r5, [sp, #8]
  4041b2:	e88d 000c 	stmia.w	sp, {r2, r3}
  4041b6:	f1ba 0f00 	cmp.w	sl, #0
  4041ba:	d017      	beq.n	4041ec <sqrt+0x98>
  4041bc:	4642      	mov	r2, r8
  4041be:	464b      	mov	r3, r9
  4041c0:	4640      	mov	r0, r8
  4041c2:	4649      	mov	r1, r9
  4041c4:	f001 fe38 	bl	405e38 <__aeabi_ddiv>
  4041c8:	f1ba 0f02 	cmp.w	sl, #2
  4041cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4041d0:	d10e      	bne.n	4041f0 <sqrt+0x9c>
  4041d2:	f002 fb17 	bl	406804 <__errno>
  4041d6:	2321      	movs	r3, #33	; 0x21
  4041d8:	6003      	str	r3, [r0, #0]
  4041da:	9b08      	ldr	r3, [sp, #32]
  4041dc:	b973      	cbnz	r3, 4041fc <sqrt+0xa8>
  4041de:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
  4041e2:	4630      	mov	r0, r6
  4041e4:	4639      	mov	r1, r7
  4041e6:	b00b      	add	sp, #44	; 0x2c
  4041e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4041ec:	e9cd 8906 	strd	r8, r9, [sp, #24]
  4041f0:	4668      	mov	r0, sp
  4041f2:	f001 f979 	bl	4054e8 <matherr>
  4041f6:	2800      	cmp	r0, #0
  4041f8:	d1ef      	bne.n	4041da <sqrt+0x86>
  4041fa:	e7ea      	b.n	4041d2 <sqrt+0x7e>
  4041fc:	f002 fb02 	bl	406804 <__errno>
  404200:	9b08      	ldr	r3, [sp, #32]
  404202:	6003      	str	r3, [r0, #0]
  404204:	e7eb      	b.n	4041de <sqrt+0x8a>
  404206:	bf00      	nop
  404208:	2040000c 	.word	0x2040000c
  40420c:	0040b93c 	.word	0x0040b93c

00404210 <asinf>:
  404210:	b5f0      	push	{r4, r5, r6, r7, lr}
  404212:	4e24      	ldr	r6, [pc, #144]	; (4042a4 <asinf+0x94>)
  404214:	b08b      	sub	sp, #44	; 0x2c
  404216:	4604      	mov	r4, r0
  404218:	f000 f908 	bl	40442c <__ieee754_asinf>
  40421c:	f996 3000 	ldrsb.w	r3, [r6]
  404220:	3301      	adds	r3, #1
  404222:	4605      	mov	r5, r0
  404224:	d02f      	beq.n	404286 <asinf+0x76>
  404226:	4621      	mov	r1, r4
  404228:	4620      	mov	r0, r4
  40422a:	f002 faaf 	bl	40678c <__aeabi_fcmpun>
  40422e:	4607      	mov	r7, r0
  404230:	bb48      	cbnz	r0, 404286 <asinf+0x76>
  404232:	4620      	mov	r0, r4
  404234:	f001 fa76 	bl	405724 <fabsf>
  404238:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  40423c:	f002 fa9c 	bl	406778 <__aeabi_fcmpgt>
  404240:	b308      	cbz	r0, 404286 <asinf+0x76>
  404242:	4b19      	ldr	r3, [pc, #100]	; (4042a8 <asinf+0x98>)
  404244:	9708      	str	r7, [sp, #32]
  404246:	2201      	movs	r2, #1
  404248:	4620      	mov	r0, r4
  40424a:	e88d 000c 	stmia.w	sp, {r2, r3}
  40424e:	f001 fc75 	bl	405b3c <__aeabi_f2d>
  404252:	4602      	mov	r2, r0
  404254:	460b      	mov	r3, r1
  404256:	4815      	ldr	r0, [pc, #84]	; (4042ac <asinf+0x9c>)
  404258:	e9cd 2304 	strd	r2, r3, [sp, #16]
  40425c:	e9cd 2302 	strd	r2, r3, [sp, #8]
  404260:	f001 f944 	bl	4054ec <nan>
  404264:	f996 3000 	ldrsb.w	r3, [r6]
  404268:	2b02      	cmp	r3, #2
  40426a:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40426e:	d00d      	beq.n	40428c <asinf+0x7c>
  404270:	4668      	mov	r0, sp
  404272:	f001 f939 	bl	4054e8 <matherr>
  404276:	b148      	cbz	r0, 40428c <asinf+0x7c>
  404278:	9b08      	ldr	r3, [sp, #32]
  40427a:	b973      	cbnz	r3, 40429a <asinf+0x8a>
  40427c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  404280:	f001 ff60 	bl	406144 <__aeabi_d2f>
  404284:	4605      	mov	r5, r0
  404286:	4628      	mov	r0, r5
  404288:	b00b      	add	sp, #44	; 0x2c
  40428a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40428c:	f002 faba 	bl	406804 <__errno>
  404290:	2321      	movs	r3, #33	; 0x21
  404292:	6003      	str	r3, [r0, #0]
  404294:	9b08      	ldr	r3, [sp, #32]
  404296:	2b00      	cmp	r3, #0
  404298:	d0f0      	beq.n	40427c <asinf+0x6c>
  40429a:	f002 fab3 	bl	406804 <__errno>
  40429e:	9b08      	ldr	r3, [sp, #32]
  4042a0:	6003      	str	r3, [r0, #0]
  4042a2:	e7eb      	b.n	40427c <asinf+0x6c>
  4042a4:	2040000c 	.word	0x2040000c
  4042a8:	0040b944 	.word	0x0040b944
  4042ac:	0040b8a0 	.word	0x0040b8a0

004042b0 <atan2f>:
  4042b0:	f000 ba06 	b.w	4046c0 <__ieee754_atan2f>

004042b4 <__ieee754_sqrt>:
  4042b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4042b8:	4f5b      	ldr	r7, [pc, #364]	; (404428 <__ieee754_sqrt+0x174>)
  4042ba:	438f      	bics	r7, r1
  4042bc:	4605      	mov	r5, r0
  4042be:	460c      	mov	r4, r1
  4042c0:	f000 8092 	beq.w	4043e8 <__ieee754_sqrt+0x134>
  4042c4:	2900      	cmp	r1, #0
  4042c6:	460b      	mov	r3, r1
  4042c8:	4602      	mov	r2, r0
  4042ca:	dd6f      	ble.n	4043ac <__ieee754_sqrt+0xf8>
  4042cc:	150f      	asrs	r7, r1, #20
  4042ce:	d07b      	beq.n	4043c8 <__ieee754_sqrt+0x114>
  4042d0:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
  4042d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
  4042d8:	07f8      	lsls	r0, r7, #31
  4042da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4042de:	d45c      	bmi.n	40439a <__ieee754_sqrt+0xe6>
  4042e0:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
  4042e4:	2600      	movs	r6, #0
  4042e6:	440b      	add	r3, r1
  4042e8:	107f      	asrs	r7, r7, #1
  4042ea:	0052      	lsls	r2, r2, #1
  4042ec:	46b6      	mov	lr, r6
  4042ee:	2016      	movs	r0, #22
  4042f0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  4042f4:	eb0e 0401 	add.w	r4, lr, r1
  4042f8:	429c      	cmp	r4, r3
  4042fa:	ea4f 75d2 	mov.w	r5, r2, lsr #31
  4042fe:	ea4f 0242 	mov.w	r2, r2, lsl #1
  404302:	dc03      	bgt.n	40430c <__ieee754_sqrt+0x58>
  404304:	1b1b      	subs	r3, r3, r4
  404306:	eb04 0e01 	add.w	lr, r4, r1
  40430a:	440e      	add	r6, r1
  40430c:	3801      	subs	r0, #1
  40430e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  404312:	ea4f 0151 	mov.w	r1, r1, lsr #1
  404316:	d1ed      	bne.n	4042f4 <__ieee754_sqrt+0x40>
  404318:	4684      	mov	ip, r0
  40431a:	2420      	movs	r4, #32
  40431c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  404320:	e009      	b.n	404336 <__ieee754_sqrt+0x82>
  404322:	d020      	beq.n	404366 <__ieee754_sqrt+0xb2>
  404324:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
  404328:	3c01      	subs	r4, #1
  40432a:	ea4f 0151 	mov.w	r1, r1, lsr #1
  40432e:	442b      	add	r3, r5
  404330:	ea4f 0242 	mov.w	r2, r2, lsl #1
  404334:	d020      	beq.n	404378 <__ieee754_sqrt+0xc4>
  404336:	4573      	cmp	r3, lr
  404338:	eb01 050c 	add.w	r5, r1, ip
  40433c:	ddf1      	ble.n	404322 <__ieee754_sqrt+0x6e>
  40433e:	2d00      	cmp	r5, #0
  404340:	eb05 0c01 	add.w	ip, r5, r1
  404344:	db09      	blt.n	40435a <__ieee754_sqrt+0xa6>
  404346:	46f0      	mov	r8, lr
  404348:	4295      	cmp	r5, r2
  40434a:	eba3 030e 	sub.w	r3, r3, lr
  40434e:	d900      	bls.n	404352 <__ieee754_sqrt+0x9e>
  404350:	3b01      	subs	r3, #1
  404352:	1b52      	subs	r2, r2, r5
  404354:	4408      	add	r0, r1
  404356:	46c6      	mov	lr, r8
  404358:	e7e4      	b.n	404324 <__ieee754_sqrt+0x70>
  40435a:	f1bc 0f00 	cmp.w	ip, #0
  40435e:	dbf2      	blt.n	404346 <__ieee754_sqrt+0x92>
  404360:	f10e 0801 	add.w	r8, lr, #1
  404364:	e7f0      	b.n	404348 <__ieee754_sqrt+0x94>
  404366:	4295      	cmp	r5, r2
  404368:	d8dc      	bhi.n	404324 <__ieee754_sqrt+0x70>
  40436a:	2d00      	cmp	r5, #0
  40436c:	eb05 0c01 	add.w	ip, r5, r1
  404370:	db44      	blt.n	4043fc <__ieee754_sqrt+0x148>
  404372:	4698      	mov	r8, r3
  404374:	2300      	movs	r3, #0
  404376:	e7ec      	b.n	404352 <__ieee754_sqrt+0x9e>
  404378:	4313      	orrs	r3, r2
  40437a:	d113      	bne.n	4043a4 <__ieee754_sqrt+0xf0>
  40437c:	0840      	lsrs	r0, r0, #1
  40437e:	1073      	asrs	r3, r6, #1
  404380:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
  404384:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  404388:	07f2      	lsls	r2, r6, #31
  40438a:	eb03 5907 	add.w	r9, r3, r7, lsl #20
  40438e:	bf48      	it	mi
  404390:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
  404394:	4649      	mov	r1, r9
  404396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40439a:	005b      	lsls	r3, r3, #1
  40439c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  4043a0:	0052      	lsls	r2, r2, #1
  4043a2:	e79d      	b.n	4042e0 <__ieee754_sqrt+0x2c>
  4043a4:	1c41      	adds	r1, r0, #1
  4043a6:	d02d      	beq.n	404404 <__ieee754_sqrt+0x150>
  4043a8:	3001      	adds	r0, #1
  4043aa:	e7e7      	b.n	40437c <__ieee754_sqrt+0xc8>
  4043ac:	4606      	mov	r6, r0
  4043ae:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  4043b2:	433e      	orrs	r6, r7
  4043b4:	d0ef      	beq.n	404396 <__ieee754_sqrt+0xe2>
  4043b6:	bb69      	cbnz	r1, 404414 <__ieee754_sqrt+0x160>
  4043b8:	460f      	mov	r7, r1
  4043ba:	0ad3      	lsrs	r3, r2, #11
  4043bc:	3f15      	subs	r7, #21
  4043be:	0552      	lsls	r2, r2, #21
  4043c0:	2b00      	cmp	r3, #0
  4043c2:	d0fa      	beq.n	4043ba <__ieee754_sqrt+0x106>
  4043c4:	02de      	lsls	r6, r3, #11
  4043c6:	d420      	bmi.n	40440a <__ieee754_sqrt+0x156>
  4043c8:	2400      	movs	r4, #0
  4043ca:	e000      	b.n	4043ce <__ieee754_sqrt+0x11a>
  4043cc:	4604      	mov	r4, r0
  4043ce:	005b      	lsls	r3, r3, #1
  4043d0:	02dd      	lsls	r5, r3, #11
  4043d2:	f104 0001 	add.w	r0, r4, #1
  4043d6:	d5f9      	bpl.n	4043cc <__ieee754_sqrt+0x118>
  4043d8:	f1c0 0120 	rsb	r1, r0, #32
  4043dc:	fa22 f101 	lsr.w	r1, r2, r1
  4043e0:	430b      	orrs	r3, r1
  4043e2:	1b3f      	subs	r7, r7, r4
  4043e4:	4082      	lsls	r2, r0
  4043e6:	e773      	b.n	4042d0 <__ieee754_sqrt+0x1c>
  4043e8:	4602      	mov	r2, r0
  4043ea:	460b      	mov	r3, r1
  4043ec:	f001 fbfa 	bl	405be4 <__aeabi_dmul>
  4043f0:	462a      	mov	r2, r5
  4043f2:	4623      	mov	r3, r4
  4043f4:	f001 fa44 	bl	405880 <__adddf3>
  4043f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4043fc:	f1bc 0f00 	cmp.w	ip, #0
  404400:	daae      	bge.n	404360 <__ieee754_sqrt+0xac>
  404402:	e7b6      	b.n	404372 <__ieee754_sqrt+0xbe>
  404404:	3601      	adds	r6, #1
  404406:	4620      	mov	r0, r4
  404408:	e7b9      	b.n	40437e <__ieee754_sqrt+0xca>
  40440a:	2000      	movs	r0, #0
  40440c:	2120      	movs	r1, #32
  40440e:	f04f 34ff 	mov.w	r4, #4294967295
  404412:	e7e3      	b.n	4043dc <__ieee754_sqrt+0x128>
  404414:	4602      	mov	r2, r0
  404416:	460b      	mov	r3, r1
  404418:	f001 fa30 	bl	40587c <__aeabi_dsub>
  40441c:	4602      	mov	r2, r0
  40441e:	460b      	mov	r3, r1
  404420:	f001 fd0a 	bl	405e38 <__aeabi_ddiv>
  404424:	e7b7      	b.n	404396 <__ieee754_sqrt+0xe2>
  404426:	bf00      	nop
  404428:	7ff00000 	.word	0x7ff00000

0040442c <__ieee754_asinf>:
  40442c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404430:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
  404434:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
  404438:	4604      	mov	r4, r0
  40443a:	f000 80c6 	beq.w	4045ca <__ieee754_asinf+0x19e>
  40443e:	dc12      	bgt.n	404466 <__ieee754_asinf+0x3a>
  404440:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
  404444:	4606      	mov	r6, r0
  404446:	da16      	bge.n	404476 <__ieee754_asinf+0x4a>
  404448:	f1b5 5f48 	cmp.w	r5, #838860800	; 0x32000000
  40444c:	f280 80cb 	bge.w	4045e6 <__ieee754_asinf+0x1ba>
  404450:	498b      	ldr	r1, [pc, #556]	; (404680 <__ieee754_asinf+0x254>)
  404452:	f001 fecd 	bl	4061f0 <__addsf3>
  404456:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  40445a:	f002 f98d 	bl	406778 <__aeabi_fcmpgt>
  40445e:	b150      	cbz	r0, 404476 <__ieee754_asinf+0x4a>
  404460:	4620      	mov	r0, r4
  404462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404466:	4601      	mov	r1, r0
  404468:	f001 fec0 	bl	4061ec <__aeabi_fsub>
  40446c:	4601      	mov	r1, r0
  40446e:	f002 f87b 	bl	406568 <__aeabi_fdiv>
  404472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404476:	4620      	mov	r0, r4
  404478:	f001 f954 	bl	405724 <fabsf>
  40447c:	4601      	mov	r1, r0
  40447e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  404482:	f001 feb3 	bl	4061ec <__aeabi_fsub>
  404486:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  40448a:	f001 ffb9 	bl	406400 <__aeabi_fmul>
  40448e:	497d      	ldr	r1, [pc, #500]	; (404684 <__ieee754_asinf+0x258>)
  404490:	4604      	mov	r4, r0
  404492:	f001 ffb5 	bl	406400 <__aeabi_fmul>
  404496:	497c      	ldr	r1, [pc, #496]	; (404688 <__ieee754_asinf+0x25c>)
  404498:	f001 feaa 	bl	4061f0 <__addsf3>
  40449c:	4621      	mov	r1, r4
  40449e:	f001 ffaf 	bl	406400 <__aeabi_fmul>
  4044a2:	497a      	ldr	r1, [pc, #488]	; (40468c <__ieee754_asinf+0x260>)
  4044a4:	f001 fea2 	bl	4061ec <__aeabi_fsub>
  4044a8:	4621      	mov	r1, r4
  4044aa:	f001 ffa9 	bl	406400 <__aeabi_fmul>
  4044ae:	4978      	ldr	r1, [pc, #480]	; (404690 <__ieee754_asinf+0x264>)
  4044b0:	f001 fe9e 	bl	4061f0 <__addsf3>
  4044b4:	4621      	mov	r1, r4
  4044b6:	f001 ffa3 	bl	406400 <__aeabi_fmul>
  4044ba:	4976      	ldr	r1, [pc, #472]	; (404694 <__ieee754_asinf+0x268>)
  4044bc:	f001 fe96 	bl	4061ec <__aeabi_fsub>
  4044c0:	4621      	mov	r1, r4
  4044c2:	f001 ff9d 	bl	406400 <__aeabi_fmul>
  4044c6:	4974      	ldr	r1, [pc, #464]	; (404698 <__ieee754_asinf+0x26c>)
  4044c8:	f001 fe92 	bl	4061f0 <__addsf3>
  4044cc:	4621      	mov	r1, r4
  4044ce:	f001 ff97 	bl	406400 <__aeabi_fmul>
  4044d2:	4972      	ldr	r1, [pc, #456]	; (40469c <__ieee754_asinf+0x270>)
  4044d4:	4680      	mov	r8, r0
  4044d6:	4620      	mov	r0, r4
  4044d8:	f001 ff92 	bl	406400 <__aeabi_fmul>
  4044dc:	4970      	ldr	r1, [pc, #448]	; (4046a0 <__ieee754_asinf+0x274>)
  4044de:	f001 fe85 	bl	4061ec <__aeabi_fsub>
  4044e2:	4621      	mov	r1, r4
  4044e4:	f001 ff8c 	bl	406400 <__aeabi_fmul>
  4044e8:	496e      	ldr	r1, [pc, #440]	; (4046a4 <__ieee754_asinf+0x278>)
  4044ea:	f001 fe81 	bl	4061f0 <__addsf3>
  4044ee:	4621      	mov	r1, r4
  4044f0:	f001 ff86 	bl	406400 <__aeabi_fmul>
  4044f4:	496c      	ldr	r1, [pc, #432]	; (4046a8 <__ieee754_asinf+0x27c>)
  4044f6:	f001 fe79 	bl	4061ec <__aeabi_fsub>
  4044fa:	4621      	mov	r1, r4
  4044fc:	f001 ff80 	bl	406400 <__aeabi_fmul>
  404500:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  404504:	f001 fe74 	bl	4061f0 <__addsf3>
  404508:	4681      	mov	r9, r0
  40450a:	4620      	mov	r0, r4
  40450c:	f000 fad8 	bl	404ac0 <__ieee754_sqrtf>
  404510:	4b66      	ldr	r3, [pc, #408]	; (4046ac <__ieee754_asinf+0x280>)
  404512:	429d      	cmp	r5, r3
  404514:	4607      	mov	r7, r0
  404516:	4649      	mov	r1, r9
  404518:	4640      	mov	r0, r8
  40451a:	dc43      	bgt.n	4045a4 <__ieee754_asinf+0x178>
  40451c:	f002 f824 	bl	406568 <__aeabi_fdiv>
  404520:	4639      	mov	r1, r7
  404522:	4680      	mov	r8, r0
  404524:	4638      	mov	r0, r7
  404526:	f001 fe63 	bl	4061f0 <__addsf3>
  40452a:	4601      	mov	r1, r0
  40452c:	4640      	mov	r0, r8
  40452e:	f001 ff67 	bl	406400 <__aeabi_fmul>
  404532:	f427 657f 	bic.w	r5, r7, #4080	; 0xff0
  404536:	f025 050f 	bic.w	r5, r5, #15
  40453a:	4680      	mov	r8, r0
  40453c:	4629      	mov	r1, r5
  40453e:	4628      	mov	r0, r5
  404540:	f001 ff5e 	bl	406400 <__aeabi_fmul>
  404544:	4601      	mov	r1, r0
  404546:	4620      	mov	r0, r4
  404548:	f001 fe50 	bl	4061ec <__aeabi_fsub>
  40454c:	4639      	mov	r1, r7
  40454e:	4604      	mov	r4, r0
  404550:	4628      	mov	r0, r5
  404552:	f001 fe4d 	bl	4061f0 <__addsf3>
  404556:	4601      	mov	r1, r0
  404558:	4620      	mov	r0, r4
  40455a:	f002 f805 	bl	406568 <__aeabi_fdiv>
  40455e:	4601      	mov	r1, r0
  404560:	f001 fe46 	bl	4061f0 <__addsf3>
  404564:	4601      	mov	r1, r0
  404566:	4852      	ldr	r0, [pc, #328]	; (4046b0 <__ieee754_asinf+0x284>)
  404568:	f001 fe40 	bl	4061ec <__aeabi_fsub>
  40456c:	4601      	mov	r1, r0
  40456e:	4640      	mov	r0, r8
  404570:	f001 fe3c 	bl	4061ec <__aeabi_fsub>
  404574:	4629      	mov	r1, r5
  404576:	4604      	mov	r4, r0
  404578:	4628      	mov	r0, r5
  40457a:	f001 fe39 	bl	4061f0 <__addsf3>
  40457e:	4601      	mov	r1, r0
  404580:	484c      	ldr	r0, [pc, #304]	; (4046b4 <__ieee754_asinf+0x288>)
  404582:	f001 fe33 	bl	4061ec <__aeabi_fsub>
  404586:	4601      	mov	r1, r0
  404588:	4620      	mov	r0, r4
  40458a:	f001 fe2f 	bl	4061ec <__aeabi_fsub>
  40458e:	4601      	mov	r1, r0
  404590:	4848      	ldr	r0, [pc, #288]	; (4046b4 <__ieee754_asinf+0x288>)
  404592:	f001 fe2b 	bl	4061ec <__aeabi_fsub>
  404596:	2e00      	cmp	r6, #0
  404598:	f73f af63 	bgt.w	404462 <__ieee754_asinf+0x36>
  40459c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  4045a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4045a4:	f001 ffe0 	bl	406568 <__aeabi_fdiv>
  4045a8:	4639      	mov	r1, r7
  4045aa:	f001 ff29 	bl	406400 <__aeabi_fmul>
  4045ae:	4639      	mov	r1, r7
  4045b0:	f001 fe1e 	bl	4061f0 <__addsf3>
  4045b4:	4601      	mov	r1, r0
  4045b6:	f001 fe1b 	bl	4061f0 <__addsf3>
  4045ba:	493f      	ldr	r1, [pc, #252]	; (4046b8 <__ieee754_asinf+0x28c>)
  4045bc:	f001 fe18 	bl	4061f0 <__addsf3>
  4045c0:	4601      	mov	r1, r0
  4045c2:	483e      	ldr	r0, [pc, #248]	; (4046bc <__ieee754_asinf+0x290>)
  4045c4:	f001 fe12 	bl	4061ec <__aeabi_fsub>
  4045c8:	e7e5      	b.n	404596 <__ieee754_asinf+0x16a>
  4045ca:	493c      	ldr	r1, [pc, #240]	; (4046bc <__ieee754_asinf+0x290>)
  4045cc:	f001 ff18 	bl	406400 <__aeabi_fmul>
  4045d0:	4937      	ldr	r1, [pc, #220]	; (4046b0 <__ieee754_asinf+0x284>)
  4045d2:	4605      	mov	r5, r0
  4045d4:	4620      	mov	r0, r4
  4045d6:	f001 ff13 	bl	406400 <__aeabi_fmul>
  4045da:	4601      	mov	r1, r0
  4045dc:	4628      	mov	r0, r5
  4045de:	f001 fe07 	bl	4061f0 <__addsf3>
  4045e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4045e6:	4601      	mov	r1, r0
  4045e8:	f001 ff0a 	bl	406400 <__aeabi_fmul>
  4045ec:	4925      	ldr	r1, [pc, #148]	; (404684 <__ieee754_asinf+0x258>)
  4045ee:	4605      	mov	r5, r0
  4045f0:	f001 ff06 	bl	406400 <__aeabi_fmul>
  4045f4:	4924      	ldr	r1, [pc, #144]	; (404688 <__ieee754_asinf+0x25c>)
  4045f6:	f001 fdfb 	bl	4061f0 <__addsf3>
  4045fa:	4629      	mov	r1, r5
  4045fc:	f001 ff00 	bl	406400 <__aeabi_fmul>
  404600:	4922      	ldr	r1, [pc, #136]	; (40468c <__ieee754_asinf+0x260>)
  404602:	f001 fdf3 	bl	4061ec <__aeabi_fsub>
  404606:	4629      	mov	r1, r5
  404608:	f001 fefa 	bl	406400 <__aeabi_fmul>
  40460c:	4920      	ldr	r1, [pc, #128]	; (404690 <__ieee754_asinf+0x264>)
  40460e:	f001 fdef 	bl	4061f0 <__addsf3>
  404612:	4629      	mov	r1, r5
  404614:	f001 fef4 	bl	406400 <__aeabi_fmul>
  404618:	491e      	ldr	r1, [pc, #120]	; (404694 <__ieee754_asinf+0x268>)
  40461a:	f001 fde7 	bl	4061ec <__aeabi_fsub>
  40461e:	4629      	mov	r1, r5
  404620:	f001 feee 	bl	406400 <__aeabi_fmul>
  404624:	491c      	ldr	r1, [pc, #112]	; (404698 <__ieee754_asinf+0x26c>)
  404626:	f001 fde3 	bl	4061f0 <__addsf3>
  40462a:	4629      	mov	r1, r5
  40462c:	f001 fee8 	bl	406400 <__aeabi_fmul>
  404630:	491a      	ldr	r1, [pc, #104]	; (40469c <__ieee754_asinf+0x270>)
  404632:	4606      	mov	r6, r0
  404634:	4628      	mov	r0, r5
  404636:	f001 fee3 	bl	406400 <__aeabi_fmul>
  40463a:	4919      	ldr	r1, [pc, #100]	; (4046a0 <__ieee754_asinf+0x274>)
  40463c:	f001 fdd6 	bl	4061ec <__aeabi_fsub>
  404640:	4629      	mov	r1, r5
  404642:	f001 fedd 	bl	406400 <__aeabi_fmul>
  404646:	4917      	ldr	r1, [pc, #92]	; (4046a4 <__ieee754_asinf+0x278>)
  404648:	f001 fdd2 	bl	4061f0 <__addsf3>
  40464c:	4629      	mov	r1, r5
  40464e:	f001 fed7 	bl	406400 <__aeabi_fmul>
  404652:	4915      	ldr	r1, [pc, #84]	; (4046a8 <__ieee754_asinf+0x27c>)
  404654:	f001 fdca 	bl	4061ec <__aeabi_fsub>
  404658:	4629      	mov	r1, r5
  40465a:	f001 fed1 	bl	406400 <__aeabi_fmul>
  40465e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  404662:	f001 fdc5 	bl	4061f0 <__addsf3>
  404666:	4601      	mov	r1, r0
  404668:	4630      	mov	r0, r6
  40466a:	f001 ff7d 	bl	406568 <__aeabi_fdiv>
  40466e:	4621      	mov	r1, r4
  404670:	f001 fec6 	bl	406400 <__aeabi_fmul>
  404674:	4621      	mov	r1, r4
  404676:	f001 fdbb 	bl	4061f0 <__addsf3>
  40467a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40467e:	bf00      	nop
  404680:	7149f2ca 	.word	0x7149f2ca
  404684:	3811ef08 	.word	0x3811ef08
  404688:	3a4f7f04 	.word	0x3a4f7f04
  40468c:	3d241146 	.word	0x3d241146
  404690:	3e4e0aa8 	.word	0x3e4e0aa8
  404694:	3ea6b090 	.word	0x3ea6b090
  404698:	3e2aaaab 	.word	0x3e2aaaab
  40469c:	3d9dc62e 	.word	0x3d9dc62e
  4046a0:	3f303361 	.word	0x3f303361
  4046a4:	4001572d 	.word	0x4001572d
  4046a8:	4019d139 	.word	0x4019d139
  4046ac:	3f799999 	.word	0x3f799999
  4046b0:	b33bbd2e 	.word	0xb33bbd2e
  4046b4:	3f490fdb 	.word	0x3f490fdb
  4046b8:	333bbd2e 	.word	0x333bbd2e
  4046bc:	3fc90fdb 	.word	0x3fc90fdb

004046c0 <__ieee754_atan2f>:
  4046c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4046c2:	460c      	mov	r4, r1
  4046c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4046c8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
  4046cc:	4603      	mov	r3, r0
  4046ce:	dc14      	bgt.n	4046fa <__ieee754_atan2f+0x3a>
  4046d0:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
  4046d4:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
  4046d8:	4607      	mov	r7, r0
  4046da:	dc0e      	bgt.n	4046fa <__ieee754_atan2f+0x3a>
  4046dc:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
  4046e0:	d03d      	beq.n	40475e <__ieee754_atan2f+0x9e>
  4046e2:	17a5      	asrs	r5, r4, #30
  4046e4:	f005 0502 	and.w	r5, r5, #2
  4046e8:	ea45 75d0 	orr.w	r5, r5, r0, lsr #31
  4046ec:	b956      	cbnz	r6, 404704 <__ieee754_atan2f+0x44>
  4046ee:	2d02      	cmp	r5, #2
  4046f0:	d030      	beq.n	404754 <__ieee754_atan2f+0x94>
  4046f2:	2d03      	cmp	r5, #3
  4046f4:	d130      	bne.n	404758 <__ieee754_atan2f+0x98>
  4046f6:	4832      	ldr	r0, [pc, #200]	; (4047c0 <__ieee754_atan2f+0x100>)
  4046f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4046fa:	4619      	mov	r1, r3
  4046fc:	4620      	mov	r0, r4
  4046fe:	f001 fd77 	bl	4061f0 <__addsf3>
  404702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404704:	b301      	cbz	r1, 404748 <__ieee754_atan2f+0x88>
  404706:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
  40470a:	d02c      	beq.n	404766 <__ieee754_atan2f+0xa6>
  40470c:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
  404710:	d01a      	beq.n	404748 <__ieee754_atan2f+0x88>
  404712:	1a71      	subs	r1, r6, r1
  404714:	15c9      	asrs	r1, r1, #23
  404716:	293c      	cmp	r1, #60	; 0x3c
  404718:	dc1a      	bgt.n	404750 <__ieee754_atan2f+0x90>
  40471a:	2c00      	cmp	r4, #0
  40471c:	db39      	blt.n	404792 <__ieee754_atan2f+0xd2>
  40471e:	4621      	mov	r1, r4
  404720:	4618      	mov	r0, r3
  404722:	f001 ff21 	bl	406568 <__aeabi_fdiv>
  404726:	f000 fffd 	bl	405724 <fabsf>
  40472a:	f000 fee5 	bl	4054f8 <atanf>
  40472e:	2d01      	cmp	r5, #1
  404730:	d02c      	beq.n	40478c <__ieee754_atan2f+0xcc>
  404732:	2d02      	cmp	r5, #2
  404734:	d022      	beq.n	40477c <__ieee754_atan2f+0xbc>
  404736:	2d00      	cmp	r5, #0
  404738:	d02f      	beq.n	40479a <__ieee754_atan2f+0xda>
  40473a:	4922      	ldr	r1, [pc, #136]	; (4047c4 <__ieee754_atan2f+0x104>)
  40473c:	f001 fd58 	bl	4061f0 <__addsf3>
  404740:	4921      	ldr	r1, [pc, #132]	; (4047c8 <__ieee754_atan2f+0x108>)
  404742:	f001 fd53 	bl	4061ec <__aeabi_fsub>
  404746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404748:	2f00      	cmp	r7, #0
  40474a:	db06      	blt.n	40475a <__ieee754_atan2f+0x9a>
  40474c:	481f      	ldr	r0, [pc, #124]	; (4047cc <__ieee754_atan2f+0x10c>)
  40474e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404750:	481e      	ldr	r0, [pc, #120]	; (4047cc <__ieee754_atan2f+0x10c>)
  404752:	e7ec      	b.n	40472e <__ieee754_atan2f+0x6e>
  404754:	481c      	ldr	r0, [pc, #112]	; (4047c8 <__ieee754_atan2f+0x108>)
  404756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40475a:	481d      	ldr	r0, [pc, #116]	; (4047d0 <__ieee754_atan2f+0x110>)
  40475c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40475e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  404762:	f000 bec9 	b.w	4054f8 <atanf>
  404766:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
  40476a:	d017      	beq.n	40479c <__ieee754_atan2f+0xdc>
  40476c:	2d02      	cmp	r5, #2
  40476e:	d0f1      	beq.n	404754 <__ieee754_atan2f+0x94>
  404770:	2d03      	cmp	r5, #3
  404772:	d0c0      	beq.n	4046f6 <__ieee754_atan2f+0x36>
  404774:	2d01      	cmp	r5, #1
  404776:	d019      	beq.n	4047ac <__ieee754_atan2f+0xec>
  404778:	2000      	movs	r0, #0
  40477a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40477c:	4911      	ldr	r1, [pc, #68]	; (4047c4 <__ieee754_atan2f+0x104>)
  40477e:	f001 fd37 	bl	4061f0 <__addsf3>
  404782:	4601      	mov	r1, r0
  404784:	4810      	ldr	r0, [pc, #64]	; (4047c8 <__ieee754_atan2f+0x108>)
  404786:	f001 fd31 	bl	4061ec <__aeabi_fsub>
  40478a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40478c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  404790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404792:	313c      	adds	r1, #60	; 0x3c
  404794:	dac3      	bge.n	40471e <__ieee754_atan2f+0x5e>
  404796:	2000      	movs	r0, #0
  404798:	e7c9      	b.n	40472e <__ieee754_atan2f+0x6e>
  40479a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40479c:	2d02      	cmp	r5, #2
  40479e:	d00c      	beq.n	4047ba <__ieee754_atan2f+0xfa>
  4047a0:	2d03      	cmp	r5, #3
  4047a2:	d008      	beq.n	4047b6 <__ieee754_atan2f+0xf6>
  4047a4:	2d01      	cmp	r5, #1
  4047a6:	d004      	beq.n	4047b2 <__ieee754_atan2f+0xf2>
  4047a8:	480a      	ldr	r0, [pc, #40]	; (4047d4 <__ieee754_atan2f+0x114>)
  4047aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4047ac:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  4047b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4047b2:	4809      	ldr	r0, [pc, #36]	; (4047d8 <__ieee754_atan2f+0x118>)
  4047b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4047b6:	4809      	ldr	r0, [pc, #36]	; (4047dc <__ieee754_atan2f+0x11c>)
  4047b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4047ba:	4809      	ldr	r0, [pc, #36]	; (4047e0 <__ieee754_atan2f+0x120>)
  4047bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4047be:	bf00      	nop
  4047c0:	c0490fdb 	.word	0xc0490fdb
  4047c4:	33bbbd2e 	.word	0x33bbbd2e
  4047c8:	40490fdb 	.word	0x40490fdb
  4047cc:	3fc90fdb 	.word	0x3fc90fdb
  4047d0:	bfc90fdb 	.word	0xbfc90fdb
  4047d4:	3f490fdb 	.word	0x3f490fdb
  4047d8:	bf490fdb 	.word	0xbf490fdb
  4047dc:	c016cbe4 	.word	0xc016cbe4
  4047e0:	4016cbe4 	.word	0x4016cbe4

004047e4 <__ieee754_rem_pio2f>:
  4047e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4047e8:	4aa8      	ldr	r2, [pc, #672]	; (404a8c <__ieee754_rem_pio2f+0x2a8>)
  4047ea:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
  4047ee:	4294      	cmp	r4, r2
  4047f0:	b089      	sub	sp, #36	; 0x24
  4047f2:	dd6e      	ble.n	4048d2 <__ieee754_rem_pio2f+0xee>
  4047f4:	4aa6      	ldr	r2, [pc, #664]	; (404a90 <__ieee754_rem_pio2f+0x2ac>)
  4047f6:	4294      	cmp	r4, r2
  4047f8:	4606      	mov	r6, r0
  4047fa:	460d      	mov	r5, r1
  4047fc:	dc1c      	bgt.n	404838 <__ieee754_rem_pio2f+0x54>
  4047fe:	2800      	cmp	r0, #0
  404800:	49a4      	ldr	r1, [pc, #656]	; (404a94 <__ieee754_rem_pio2f+0x2b0>)
  404802:	f340 80fc 	ble.w	4049fe <__ieee754_rem_pio2f+0x21a>
  404806:	f001 fcf1 	bl	4061ec <__aeabi_fsub>
  40480a:	4ba3      	ldr	r3, [pc, #652]	; (404a98 <__ieee754_rem_pio2f+0x2b4>)
  40480c:	f024 040f 	bic.w	r4, r4, #15
  404810:	429c      	cmp	r4, r3
  404812:	4606      	mov	r6, r0
  404814:	d06c      	beq.n	4048f0 <__ieee754_rem_pio2f+0x10c>
  404816:	49a1      	ldr	r1, [pc, #644]	; (404a9c <__ieee754_rem_pio2f+0x2b8>)
  404818:	f001 fce8 	bl	4061ec <__aeabi_fsub>
  40481c:	4601      	mov	r1, r0
  40481e:	6028      	str	r0, [r5, #0]
  404820:	4630      	mov	r0, r6
  404822:	f001 fce3 	bl	4061ec <__aeabi_fsub>
  404826:	499d      	ldr	r1, [pc, #628]	; (404a9c <__ieee754_rem_pio2f+0x2b8>)
  404828:	f001 fce0 	bl	4061ec <__aeabi_fsub>
  40482c:	2701      	movs	r7, #1
  40482e:	6068      	str	r0, [r5, #4]
  404830:	4638      	mov	r0, r7
  404832:	b009      	add	sp, #36	; 0x24
  404834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404838:	4a99      	ldr	r2, [pc, #612]	; (404aa0 <__ieee754_rem_pio2f+0x2bc>)
  40483a:	4294      	cmp	r4, r2
  40483c:	dd6a      	ble.n	404914 <__ieee754_rem_pio2f+0x130>
  40483e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
  404842:	da4e      	bge.n	4048e2 <__ieee754_rem_pio2f+0xfe>
  404844:	15e7      	asrs	r7, r4, #23
  404846:	3f86      	subs	r7, #134	; 0x86
  404848:	eba4 54c7 	sub.w	r4, r4, r7, lsl #23
  40484c:	4620      	mov	r0, r4
  40484e:	f001 ffb3 	bl	4067b8 <__aeabi_f2iz>
  404852:	f001 fd81 	bl	406358 <__aeabi_i2f>
  404856:	4603      	mov	r3, r0
  404858:	4601      	mov	r1, r0
  40485a:	4620      	mov	r0, r4
  40485c:	9305      	str	r3, [sp, #20]
  40485e:	f001 fcc5 	bl	4061ec <__aeabi_fsub>
  404862:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
  404866:	f001 fdcb 	bl	406400 <__aeabi_fmul>
  40486a:	4680      	mov	r8, r0
  40486c:	f001 ffa4 	bl	4067b8 <__aeabi_f2iz>
  404870:	f001 fd72 	bl	406358 <__aeabi_i2f>
  404874:	4601      	mov	r1, r0
  404876:	4604      	mov	r4, r0
  404878:	4640      	mov	r0, r8
  40487a:	9406      	str	r4, [sp, #24]
  40487c:	f001 fcb6 	bl	4061ec <__aeabi_fsub>
  404880:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
  404884:	f001 fdbc 	bl	406400 <__aeabi_fmul>
  404888:	2100      	movs	r1, #0
  40488a:	9007      	str	r0, [sp, #28]
  40488c:	f001 ff4c 	bl	406728 <__aeabi_fcmpeq>
  404890:	2800      	cmp	r0, #0
  404892:	f000 80cb 	beq.w	404a2c <__ieee754_rem_pio2f+0x248>
  404896:	4620      	mov	r0, r4
  404898:	2100      	movs	r1, #0
  40489a:	f001 ff45 	bl	406728 <__aeabi_fcmpeq>
  40489e:	2800      	cmp	r0, #0
  4048a0:	bf14      	ite	ne
  4048a2:	2301      	movne	r3, #1
  4048a4:	2302      	moveq	r3, #2
  4048a6:	4a7f      	ldr	r2, [pc, #508]	; (404aa4 <__ieee754_rem_pio2f+0x2c0>)
  4048a8:	9201      	str	r2, [sp, #4]
  4048aa:	2102      	movs	r1, #2
  4048ac:	463a      	mov	r2, r7
  4048ae:	9100      	str	r1, [sp, #0]
  4048b0:	a805      	add	r0, sp, #20
  4048b2:	4629      	mov	r1, r5
  4048b4:	f000 fa1c 	bl	404cf0 <__kernel_rem_pio2f>
  4048b8:	2e00      	cmp	r6, #0
  4048ba:	4607      	mov	r7, r0
  4048bc:	da0d      	bge.n	4048da <__ieee754_rem_pio2f+0xf6>
  4048be:	e895 000c 	ldmia.w	r5, {r2, r3}
  4048c2:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  4048c6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  4048ca:	4247      	negs	r7, r0
  4048cc:	602a      	str	r2, [r5, #0]
  4048ce:	606b      	str	r3, [r5, #4]
  4048d0:	e003      	b.n	4048da <__ieee754_rem_pio2f+0xf6>
  4048d2:	2200      	movs	r2, #0
  4048d4:	6008      	str	r0, [r1, #0]
  4048d6:	604a      	str	r2, [r1, #4]
  4048d8:	2700      	movs	r7, #0
  4048da:	4638      	mov	r0, r7
  4048dc:	b009      	add	sp, #36	; 0x24
  4048de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4048e2:	4601      	mov	r1, r0
  4048e4:	f001 fc82 	bl	4061ec <__aeabi_fsub>
  4048e8:	2700      	movs	r7, #0
  4048ea:	6068      	str	r0, [r5, #4]
  4048ec:	6028      	str	r0, [r5, #0]
  4048ee:	e7f4      	b.n	4048da <__ieee754_rem_pio2f+0xf6>
  4048f0:	496d      	ldr	r1, [pc, #436]	; (404aa8 <__ieee754_rem_pio2f+0x2c4>)
  4048f2:	f001 fc7b 	bl	4061ec <__aeabi_fsub>
  4048f6:	496d      	ldr	r1, [pc, #436]	; (404aac <__ieee754_rem_pio2f+0x2c8>)
  4048f8:	4604      	mov	r4, r0
  4048fa:	f001 fc77 	bl	4061ec <__aeabi_fsub>
  4048fe:	4601      	mov	r1, r0
  404900:	6028      	str	r0, [r5, #0]
  404902:	4620      	mov	r0, r4
  404904:	f001 fc72 	bl	4061ec <__aeabi_fsub>
  404908:	4968      	ldr	r1, [pc, #416]	; (404aac <__ieee754_rem_pio2f+0x2c8>)
  40490a:	f001 fc6f 	bl	4061ec <__aeabi_fsub>
  40490e:	2701      	movs	r7, #1
  404910:	6068      	str	r0, [r5, #4]
  404912:	e7e2      	b.n	4048da <__ieee754_rem_pio2f+0xf6>
  404914:	f000 ff06 	bl	405724 <fabsf>
  404918:	4965      	ldr	r1, [pc, #404]	; (404ab0 <__ieee754_rem_pio2f+0x2cc>)
  40491a:	4680      	mov	r8, r0
  40491c:	f001 fd70 	bl	406400 <__aeabi_fmul>
  404920:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  404924:	f001 fc64 	bl	4061f0 <__addsf3>
  404928:	f001 ff46 	bl	4067b8 <__aeabi_f2iz>
  40492c:	4607      	mov	r7, r0
  40492e:	f001 fd13 	bl	406358 <__aeabi_i2f>
  404932:	4958      	ldr	r1, [pc, #352]	; (404a94 <__ieee754_rem_pio2f+0x2b0>)
  404934:	4683      	mov	fp, r0
  404936:	f001 fd63 	bl	406400 <__aeabi_fmul>
  40493a:	4601      	mov	r1, r0
  40493c:	4640      	mov	r0, r8
  40493e:	f001 fc55 	bl	4061ec <__aeabi_fsub>
  404942:	4956      	ldr	r1, [pc, #344]	; (404a9c <__ieee754_rem_pio2f+0x2b8>)
  404944:	4681      	mov	r9, r0
  404946:	4658      	mov	r0, fp
  404948:	f001 fd5a 	bl	406400 <__aeabi_fmul>
  40494c:	2f1f      	cmp	r7, #31
  40494e:	4682      	mov	sl, r0
  404950:	dc21      	bgt.n	404996 <__ieee754_rem_pio2f+0x1b2>
  404952:	4a58      	ldr	r2, [pc, #352]	; (404ab4 <__ieee754_rem_pio2f+0x2d0>)
  404954:	1e79      	subs	r1, r7, #1
  404956:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
  40495a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  40495e:	4293      	cmp	r3, r2
  404960:	d019      	beq.n	404996 <__ieee754_rem_pio2f+0x1b2>
  404962:	4651      	mov	r1, sl
  404964:	4648      	mov	r0, r9
  404966:	f001 fc41 	bl	4061ec <__aeabi_fsub>
  40496a:	4680      	mov	r8, r0
  40496c:	f8c5 8000 	str.w	r8, [r5]
  404970:	4641      	mov	r1, r8
  404972:	4648      	mov	r0, r9
  404974:	f001 fc3a 	bl	4061ec <__aeabi_fsub>
  404978:	4651      	mov	r1, sl
  40497a:	f001 fc37 	bl	4061ec <__aeabi_fsub>
  40497e:	2e00      	cmp	r6, #0
  404980:	6068      	str	r0, [r5, #4]
  404982:	daaa      	bge.n	4048da <__ieee754_rem_pio2f+0xf6>
  404984:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
  404988:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  40498c:	f8c5 8000 	str.w	r8, [r5]
  404990:	6068      	str	r0, [r5, #4]
  404992:	427f      	negs	r7, r7
  404994:	e7a1      	b.n	4048da <__ieee754_rem_pio2f+0xf6>
  404996:	4651      	mov	r1, sl
  404998:	4648      	mov	r0, r9
  40499a:	f001 fc27 	bl	4061ec <__aeabi_fsub>
  40499e:	15e2      	asrs	r2, r4, #23
  4049a0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
  4049a4:	1ad3      	subs	r3, r2, r3
  4049a6:	2b08      	cmp	r3, #8
  4049a8:	4680      	mov	r8, r0
  4049aa:	dddf      	ble.n	40496c <__ieee754_rem_pio2f+0x188>
  4049ac:	493e      	ldr	r1, [pc, #248]	; (404aa8 <__ieee754_rem_pio2f+0x2c4>)
  4049ae:	9203      	str	r2, [sp, #12]
  4049b0:	4658      	mov	r0, fp
  4049b2:	f001 fd25 	bl	406400 <__aeabi_fmul>
  4049b6:	4680      	mov	r8, r0
  4049b8:	4601      	mov	r1, r0
  4049ba:	4648      	mov	r0, r9
  4049bc:	f001 fc16 	bl	4061ec <__aeabi_fsub>
  4049c0:	4601      	mov	r1, r0
  4049c2:	4604      	mov	r4, r0
  4049c4:	4648      	mov	r0, r9
  4049c6:	f001 fc11 	bl	4061ec <__aeabi_fsub>
  4049ca:	4641      	mov	r1, r8
  4049cc:	f001 fc0e 	bl	4061ec <__aeabi_fsub>
  4049d0:	4936      	ldr	r1, [pc, #216]	; (404aac <__ieee754_rem_pio2f+0x2c8>)
  4049d2:	4680      	mov	r8, r0
  4049d4:	4658      	mov	r0, fp
  4049d6:	f001 fd13 	bl	406400 <__aeabi_fmul>
  4049da:	4641      	mov	r1, r8
  4049dc:	f001 fc06 	bl	4061ec <__aeabi_fsub>
  4049e0:	4601      	mov	r1, r0
  4049e2:	4682      	mov	sl, r0
  4049e4:	4620      	mov	r0, r4
  4049e6:	f001 fc01 	bl	4061ec <__aeabi_fsub>
  4049ea:	9a03      	ldr	r2, [sp, #12]
  4049ec:	f3c0 53c7 	ubfx	r3, r0, #23, #8
  4049f0:	1ad2      	subs	r2, r2, r3
  4049f2:	2a19      	cmp	r2, #25
  4049f4:	4680      	mov	r8, r0
  4049f6:	dc2e      	bgt.n	404a56 <__ieee754_rem_pio2f+0x272>
  4049f8:	6028      	str	r0, [r5, #0]
  4049fa:	46a1      	mov	r9, r4
  4049fc:	e7b8      	b.n	404970 <__ieee754_rem_pio2f+0x18c>
  4049fe:	f001 fbf7 	bl	4061f0 <__addsf3>
  404a02:	4b25      	ldr	r3, [pc, #148]	; (404a98 <__ieee754_rem_pio2f+0x2b4>)
  404a04:	f024 040f 	bic.w	r4, r4, #15
  404a08:	429c      	cmp	r4, r3
  404a0a:	4606      	mov	r6, r0
  404a0c:	d010      	beq.n	404a30 <__ieee754_rem_pio2f+0x24c>
  404a0e:	4923      	ldr	r1, [pc, #140]	; (404a9c <__ieee754_rem_pio2f+0x2b8>)
  404a10:	f001 fbee 	bl	4061f0 <__addsf3>
  404a14:	4601      	mov	r1, r0
  404a16:	6028      	str	r0, [r5, #0]
  404a18:	4630      	mov	r0, r6
  404a1a:	f001 fbe7 	bl	4061ec <__aeabi_fsub>
  404a1e:	491f      	ldr	r1, [pc, #124]	; (404a9c <__ieee754_rem_pio2f+0x2b8>)
  404a20:	f001 fbe6 	bl	4061f0 <__addsf3>
  404a24:	f04f 37ff 	mov.w	r7, #4294967295
  404a28:	6068      	str	r0, [r5, #4]
  404a2a:	e756      	b.n	4048da <__ieee754_rem_pio2f+0xf6>
  404a2c:	2303      	movs	r3, #3
  404a2e:	e73a      	b.n	4048a6 <__ieee754_rem_pio2f+0xc2>
  404a30:	491d      	ldr	r1, [pc, #116]	; (404aa8 <__ieee754_rem_pio2f+0x2c4>)
  404a32:	f001 fbdd 	bl	4061f0 <__addsf3>
  404a36:	491d      	ldr	r1, [pc, #116]	; (404aac <__ieee754_rem_pio2f+0x2c8>)
  404a38:	4604      	mov	r4, r0
  404a3a:	f001 fbd9 	bl	4061f0 <__addsf3>
  404a3e:	4601      	mov	r1, r0
  404a40:	6028      	str	r0, [r5, #0]
  404a42:	4620      	mov	r0, r4
  404a44:	f001 fbd2 	bl	4061ec <__aeabi_fsub>
  404a48:	4918      	ldr	r1, [pc, #96]	; (404aac <__ieee754_rem_pio2f+0x2c8>)
  404a4a:	f001 fbd1 	bl	4061f0 <__addsf3>
  404a4e:	f04f 37ff 	mov.w	r7, #4294967295
  404a52:	6068      	str	r0, [r5, #4]
  404a54:	e741      	b.n	4048da <__ieee754_rem_pio2f+0xf6>
  404a56:	4918      	ldr	r1, [pc, #96]	; (404ab8 <__ieee754_rem_pio2f+0x2d4>)
  404a58:	4658      	mov	r0, fp
  404a5a:	f001 fcd1 	bl	406400 <__aeabi_fmul>
  404a5e:	4601      	mov	r1, r0
  404a60:	4680      	mov	r8, r0
  404a62:	4620      	mov	r0, r4
  404a64:	f001 fbc2 	bl	4061ec <__aeabi_fsub>
  404a68:	4601      	mov	r1, r0
  404a6a:	4681      	mov	r9, r0
  404a6c:	4620      	mov	r0, r4
  404a6e:	f001 fbbd 	bl	4061ec <__aeabi_fsub>
  404a72:	4641      	mov	r1, r8
  404a74:	f001 fbba 	bl	4061ec <__aeabi_fsub>
  404a78:	4910      	ldr	r1, [pc, #64]	; (404abc <__ieee754_rem_pio2f+0x2d8>)
  404a7a:	4604      	mov	r4, r0
  404a7c:	4658      	mov	r0, fp
  404a7e:	f001 fcbf 	bl	406400 <__aeabi_fmul>
  404a82:	4621      	mov	r1, r4
  404a84:	f001 fbb2 	bl	4061ec <__aeabi_fsub>
  404a88:	4682      	mov	sl, r0
  404a8a:	e76a      	b.n	404962 <__ieee754_rem_pio2f+0x17e>
  404a8c:	3f490fd8 	.word	0x3f490fd8
  404a90:	4016cbe3 	.word	0x4016cbe3
  404a94:	3fc90f80 	.word	0x3fc90f80
  404a98:	3fc90fd0 	.word	0x3fc90fd0
  404a9c:	37354443 	.word	0x37354443
  404aa0:	43490f80 	.word	0x43490f80
  404aa4:	0040b9cc 	.word	0x0040b9cc
  404aa8:	37354400 	.word	0x37354400
  404aac:	2e85a308 	.word	0x2e85a308
  404ab0:	3f22f984 	.word	0x3f22f984
  404ab4:	0040b94c 	.word	0x0040b94c
  404ab8:	2e85a300 	.word	0x2e85a300
  404abc:	248d3132 	.word	0x248d3132

00404ac0 <__ieee754_sqrtf>:
  404ac0:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
  404ac4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
  404ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404aca:	4604      	mov	r4, r0
  404acc:	d22e      	bcs.n	404b2c <__ieee754_sqrtf+0x6c>
  404ace:	b362      	cbz	r2, 404b2a <__ieee754_sqrtf+0x6a>
  404ad0:	2800      	cmp	r0, #0
  404ad2:	4603      	mov	r3, r0
  404ad4:	db3d      	blt.n	404b52 <__ieee754_sqrtf+0x92>
  404ad6:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
  404ada:	ea4f 50e0 	mov.w	r0, r0, asr #23
  404ade:	d32c      	bcc.n	404b3a <__ieee754_sqrtf+0x7a>
  404ae0:	387f      	subs	r0, #127	; 0x7f
  404ae2:	f3c3 0316 	ubfx	r3, r3, #0, #23
  404ae6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  404aea:	07c2      	lsls	r2, r0, #31
  404aec:	bf48      	it	mi
  404aee:	005b      	lslmi	r3, r3, #1
  404af0:	2600      	movs	r6, #0
  404af2:	1047      	asrs	r7, r0, #1
  404af4:	005b      	lsls	r3, r3, #1
  404af6:	4631      	mov	r1, r6
  404af8:	2419      	movs	r4, #25
  404afa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  404afe:	188d      	adds	r5, r1, r2
  404b00:	429d      	cmp	r5, r3
  404b02:	dc02      	bgt.n	404b0a <__ieee754_sqrtf+0x4a>
  404b04:	1b5b      	subs	r3, r3, r5
  404b06:	18a9      	adds	r1, r5, r2
  404b08:	4416      	add	r6, r2
  404b0a:	3c01      	subs	r4, #1
  404b0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
  404b10:	ea4f 0252 	mov.w	r2, r2, lsr #1
  404b14:	d1f3      	bne.n	404afe <__ieee754_sqrtf+0x3e>
  404b16:	b113      	cbz	r3, 404b1e <__ieee754_sqrtf+0x5e>
  404b18:	3601      	adds	r6, #1
  404b1a:	f026 0601 	bic.w	r6, r6, #1
  404b1e:	1070      	asrs	r0, r6, #1
  404b20:	f100 507c 	add.w	r0, r0, #1056964608	; 0x3f000000
  404b24:	eb00 50c7 	add.w	r0, r0, r7, lsl #23
  404b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404b2c:	4601      	mov	r1, r0
  404b2e:	f001 fc67 	bl	406400 <__aeabi_fmul>
  404b32:	4621      	mov	r1, r4
  404b34:	f001 fb5c 	bl	4061f0 <__addsf3>
  404b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404b3a:	f414 0200 	ands.w	r2, r4, #8388608	; 0x800000
  404b3e:	d001      	beq.n	404b44 <__ieee754_sqrtf+0x84>
  404b40:	e00e      	b.n	404b60 <__ieee754_sqrtf+0xa0>
  404b42:	460a      	mov	r2, r1
  404b44:	005b      	lsls	r3, r3, #1
  404b46:	021c      	lsls	r4, r3, #8
  404b48:	f102 0101 	add.w	r1, r2, #1
  404b4c:	d5f9      	bpl.n	404b42 <__ieee754_sqrtf+0x82>
  404b4e:	1a80      	subs	r0, r0, r2
  404b50:	e7c6      	b.n	404ae0 <__ieee754_sqrtf+0x20>
  404b52:	4601      	mov	r1, r0
  404b54:	f001 fb4a 	bl	4061ec <__aeabi_fsub>
  404b58:	4601      	mov	r1, r0
  404b5a:	f001 fd05 	bl	406568 <__aeabi_fdiv>
  404b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404b60:	f04f 32ff 	mov.w	r2, #4294967295
  404b64:	e7f3      	b.n	404b4e <__ieee754_sqrtf+0x8e>
  404b66:	bf00      	nop

00404b68 <__kernel_cosf>:
  404b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404b6c:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
  404b70:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
  404b74:	4606      	mov	r6, r0
  404b76:	460f      	mov	r7, r1
  404b78:	da49      	bge.n	404c0e <__kernel_cosf+0xa6>
  404b7a:	f001 fe1d 	bl	4067b8 <__aeabi_f2iz>
  404b7e:	2800      	cmp	r0, #0
  404b80:	f000 809d 	beq.w	404cbe <__kernel_cosf+0x156>
  404b84:	4631      	mov	r1, r6
  404b86:	4630      	mov	r0, r6
  404b88:	f001 fc3a 	bl	406400 <__aeabi_fmul>
  404b8c:	494e      	ldr	r1, [pc, #312]	; (404cc8 <__kernel_cosf+0x160>)
  404b8e:	4605      	mov	r5, r0
  404b90:	f001 fc36 	bl	406400 <__aeabi_fmul>
  404b94:	494d      	ldr	r1, [pc, #308]	; (404ccc <__kernel_cosf+0x164>)
  404b96:	f001 fb2b 	bl	4061f0 <__addsf3>
  404b9a:	4629      	mov	r1, r5
  404b9c:	f001 fc30 	bl	406400 <__aeabi_fmul>
  404ba0:	494b      	ldr	r1, [pc, #300]	; (404cd0 <__kernel_cosf+0x168>)
  404ba2:	f001 fb23 	bl	4061ec <__aeabi_fsub>
  404ba6:	4629      	mov	r1, r5
  404ba8:	f001 fc2a 	bl	406400 <__aeabi_fmul>
  404bac:	4949      	ldr	r1, [pc, #292]	; (404cd4 <__kernel_cosf+0x16c>)
  404bae:	f001 fb1f 	bl	4061f0 <__addsf3>
  404bb2:	4629      	mov	r1, r5
  404bb4:	f001 fc24 	bl	406400 <__aeabi_fmul>
  404bb8:	4947      	ldr	r1, [pc, #284]	; (404cd8 <__kernel_cosf+0x170>)
  404bba:	f001 fb17 	bl	4061ec <__aeabi_fsub>
  404bbe:	4629      	mov	r1, r5
  404bc0:	f001 fc1e 	bl	406400 <__aeabi_fmul>
  404bc4:	4945      	ldr	r1, [pc, #276]	; (404cdc <__kernel_cosf+0x174>)
  404bc6:	f001 fb13 	bl	4061f0 <__addsf3>
  404bca:	4629      	mov	r1, r5
  404bcc:	f001 fc18 	bl	406400 <__aeabi_fmul>
  404bd0:	4680      	mov	r8, r0
  404bd2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  404bd6:	4628      	mov	r0, r5
  404bd8:	f001 fc12 	bl	406400 <__aeabi_fmul>
  404bdc:	4641      	mov	r1, r8
  404bde:	4604      	mov	r4, r0
  404be0:	4628      	mov	r0, r5
  404be2:	f001 fc0d 	bl	406400 <__aeabi_fmul>
  404be6:	4639      	mov	r1, r7
  404be8:	4605      	mov	r5, r0
  404bea:	4630      	mov	r0, r6
  404bec:	f001 fc08 	bl	406400 <__aeabi_fmul>
  404bf0:	4601      	mov	r1, r0
  404bf2:	4628      	mov	r0, r5
  404bf4:	f001 fafa 	bl	4061ec <__aeabi_fsub>
  404bf8:	4601      	mov	r1, r0
  404bfa:	4620      	mov	r0, r4
  404bfc:	f001 faf6 	bl	4061ec <__aeabi_fsub>
  404c00:	4601      	mov	r1, r0
  404c02:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  404c06:	f001 faf1 	bl	4061ec <__aeabi_fsub>
  404c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404c0e:	4601      	mov	r1, r0
  404c10:	f001 fbf6 	bl	406400 <__aeabi_fmul>
  404c14:	492c      	ldr	r1, [pc, #176]	; (404cc8 <__kernel_cosf+0x160>)
  404c16:	4605      	mov	r5, r0
  404c18:	f001 fbf2 	bl	406400 <__aeabi_fmul>
  404c1c:	492b      	ldr	r1, [pc, #172]	; (404ccc <__kernel_cosf+0x164>)
  404c1e:	f001 fae7 	bl	4061f0 <__addsf3>
  404c22:	4629      	mov	r1, r5
  404c24:	f001 fbec 	bl	406400 <__aeabi_fmul>
  404c28:	4929      	ldr	r1, [pc, #164]	; (404cd0 <__kernel_cosf+0x168>)
  404c2a:	f001 fadf 	bl	4061ec <__aeabi_fsub>
  404c2e:	4629      	mov	r1, r5
  404c30:	f001 fbe6 	bl	406400 <__aeabi_fmul>
  404c34:	4927      	ldr	r1, [pc, #156]	; (404cd4 <__kernel_cosf+0x16c>)
  404c36:	f001 fadb 	bl	4061f0 <__addsf3>
  404c3a:	4629      	mov	r1, r5
  404c3c:	f001 fbe0 	bl	406400 <__aeabi_fmul>
  404c40:	4925      	ldr	r1, [pc, #148]	; (404cd8 <__kernel_cosf+0x170>)
  404c42:	f001 fad3 	bl	4061ec <__aeabi_fsub>
  404c46:	4629      	mov	r1, r5
  404c48:	f001 fbda 	bl	406400 <__aeabi_fmul>
  404c4c:	4923      	ldr	r1, [pc, #140]	; (404cdc <__kernel_cosf+0x174>)
  404c4e:	f001 facf 	bl	4061f0 <__addsf3>
  404c52:	4629      	mov	r1, r5
  404c54:	f001 fbd4 	bl	406400 <__aeabi_fmul>
  404c58:	4b21      	ldr	r3, [pc, #132]	; (404ce0 <__kernel_cosf+0x178>)
  404c5a:	429c      	cmp	r4, r3
  404c5c:	4680      	mov	r8, r0
  404c5e:	ddb8      	ble.n	404bd2 <__kernel_cosf+0x6a>
  404c60:	4b20      	ldr	r3, [pc, #128]	; (404ce4 <__kernel_cosf+0x17c>)
  404c62:	429c      	cmp	r4, r3
  404c64:	dc27      	bgt.n	404cb6 <__kernel_cosf+0x14e>
  404c66:	f104 447f 	add.w	r4, r4, #4278190080	; 0xff000000
  404c6a:	4621      	mov	r1, r4
  404c6c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  404c70:	f001 fabc 	bl	4061ec <__aeabi_fsub>
  404c74:	4681      	mov	r9, r0
  404c76:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  404c7a:	4628      	mov	r0, r5
  404c7c:	f001 fbc0 	bl	406400 <__aeabi_fmul>
  404c80:	4621      	mov	r1, r4
  404c82:	f001 fab3 	bl	4061ec <__aeabi_fsub>
  404c86:	4641      	mov	r1, r8
  404c88:	4604      	mov	r4, r0
  404c8a:	4628      	mov	r0, r5
  404c8c:	f001 fbb8 	bl	406400 <__aeabi_fmul>
  404c90:	4639      	mov	r1, r7
  404c92:	4605      	mov	r5, r0
  404c94:	4630      	mov	r0, r6
  404c96:	f001 fbb3 	bl	406400 <__aeabi_fmul>
  404c9a:	4601      	mov	r1, r0
  404c9c:	4628      	mov	r0, r5
  404c9e:	f001 faa5 	bl	4061ec <__aeabi_fsub>
  404ca2:	4601      	mov	r1, r0
  404ca4:	4620      	mov	r0, r4
  404ca6:	f001 faa1 	bl	4061ec <__aeabi_fsub>
  404caa:	4601      	mov	r1, r0
  404cac:	4648      	mov	r0, r9
  404cae:	f001 fa9d 	bl	4061ec <__aeabi_fsub>
  404cb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404cb6:	f8df 9034 	ldr.w	r9, [pc, #52]	; 404cec <__kernel_cosf+0x184>
  404cba:	4c0b      	ldr	r4, [pc, #44]	; (404ce8 <__kernel_cosf+0x180>)
  404cbc:	e7db      	b.n	404c76 <__kernel_cosf+0x10e>
  404cbe:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  404cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404cc6:	bf00      	nop
  404cc8:	ad47d74e 	.word	0xad47d74e
  404ccc:	310f74f6 	.word	0x310f74f6
  404cd0:	3493f27c 	.word	0x3493f27c
  404cd4:	37d00d01 	.word	0x37d00d01
  404cd8:	3ab60b61 	.word	0x3ab60b61
  404cdc:	3d2aaaab 	.word	0x3d2aaaab
  404ce0:	3e999999 	.word	0x3e999999
  404ce4:	3f480000 	.word	0x3f480000
  404ce8:	3e900000 	.word	0x3e900000
  404cec:	3f380000 	.word	0x3f380000

00404cf0 <__kernel_rem_pio2f>:
  404cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404cf4:	b0dd      	sub	sp, #372	; 0x174
  404cf6:	4c90      	ldr	r4, [pc, #576]	; (404f38 <__kernel_rem_pio2f+0x248>)
  404cf8:	9308      	str	r3, [sp, #32]
  404cfa:	3b01      	subs	r3, #1
  404cfc:	9301      	str	r3, [sp, #4]
  404cfe:	1ed3      	subs	r3, r2, #3
  404d00:	bf48      	it	mi
  404d02:	1d13      	addmi	r3, r2, #4
  404d04:	9d66      	ldr	r5, [sp, #408]	; 0x198
  404d06:	9107      	str	r1, [sp, #28]
  404d08:	10db      	asrs	r3, r3, #3
  404d0a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404d0e:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
  404d12:	9309      	str	r3, [sp, #36]	; 0x24
  404d14:	4619      	mov	r1, r3
  404d16:	3301      	adds	r3, #1
  404d18:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
  404d1c:	9405      	str	r4, [sp, #20]
  404d1e:	9a01      	ldr	r2, [sp, #4]
  404d20:	9304      	str	r3, [sp, #16]
  404d22:	9b05      	ldr	r3, [sp, #20]
  404d24:	9002      	str	r0, [sp, #8]
  404d26:	189c      	adds	r4, r3, r2
  404d28:	eba1 0602 	sub.w	r6, r1, r2
  404d2c:	d417      	bmi.n	404d5e <__kernel_rem_pio2f+0x6e>
  404d2e:	4434      	add	r4, r6
  404d30:	2500      	movs	r5, #0
  404d32:	3401      	adds	r4, #1
  404d34:	af1f      	add	r7, sp, #124	; 0x7c
  404d36:	f8dd 819c 	ldr.w	r8, [sp, #412]	; 0x19c
  404d3a:	e008      	b.n	404d4e <__kernel_rem_pio2f+0x5e>
  404d3c:	f858 0026 	ldr.w	r0, [r8, r6, lsl #2]
  404d40:	f001 fb0a 	bl	406358 <__aeabi_i2f>
  404d44:	3601      	adds	r6, #1
  404d46:	42a6      	cmp	r6, r4
  404d48:	f847 0f04 	str.w	r0, [r7, #4]!
  404d4c:	d007      	beq.n	404d5e <__kernel_rem_pio2f+0x6e>
  404d4e:	2e00      	cmp	r6, #0
  404d50:	daf4      	bge.n	404d3c <__kernel_rem_pio2f+0x4c>
  404d52:	3601      	adds	r6, #1
  404d54:	4628      	mov	r0, r5
  404d56:	42a6      	cmp	r6, r4
  404d58:	f847 0f04 	str.w	r0, [r7, #4]!
  404d5c:	d1f7      	bne.n	404d4e <__kernel_rem_pio2f+0x5e>
  404d5e:	9b05      	ldr	r3, [sp, #20]
  404d60:	2b00      	cmp	r3, #0
  404d62:	db28      	blt.n	404db6 <__kernel_rem_pio2f+0xc6>
  404d64:	9b08      	ldr	r3, [sp, #32]
  404d66:	009e      	lsls	r6, r3, #2
  404d68:	9b02      	ldr	r3, [sp, #8]
  404d6a:	1f35      	subs	r5, r6, #4
  404d6c:	441d      	add	r5, r3
  404d6e:	ab20      	add	r3, sp, #128	; 0x80
  404d70:	441e      	add	r6, r3
  404d72:	9b05      	ldr	r3, [sp, #20]
  404d74:	aa48      	add	r2, sp, #288	; 0x120
  404d76:	f04f 0900 	mov.w	r9, #0
  404d7a:	eb02 0883 	add.w	r8, r2, r3, lsl #2
  404d7e:	af47      	add	r7, sp, #284	; 0x11c
  404d80:	9b01      	ldr	r3, [sp, #4]
  404d82:	2b00      	cmp	r3, #0
  404d84:	f2c0 82b9 	blt.w	4052fa <__kernel_rem_pio2f+0x60a>
  404d88:	9b02      	ldr	r3, [sp, #8]
  404d8a:	46b3      	mov	fp, r6
  404d8c:	1f1c      	subs	r4, r3, #4
  404d8e:	46ca      	mov	sl, r9
  404d90:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
  404d94:	f854 0f04 	ldr.w	r0, [r4, #4]!
  404d98:	f001 fb32 	bl	406400 <__aeabi_fmul>
  404d9c:	4601      	mov	r1, r0
  404d9e:	4650      	mov	r0, sl
  404da0:	f001 fa26 	bl	4061f0 <__addsf3>
  404da4:	42ac      	cmp	r4, r5
  404da6:	4682      	mov	sl, r0
  404da8:	d1f2      	bne.n	404d90 <__kernel_rem_pio2f+0xa0>
  404daa:	f847 af04 	str.w	sl, [r7, #4]!
  404dae:	4547      	cmp	r7, r8
  404db0:	f106 0604 	add.w	r6, r6, #4
  404db4:	d1e4      	bne.n	404d80 <__kernel_rem_pio2f+0x90>
  404db6:	9805      	ldr	r0, [sp, #20]
  404db8:	9908      	ldr	r1, [sp, #32]
  404dba:	9c02      	ldr	r4, [sp, #8]
  404dbc:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
  404dc0:	4603      	mov	r3, r0
  404dc2:	4413      	add	r3, r2
  404dc4:	009b      	lsls	r3, r3, #2
  404dc6:	440a      	add	r2, r1
  404dc8:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
  404dcc:	1f19      	subs	r1, r3, #4
  404dce:	eb04 0582 	add.w	r5, r4, r2, lsl #2
  404dd2:	4453      	add	r3, sl
  404dd4:	eb0a 0201 	add.w	r2, sl, r1
  404dd8:	920a      	str	r2, [sp, #40]	; 0x28
  404dda:	930b      	str	r3, [sp, #44]	; 0x2c
  404ddc:	4680      	mov	r8, r0
  404dde:	ea4f 0388 	mov.w	r3, r8, lsl #2
  404de2:	aa5c      	add	r2, sp, #368	; 0x170
  404de4:	9303      	str	r3, [sp, #12]
  404de6:	18d3      	adds	r3, r2, r3
  404de8:	f1b8 0f00 	cmp.w	r8, #0
  404dec:	f853 9c50 	ldr.w	r9, [r3, #-80]
  404df0:	dd22      	ble.n	404e38 <__kernel_rem_pio2f+0x148>
  404df2:	eb02 0488 	add.w	r4, r2, r8, lsl #2
  404df6:	3c54      	subs	r4, #84	; 0x54
  404df8:	ae0b      	add	r6, sp, #44	; 0x2c
  404dfa:	af47      	add	r7, sp, #284	; 0x11c
  404dfc:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
  404e00:	4648      	mov	r0, r9
  404e02:	f001 fafd 	bl	406400 <__aeabi_fmul>
  404e06:	f001 fcd7 	bl	4067b8 <__aeabi_f2iz>
  404e0a:	f001 faa5 	bl	406358 <__aeabi_i2f>
  404e0e:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
  404e12:	4683      	mov	fp, r0
  404e14:	f001 faf4 	bl	406400 <__aeabi_fmul>
  404e18:	4601      	mov	r1, r0
  404e1a:	4648      	mov	r0, r9
  404e1c:	f001 f9e6 	bl	4061ec <__aeabi_fsub>
  404e20:	f001 fcca 	bl	4067b8 <__aeabi_f2iz>
  404e24:	f854 1904 	ldr.w	r1, [r4], #-4
  404e28:	f846 0f04 	str.w	r0, [r6, #4]!
  404e2c:	4658      	mov	r0, fp
  404e2e:	f001 f9df 	bl	4061f0 <__addsf3>
  404e32:	42bc      	cmp	r4, r7
  404e34:	4681      	mov	r9, r0
  404e36:	d1e1      	bne.n	404dfc <__kernel_rem_pio2f+0x10c>
  404e38:	9e04      	ldr	r6, [sp, #16]
  404e3a:	4648      	mov	r0, r9
  404e3c:	4631      	mov	r1, r6
  404e3e:	f000 fcbb 	bl	4057b8 <scalbnf>
  404e42:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
  404e46:	4604      	mov	r4, r0
  404e48:	f001 fada 	bl	406400 <__aeabi_fmul>
  404e4c:	f000 fc6e 	bl	40572c <floorf>
  404e50:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
  404e54:	f001 fad4 	bl	406400 <__aeabi_fmul>
  404e58:	4601      	mov	r1, r0
  404e5a:	4620      	mov	r0, r4
  404e5c:	f001 f9c6 	bl	4061ec <__aeabi_fsub>
  404e60:	4604      	mov	r4, r0
  404e62:	f001 fca9 	bl	4067b8 <__aeabi_f2iz>
  404e66:	4681      	mov	r9, r0
  404e68:	9006      	str	r0, [sp, #24]
  404e6a:	f001 fa75 	bl	406358 <__aeabi_i2f>
  404e6e:	4601      	mov	r1, r0
  404e70:	4620      	mov	r0, r4
  404e72:	f001 f9bb 	bl	4061ec <__aeabi_fsub>
  404e76:	2e00      	cmp	r6, #0
  404e78:	4607      	mov	r7, r0
  404e7a:	f340 80e6 	ble.w	40504a <__kernel_rem_pio2f+0x35a>
  404e7e:	f108 31ff 	add.w	r1, r8, #4294967295
  404e82:	f1c6 0308 	rsb	r3, r6, #8
  404e86:	f85a 2021 	ldr.w	r2, [sl, r1, lsl #2]
  404e8a:	fa42 f003 	asr.w	r0, r2, r3
  404e8e:	fa00 f303 	lsl.w	r3, r0, r3
  404e92:	1ad3      	subs	r3, r2, r3
  404e94:	464a      	mov	r2, r9
  404e96:	f1c6 0407 	rsb	r4, r6, #7
  404e9a:	4402      	add	r2, r0
  404e9c:	f84a 3021 	str.w	r3, [sl, r1, lsl #2]
  404ea0:	9206      	str	r2, [sp, #24]
  404ea2:	fa43 f404 	asr.w	r4, r3, r4
  404ea6:	2c00      	cmp	r4, #0
  404ea8:	dd5b      	ble.n	404f62 <__kernel_rem_pio2f+0x272>
  404eaa:	9b06      	ldr	r3, [sp, #24]
  404eac:	f1b8 0f00 	cmp.w	r8, #0
  404eb0:	f103 0301 	add.w	r3, r3, #1
  404eb4:	9306      	str	r3, [sp, #24]
  404eb6:	f340 823b 	ble.w	405330 <__kernel_rem_pio2f+0x640>
  404eba:	f8da 6000 	ldr.w	r6, [sl]
  404ebe:	2e00      	cmp	r6, #0
  404ec0:	f040 8294 	bne.w	4053ec <__kernel_rem_pio2f+0x6fc>
  404ec4:	f1b8 0f01 	cmp.w	r8, #1
  404ec8:	f340 8255 	ble.w	405376 <__kernel_rem_pio2f+0x686>
  404ecc:	4652      	mov	r2, sl
  404ece:	2301      	movs	r3, #1
  404ed0:	f852 6f04 	ldr.w	r6, [r2, #4]!
  404ed4:	2e00      	cmp	r6, #0
  404ed6:	f000 824a 	beq.w	40536e <__kernel_rem_pio2f+0x67e>
  404eda:	1c59      	adds	r1, r3, #1
  404edc:	f5c6 7680 	rsb	r6, r6, #256	; 0x100
  404ee0:	4588      	cmp	r8, r1
  404ee2:	f84a 6023 	str.w	r6, [sl, r3, lsl #2]
  404ee6:	dd14      	ble.n	404f12 <__kernel_rem_pio2f+0x222>
  404ee8:	f85a 2021 	ldr.w	r2, [sl, r1, lsl #2]
  404eec:	3302      	adds	r3, #2
  404eee:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
  404ef2:	4598      	cmp	r8, r3
  404ef4:	f84a 2021 	str.w	r2, [sl, r1, lsl #2]
  404ef8:	dd0b      	ble.n	404f12 <__kernel_rem_pio2f+0x222>
  404efa:	9a03      	ldr	r2, [sp, #12]
  404efc:	4452      	add	r2, sl
  404efe:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
  404f02:	4691      	mov	r9, r2
  404f04:	681a      	ldr	r2, [r3, #0]
  404f06:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
  404f0a:	f843 2b04 	str.w	r2, [r3], #4
  404f0e:	454b      	cmp	r3, r9
  404f10:	d1f8      	bne.n	404f04 <__kernel_rem_pio2f+0x214>
  404f12:	9b04      	ldr	r3, [sp, #16]
  404f14:	2b00      	cmp	r3, #0
  404f16:	dd11      	ble.n	404f3c <__kernel_rem_pio2f+0x24c>
  404f18:	9b04      	ldr	r3, [sp, #16]
  404f1a:	2b01      	cmp	r3, #1
  404f1c:	f04f 0601 	mov.w	r6, #1
  404f20:	f040 820e 	bne.w	405340 <__kernel_rem_pio2f+0x650>
  404f24:	f108 32ff 	add.w	r2, r8, #4294967295
  404f28:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
  404f2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  404f30:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
  404f34:	e20e      	b.n	405354 <__kernel_rem_pio2f+0x664>
  404f36:	bf00      	nop
  404f38:	0040bd10 	.word	0x0040bd10
  404f3c:	2c02      	cmp	r4, #2
  404f3e:	d110      	bne.n	404f62 <__kernel_rem_pio2f+0x272>
  404f40:	4639      	mov	r1, r7
  404f42:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  404f46:	f001 f951 	bl	4061ec <__aeabi_fsub>
  404f4a:	4607      	mov	r7, r0
  404f4c:	9904      	ldr	r1, [sp, #16]
  404f4e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  404f52:	f000 fc31 	bl	4057b8 <scalbnf>
  404f56:	4601      	mov	r1, r0
  404f58:	4638      	mov	r0, r7
  404f5a:	f001 f947 	bl	4061ec <__aeabi_fsub>
  404f5e:	2402      	movs	r4, #2
  404f60:	4607      	mov	r7, r0
  404f62:	2100      	movs	r1, #0
  404f64:	4638      	mov	r0, r7
  404f66:	f001 fbdf 	bl	406728 <__aeabi_fcmpeq>
  404f6a:	2800      	cmp	r0, #0
  404f6c:	f000 8083 	beq.w	405076 <__kernel_rem_pio2f+0x386>
  404f70:	9b05      	ldr	r3, [sp, #20]
  404f72:	f108 37ff 	add.w	r7, r8, #4294967295
  404f76:	42bb      	cmp	r3, r7
  404f78:	dc0f      	bgt.n	404f9a <__kernel_rem_pio2f+0x2aa>
  404f7a:	f108 4380 	add.w	r3, r8, #1073741824	; 0x40000000
  404f7e:	3b01      	subs	r3, #1
  404f80:	980b      	ldr	r0, [sp, #44]	; 0x2c
  404f82:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
  404f86:	2200      	movs	r2, #0
  404f88:	f853 1904 	ldr.w	r1, [r3], #-4
  404f8c:	4283      	cmp	r3, r0
  404f8e:	ea42 0201 	orr.w	r2, r2, r1
  404f92:	d1f9      	bne.n	404f88 <__kernel_rem_pio2f+0x298>
  404f94:	2a00      	cmp	r2, #0
  404f96:	f040 809d 	bne.w	4050d4 <__kernel_rem_pio2f+0x3e4>
  404f9a:	9b05      	ldr	r3, [sp, #20]
  404f9c:	3b01      	subs	r3, #1
  404f9e:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
  404fa2:	2b00      	cmp	r3, #0
  404fa4:	f040 81f4 	bne.w	405390 <__kernel_rem_pio2f+0x6a0>
  404fa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404faa:	2301      	movs	r3, #1
  404fac:	f852 1904 	ldr.w	r1, [r2], #-4
  404fb0:	3301      	adds	r3, #1
  404fb2:	2900      	cmp	r1, #0
  404fb4:	d0fa      	beq.n	404fac <__kernel_rem_pio2f+0x2bc>
  404fb6:	4443      	add	r3, r8
  404fb8:	461a      	mov	r2, r3
  404fba:	9306      	str	r3, [sp, #24]
  404fbc:	f108 0301 	add.w	r3, r8, #1
  404fc0:	4293      	cmp	r3, r2
  404fc2:	dc37      	bgt.n	405034 <__kernel_rem_pio2f+0x344>
  404fc4:	9908      	ldr	r1, [sp, #32]
  404fc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404fc8:	eb01 0708 	add.w	r7, r1, r8
  404fcc:	a920      	add	r1, sp, #128	; 0x80
  404fce:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  404fd2:	9906      	ldr	r1, [sp, #24]
  404fd4:	189e      	adds	r6, r3, r2
  404fd6:	eb01 0902 	add.w	r9, r1, r2
  404fda:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
  404fde:	9a67      	ldr	r2, [sp, #412]	; 0x19c
  404fe0:	3e01      	subs	r6, #1
  404fe2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
  404fe6:	aa48      	add	r2, sp, #288	; 0x120
  404fe8:	eb02 0883 	add.w	r8, r2, r3, lsl #2
  404fec:	9b67      	ldr	r3, [sp, #412]	; 0x19c
  404fee:	eb03 0389 	add.w	r3, r3, r9, lsl #2
  404ff2:	9303      	str	r3, [sp, #12]
  404ff4:	f856 0f04 	ldr.w	r0, [r6, #4]!
  404ff8:	f001 f9ae 	bl	406358 <__aeabi_i2f>
  404ffc:	9b01      	ldr	r3, [sp, #4]
  404ffe:	f847 0b04 	str.w	r0, [r7], #4
  405002:	2b00      	cmp	r3, #0
  405004:	db19      	blt.n	40503a <__kernel_rem_pio2f+0x34a>
  405006:	9b02      	ldr	r3, [sp, #8]
  405008:	46bb      	mov	fp, r7
  40500a:	1f1c      	subs	r4, r3, #4
  40500c:	f04f 0900 	mov.w	r9, #0
  405010:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
  405014:	f854 0f04 	ldr.w	r0, [r4, #4]!
  405018:	f001 f9f2 	bl	406400 <__aeabi_fmul>
  40501c:	4601      	mov	r1, r0
  40501e:	4648      	mov	r0, r9
  405020:	f001 f8e6 	bl	4061f0 <__addsf3>
  405024:	42ac      	cmp	r4, r5
  405026:	4681      	mov	r9, r0
  405028:	d1f2      	bne.n	405010 <__kernel_rem_pio2f+0x320>
  40502a:	9b03      	ldr	r3, [sp, #12]
  40502c:	f848 9b04 	str.w	r9, [r8], #4
  405030:	429e      	cmp	r6, r3
  405032:	d1df      	bne.n	404ff4 <__kernel_rem_pio2f+0x304>
  405034:	f8dd 8018 	ldr.w	r8, [sp, #24]
  405038:	e6d1      	b.n	404dde <__kernel_rem_pio2f+0xee>
  40503a:	9b03      	ldr	r3, [sp, #12]
  40503c:	f04f 0900 	mov.w	r9, #0
  405040:	429e      	cmp	r6, r3
  405042:	f848 9b04 	str.w	r9, [r8], #4
  405046:	d1d5      	bne.n	404ff4 <__kernel_rem_pio2f+0x304>
  405048:	e7f4      	b.n	405034 <__kernel_rem_pio2f+0x344>
  40504a:	d105      	bne.n	405058 <__kernel_rem_pio2f+0x368>
  40504c:	f108 33ff 	add.w	r3, r8, #4294967295
  405050:	f85a 4023 	ldr.w	r4, [sl, r3, lsl #2]
  405054:	1224      	asrs	r4, r4, #8
  405056:	e726      	b.n	404ea6 <__kernel_rem_pio2f+0x1b6>
  405058:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  40505c:	f001 fb82 	bl	406764 <__aeabi_fcmpge>
  405060:	2800      	cmp	r0, #0
  405062:	f040 8153 	bne.w	40530c <__kernel_rem_pio2f+0x61c>
  405066:	4604      	mov	r4, r0
  405068:	2100      	movs	r1, #0
  40506a:	4638      	mov	r0, r7
  40506c:	f001 fb5c 	bl	406728 <__aeabi_fcmpeq>
  405070:	2800      	cmp	r0, #0
  405072:	f47f af7d 	bne.w	404f70 <__kernel_rem_pio2f+0x280>
  405076:	9e04      	ldr	r6, [sp, #16]
  405078:	4638      	mov	r0, r7
  40507a:	4271      	negs	r1, r6
  40507c:	f000 fb9c 	bl	4057b8 <scalbnf>
  405080:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
  405084:	46a1      	mov	r9, r4
  405086:	4604      	mov	r4, r0
  405088:	f001 fb6c 	bl	406764 <__aeabi_fcmpge>
  40508c:	2800      	cmp	r0, #0
  40508e:	f000 818d 	beq.w	4053ac <__kernel_rem_pio2f+0x6bc>
  405092:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
  405096:	4620      	mov	r0, r4
  405098:	f001 f9b2 	bl	406400 <__aeabi_fmul>
  40509c:	f001 fb8c 	bl	4067b8 <__aeabi_f2iz>
  4050a0:	f001 f95a 	bl	406358 <__aeabi_i2f>
  4050a4:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
  4050a8:	4605      	mov	r5, r0
  4050aa:	f001 f9a9 	bl	406400 <__aeabi_fmul>
  4050ae:	4601      	mov	r1, r0
  4050b0:	4620      	mov	r0, r4
  4050b2:	f001 f89b 	bl	4061ec <__aeabi_fsub>
  4050b6:	f001 fb7f 	bl	4067b8 <__aeabi_f2iz>
  4050ba:	f84a 0028 	str.w	r0, [sl, r8, lsl #2]
  4050be:	4628      	mov	r0, r5
  4050c0:	f001 fb7a 	bl	4067b8 <__aeabi_f2iz>
  4050c4:	f108 0701 	add.w	r7, r8, #1
  4050c8:	4633      	mov	r3, r6
  4050ca:	3308      	adds	r3, #8
  4050cc:	9304      	str	r3, [sp, #16]
  4050ce:	f84a 0027 	str.w	r0, [sl, r7, lsl #2]
  4050d2:	e012      	b.n	4050fa <__kernel_rem_pio2f+0x40a>
  4050d4:	9a04      	ldr	r2, [sp, #16]
  4050d6:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
  4050da:	3a08      	subs	r2, #8
  4050dc:	46a1      	mov	r9, r4
  4050de:	9204      	str	r2, [sp, #16]
  4050e0:	b95b      	cbnz	r3, 4050fa <__kernel_rem_pio2f+0x40a>
  4050e2:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
  4050e6:	3b01      	subs	r3, #1
  4050e8:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
  4050ec:	f853 1904 	ldr.w	r1, [r3], #-4
  4050f0:	3f01      	subs	r7, #1
  4050f2:	3a08      	subs	r2, #8
  4050f4:	2900      	cmp	r1, #0
  4050f6:	d0f9      	beq.n	4050ec <__kernel_rem_pio2f+0x3fc>
  4050f8:	9204      	str	r2, [sp, #16]
  4050fa:	9904      	ldr	r1, [sp, #16]
  4050fc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  405100:	f000 fb5a 	bl	4057b8 <scalbnf>
  405104:	2f00      	cmp	r7, #0
  405106:	4604      	mov	r4, r0
  405108:	f2c0 815c 	blt.w	4053c4 <__kernel_rem_pio2f+0x6d4>
  40510c:	00bb      	lsls	r3, r7, #2
  40510e:	a948      	add	r1, sp, #288	; 0x120
  405110:	1d1a      	adds	r2, r3, #4
  405112:	eb01 0803 	add.w	r8, r1, r3
  405116:	9301      	str	r3, [sp, #4]
  405118:	9202      	str	r2, [sp, #8]
  40511a:	f04f 566e 	mov.w	r6, #998244352	; 0x3b800000
  40511e:	eb0a 0b02 	add.w	fp, sl, r2
  405122:	f108 0504 	add.w	r5, r8, #4
  405126:	f85b 0d04 	ldr.w	r0, [fp, #-4]!
  40512a:	f001 f915 	bl	406358 <__aeabi_i2f>
  40512e:	4621      	mov	r1, r4
  405130:	f001 f966 	bl	406400 <__aeabi_fmul>
  405134:	4631      	mov	r1, r6
  405136:	f845 0d04 	str.w	r0, [r5, #-4]!
  40513a:	4620      	mov	r0, r4
  40513c:	f001 f960 	bl	406400 <__aeabi_fmul>
  405140:	45d3      	cmp	fp, sl
  405142:	4604      	mov	r4, r0
  405144:	d1ef      	bne.n	405126 <__kernel_rem_pio2f+0x436>
  405146:	2600      	movs	r6, #0
  405148:	f8dd b014 	ldr.w	fp, [sp, #20]
  40514c:	9703      	str	r7, [sp, #12]
  40514e:	f1a8 0804 	sub.w	r8, r8, #4
  405152:	46b2      	mov	sl, r6
  405154:	f1bb 0f00 	cmp.w	fp, #0
  405158:	bfb8      	it	lt
  40515a:	2500      	movlt	r5, #0
  40515c:	db15      	blt.n	40518a <__kernel_rem_pio2f+0x49a>
  40515e:	4ea5      	ldr	r6, [pc, #660]	; (4053f4 <__kernel_rem_pio2f+0x704>)
  405160:	48a5      	ldr	r0, [pc, #660]	; (4053f8 <__kernel_rem_pio2f+0x708>)
  405162:	4647      	mov	r7, r8
  405164:	2500      	movs	r5, #0
  405166:	2400      	movs	r4, #0
  405168:	e003      	b.n	405172 <__kernel_rem_pio2f+0x482>
  40516a:	4554      	cmp	r4, sl
  40516c:	dc0d      	bgt.n	40518a <__kernel_rem_pio2f+0x49a>
  40516e:	f856 0f04 	ldr.w	r0, [r6, #4]!
  405172:	f857 1f04 	ldr.w	r1, [r7, #4]!
  405176:	f001 f943 	bl	406400 <__aeabi_fmul>
  40517a:	4601      	mov	r1, r0
  40517c:	4628      	mov	r0, r5
  40517e:	f001 f837 	bl	4061f0 <__addsf3>
  405182:	3401      	adds	r4, #1
  405184:	45a3      	cmp	fp, r4
  405186:	4605      	mov	r5, r0
  405188:	daef      	bge.n	40516a <__kernel_rem_pio2f+0x47a>
  40518a:	ab5c      	add	r3, sp, #368	; 0x170
  40518c:	eb03 038a 	add.w	r3, r3, sl, lsl #2
  405190:	f1a8 0804 	sub.w	r8, r8, #4
  405194:	f843 5ca0 	str.w	r5, [r3, #-160]
  405198:	ab46      	add	r3, sp, #280	; 0x118
  40519a:	4543      	cmp	r3, r8
  40519c:	f10a 0a01 	add.w	sl, sl, #1
  4051a0:	d1d8      	bne.n	405154 <__kernel_rem_pio2f+0x464>
  4051a2:	9b66      	ldr	r3, [sp, #408]	; 0x198
  4051a4:	9f03      	ldr	r7, [sp, #12]
  4051a6:	2b03      	cmp	r3, #3
  4051a8:	d85a      	bhi.n	405260 <__kernel_rem_pio2f+0x570>
  4051aa:	e8df f003 	tbb	[pc, r3]
  4051ae:	5f8e      	.short	0x5f8e
  4051b0:	025f      	.short	0x025f
  4051b2:	2f00      	cmp	r7, #0
  4051b4:	f340 8104 	ble.w	4053c0 <__kernel_rem_pio2f+0x6d0>
  4051b8:	9a01      	ldr	r2, [sp, #4]
  4051ba:	a95c      	add	r1, sp, #368	; 0x170
  4051bc:	188b      	adds	r3, r1, r2
  4051be:	ac34      	add	r4, sp, #208	; 0xd0
  4051c0:	f853 6ca0 	ldr.w	r6, [r3, #-160]
  4051c4:	18a5      	adds	r5, r4, r2
  4051c6:	f855 ac04 	ldr.w	sl, [r5, #-4]
  4051ca:	4631      	mov	r1, r6
  4051cc:	4650      	mov	r0, sl
  4051ce:	f001 f80f 	bl	4061f0 <__addsf3>
  4051d2:	4680      	mov	r8, r0
  4051d4:	4601      	mov	r1, r0
  4051d6:	4650      	mov	r0, sl
  4051d8:	f001 f808 	bl	4061ec <__aeabi_fsub>
  4051dc:	4631      	mov	r1, r6
  4051de:	f001 f807 	bl	4061f0 <__addsf3>
  4051e2:	6028      	str	r0, [r5, #0]
  4051e4:	f845 8d04 	str.w	r8, [r5, #-4]!
  4051e8:	42ac      	cmp	r4, r5
  4051ea:	4646      	mov	r6, r8
  4051ec:	d1eb      	bne.n	4051c6 <__kernel_rem_pio2f+0x4d6>
  4051ee:	2f01      	cmp	r7, #1
  4051f0:	f340 80e6 	ble.w	4053c0 <__kernel_rem_pio2f+0x6d0>
  4051f4:	9a01      	ldr	r2, [sp, #4]
  4051f6:	a95c      	add	r1, sp, #368	; 0x170
  4051f8:	188b      	adds	r3, r1, r2
  4051fa:	4414      	add	r4, r2
  4051fc:	f853 6ca0 	ldr.w	r6, [r3, #-160]
  405200:	4625      	mov	r5, r4
  405202:	f10d 0ad4 	add.w	sl, sp, #212	; 0xd4
  405206:	f855 8c04 	ldr.w	r8, [r5, #-4]
  40520a:	4631      	mov	r1, r6
  40520c:	4640      	mov	r0, r8
  40520e:	f000 ffef 	bl	4061f0 <__addsf3>
  405212:	4607      	mov	r7, r0
  405214:	4601      	mov	r1, r0
  405216:	4640      	mov	r0, r8
  405218:	f000 ffe8 	bl	4061ec <__aeabi_fsub>
  40521c:	4631      	mov	r1, r6
  40521e:	f000 ffe7 	bl	4061f0 <__addsf3>
  405222:	6028      	str	r0, [r5, #0]
  405224:	f845 7d04 	str.w	r7, [r5, #-4]!
  405228:	45aa      	cmp	sl, r5
  40522a:	463e      	mov	r6, r7
  40522c:	d1eb      	bne.n	405206 <__kernel_rem_pio2f+0x516>
  40522e:	2000      	movs	r0, #0
  405230:	3404      	adds	r4, #4
  405232:	ad36      	add	r5, sp, #216	; 0xd8
  405234:	f854 1d04 	ldr.w	r1, [r4, #-4]!
  405238:	f000 ffda 	bl	4061f0 <__addsf3>
  40523c:	42a5      	cmp	r5, r4
  40523e:	d1f9      	bne.n	405234 <__kernel_rem_pio2f+0x544>
  405240:	f1b9 0f00 	cmp.w	r9, #0
  405244:	f000 80b9 	beq.w	4053ba <__kernel_rem_pio2f+0x6ca>
  405248:	9a34      	ldr	r2, [sp, #208]	; 0xd0
  40524a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
  40524c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  405250:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  405254:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  405258:	9c07      	ldr	r4, [sp, #28]
  40525a:	60a0      	str	r0, [r4, #8]
  40525c:	6022      	str	r2, [r4, #0]
  40525e:	6063      	str	r3, [r4, #4]
  405260:	9b06      	ldr	r3, [sp, #24]
  405262:	f003 0007 	and.w	r0, r3, #7
  405266:	b05d      	add	sp, #372	; 0x174
  405268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40526c:	9c01      	ldr	r4, [sp, #4]
  40526e:	ad34      	add	r5, sp, #208	; 0xd0
  405270:	3404      	adds	r4, #4
  405272:	442c      	add	r4, r5
  405274:	2000      	movs	r0, #0
  405276:	f854 1d04 	ldr.w	r1, [r4, #-4]!
  40527a:	f000 ffb9 	bl	4061f0 <__addsf3>
  40527e:	42ac      	cmp	r4, r5
  405280:	d1f9      	bne.n	405276 <__kernel_rem_pio2f+0x586>
  405282:	f1b9 0f00 	cmp.w	r9, #0
  405286:	f000 8085 	beq.w	405394 <__kernel_rem_pio2f+0x6a4>
  40528a:	9a07      	ldr	r2, [sp, #28]
  40528c:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
  405290:	4601      	mov	r1, r0
  405292:	6013      	str	r3, [r2, #0]
  405294:	9834      	ldr	r0, [sp, #208]	; 0xd0
  405296:	f000 ffa9 	bl	4061ec <__aeabi_fsub>
  40529a:	2f00      	cmp	r7, #0
  40529c:	dd0b      	ble.n	4052b6 <__kernel_rem_pio2f+0x5c6>
  40529e:	ad34      	add	r5, sp, #208	; 0xd0
  4052a0:	2401      	movs	r4, #1
  4052a2:	3401      	adds	r4, #1
  4052a4:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4052a8:	f000 ffa2 	bl	4061f0 <__addsf3>
  4052ac:	42a7      	cmp	r7, r4
  4052ae:	daf8      	bge.n	4052a2 <__kernel_rem_pio2f+0x5b2>
  4052b0:	f1b9 0f00 	cmp.w	r9, #0
  4052b4:	d001      	beq.n	4052ba <__kernel_rem_pio2f+0x5ca>
  4052b6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  4052ba:	9b07      	ldr	r3, [sp, #28]
  4052bc:	6058      	str	r0, [r3, #4]
  4052be:	9b06      	ldr	r3, [sp, #24]
  4052c0:	f003 0007 	and.w	r0, r3, #7
  4052c4:	b05d      	add	sp, #372	; 0x174
  4052c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4052ca:	9b02      	ldr	r3, [sp, #8]
  4052cc:	ad34      	add	r5, sp, #208	; 0xd0
  4052ce:	442b      	add	r3, r5
  4052d0:	2000      	movs	r0, #0
  4052d2:	461c      	mov	r4, r3
  4052d4:	f854 1d04 	ldr.w	r1, [r4, #-4]!
  4052d8:	f000 ff8a 	bl	4061f0 <__addsf3>
  4052dc:	42a5      	cmp	r5, r4
  4052de:	d1f9      	bne.n	4052d4 <__kernel_rem_pio2f+0x5e4>
  4052e0:	f1b9 0f00 	cmp.w	r9, #0
  4052e4:	d001      	beq.n	4052ea <__kernel_rem_pio2f+0x5fa>
  4052e6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  4052ea:	9b07      	ldr	r3, [sp, #28]
  4052ec:	6018      	str	r0, [r3, #0]
  4052ee:	9b06      	ldr	r3, [sp, #24]
  4052f0:	f003 0007 	and.w	r0, r3, #7
  4052f4:	b05d      	add	sp, #372	; 0x174
  4052f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4052fa:	46ca      	mov	sl, r9
  4052fc:	f847 af04 	str.w	sl, [r7, #4]!
  405300:	4547      	cmp	r7, r8
  405302:	f106 0604 	add.w	r6, r6, #4
  405306:	f47f ad3b 	bne.w	404d80 <__kernel_rem_pio2f+0x90>
  40530a:	e554      	b.n	404db6 <__kernel_rem_pio2f+0xc6>
  40530c:	9b06      	ldr	r3, [sp, #24]
  40530e:	f1b8 0f00 	cmp.w	r8, #0
  405312:	f103 0301 	add.w	r3, r3, #1
  405316:	9306      	str	r3, [sp, #24]
  405318:	bfc8      	it	gt
  40531a:	2402      	movgt	r4, #2
  40531c:	f73f adcd 	bgt.w	404eba <__kernel_rem_pio2f+0x1ca>
  405320:	4639      	mov	r1, r7
  405322:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  405326:	f000 ff61 	bl	4061ec <__aeabi_fsub>
  40532a:	2402      	movs	r4, #2
  40532c:	4607      	mov	r7, r0
  40532e:	e618      	b.n	404f62 <__kernel_rem_pio2f+0x272>
  405330:	9b04      	ldr	r3, [sp, #16]
  405332:	2b00      	cmp	r3, #0
  405334:	dd22      	ble.n	40537c <__kernel_rem_pio2f+0x68c>
  405336:	2600      	movs	r6, #0
  405338:	9b04      	ldr	r3, [sp, #16]
  40533a:	2b01      	cmp	r3, #1
  40533c:	f43f adf2 	beq.w	404f24 <__kernel_rem_pio2f+0x234>
  405340:	2b02      	cmp	r3, #2
  405342:	d107      	bne.n	405354 <__kernel_rem_pio2f+0x664>
  405344:	f108 32ff 	add.w	r2, r8, #4294967295
  405348:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
  40534c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  405350:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
  405354:	2c02      	cmp	r4, #2
  405356:	f47f ae04 	bne.w	404f62 <__kernel_rem_pio2f+0x272>
  40535a:	4639      	mov	r1, r7
  40535c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  405360:	f000 ff44 	bl	4061ec <__aeabi_fsub>
  405364:	4607      	mov	r7, r0
  405366:	2e00      	cmp	r6, #0
  405368:	f43f adfb 	beq.w	404f62 <__kernel_rem_pio2f+0x272>
  40536c:	e5ee      	b.n	404f4c <__kernel_rem_pio2f+0x25c>
  40536e:	3301      	adds	r3, #1
  405370:	4598      	cmp	r8, r3
  405372:	f47f adad 	bne.w	404ed0 <__kernel_rem_pio2f+0x1e0>
  405376:	9b04      	ldr	r3, [sp, #16]
  405378:	2b00      	cmp	r3, #0
  40537a:	dcdd      	bgt.n	405338 <__kernel_rem_pio2f+0x648>
  40537c:	2c02      	cmp	r4, #2
  40537e:	f47f adf0 	bne.w	404f62 <__kernel_rem_pio2f+0x272>
  405382:	4639      	mov	r1, r7
  405384:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  405388:	f000 ff30 	bl	4061ec <__aeabi_fsub>
  40538c:	4607      	mov	r7, r0
  40538e:	e5e8      	b.n	404f62 <__kernel_rem_pio2f+0x272>
  405390:	2301      	movs	r3, #1
  405392:	e610      	b.n	404fb6 <__kernel_rem_pio2f+0x2c6>
  405394:	9b07      	ldr	r3, [sp, #28]
  405396:	4601      	mov	r1, r0
  405398:	6018      	str	r0, [r3, #0]
  40539a:	9834      	ldr	r0, [sp, #208]	; 0xd0
  40539c:	f000 ff26 	bl	4061ec <__aeabi_fsub>
  4053a0:	2f00      	cmp	r7, #0
  4053a2:	f73f af7c 	bgt.w	40529e <__kernel_rem_pio2f+0x5ae>
  4053a6:	9b07      	ldr	r3, [sp, #28]
  4053a8:	6058      	str	r0, [r3, #4]
  4053aa:	e788      	b.n	4052be <__kernel_rem_pio2f+0x5ce>
  4053ac:	4620      	mov	r0, r4
  4053ae:	f001 fa03 	bl	4067b8 <__aeabi_f2iz>
  4053b2:	4647      	mov	r7, r8
  4053b4:	f84a 0028 	str.w	r0, [sl, r8, lsl #2]
  4053b8:	e69f      	b.n	4050fa <__kernel_rem_pio2f+0x40a>
  4053ba:	9a34      	ldr	r2, [sp, #208]	; 0xd0
  4053bc:	9b35      	ldr	r3, [sp, #212]	; 0xd4
  4053be:	e74b      	b.n	405258 <__kernel_rem_pio2f+0x568>
  4053c0:	2000      	movs	r0, #0
  4053c2:	e73d      	b.n	405240 <__kernel_rem_pio2f+0x550>
  4053c4:	9b66      	ldr	r3, [sp, #408]	; 0x198
  4053c6:	2b03      	cmp	r3, #3
  4053c8:	f63f af4a 	bhi.w	405260 <__kernel_rem_pio2f+0x570>
  4053cc:	a201      	add	r2, pc, #4	; (adr r2, 4053d4 <__kernel_rem_pio2f+0x6e4>)
  4053ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4053d2:	bf00      	nop
  4053d4:	004053e9 	.word	0x004053e9
  4053d8:	004053e5 	.word	0x004053e5
  4053dc:	004053e5 	.word	0x004053e5
  4053e0:	004053c1 	.word	0x004053c1
  4053e4:	2000      	movs	r0, #0
  4053e6:	e74c      	b.n	405282 <__kernel_rem_pio2f+0x592>
  4053e8:	2000      	movs	r0, #0
  4053ea:	e779      	b.n	4052e0 <__kernel_rem_pio2f+0x5f0>
  4053ec:	2101      	movs	r1, #1
  4053ee:	2300      	movs	r3, #0
  4053f0:	e574      	b.n	404edc <__kernel_rem_pio2f+0x1ec>
  4053f2:	bf00      	nop
  4053f4:	0040bce4 	.word	0x0040bce4
  4053f8:	3fc90000 	.word	0x3fc90000

004053fc <__kernel_sinf>:
  4053fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405400:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
  405404:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
  405408:	4604      	mov	r4, r0
  40540a:	460f      	mov	r7, r1
  40540c:	4690      	mov	r8, r2
  40540e:	da03      	bge.n	405418 <__kernel_sinf+0x1c>
  405410:	f001 f9d2 	bl	4067b8 <__aeabi_f2iz>
  405414:	2800      	cmp	r0, #0
  405416:	d058      	beq.n	4054ca <__kernel_sinf+0xce>
  405418:	4621      	mov	r1, r4
  40541a:	4620      	mov	r0, r4
  40541c:	f000 fff0 	bl	406400 <__aeabi_fmul>
  405420:	4605      	mov	r5, r0
  405422:	4601      	mov	r1, r0
  405424:	4620      	mov	r0, r4
  405426:	f000 ffeb 	bl	406400 <__aeabi_fmul>
  40542a:	4929      	ldr	r1, [pc, #164]	; (4054d0 <__kernel_sinf+0xd4>)
  40542c:	4606      	mov	r6, r0
  40542e:	4628      	mov	r0, r5
  405430:	f000 ffe6 	bl	406400 <__aeabi_fmul>
  405434:	4927      	ldr	r1, [pc, #156]	; (4054d4 <__kernel_sinf+0xd8>)
  405436:	f000 fed9 	bl	4061ec <__aeabi_fsub>
  40543a:	4629      	mov	r1, r5
  40543c:	f000 ffe0 	bl	406400 <__aeabi_fmul>
  405440:	4925      	ldr	r1, [pc, #148]	; (4054d8 <__kernel_sinf+0xdc>)
  405442:	f000 fed5 	bl	4061f0 <__addsf3>
  405446:	4629      	mov	r1, r5
  405448:	f000 ffda 	bl	406400 <__aeabi_fmul>
  40544c:	4923      	ldr	r1, [pc, #140]	; (4054dc <__kernel_sinf+0xe0>)
  40544e:	f000 fecd 	bl	4061ec <__aeabi_fsub>
  405452:	4629      	mov	r1, r5
  405454:	f000 ffd4 	bl	406400 <__aeabi_fmul>
  405458:	4921      	ldr	r1, [pc, #132]	; (4054e0 <__kernel_sinf+0xe4>)
  40545a:	f000 fec9 	bl	4061f0 <__addsf3>
  40545e:	4681      	mov	r9, r0
  405460:	f1b8 0f00 	cmp.w	r8, #0
  405464:	d022      	beq.n	4054ac <__kernel_sinf+0xb0>
  405466:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  40546a:	4638      	mov	r0, r7
  40546c:	f000 ffc8 	bl	406400 <__aeabi_fmul>
  405470:	4649      	mov	r1, r9
  405472:	4680      	mov	r8, r0
  405474:	4630      	mov	r0, r6
  405476:	f000 ffc3 	bl	406400 <__aeabi_fmul>
  40547a:	4601      	mov	r1, r0
  40547c:	4640      	mov	r0, r8
  40547e:	f000 feb5 	bl	4061ec <__aeabi_fsub>
  405482:	4629      	mov	r1, r5
  405484:	f000 ffbc 	bl	406400 <__aeabi_fmul>
  405488:	4639      	mov	r1, r7
  40548a:	f000 feaf 	bl	4061ec <__aeabi_fsub>
  40548e:	4915      	ldr	r1, [pc, #84]	; (4054e4 <__kernel_sinf+0xe8>)
  405490:	4605      	mov	r5, r0
  405492:	4630      	mov	r0, r6
  405494:	f000 ffb4 	bl	406400 <__aeabi_fmul>
  405498:	4601      	mov	r1, r0
  40549a:	4628      	mov	r0, r5
  40549c:	f000 fea8 	bl	4061f0 <__addsf3>
  4054a0:	4601      	mov	r1, r0
  4054a2:	4620      	mov	r0, r4
  4054a4:	f000 fea2 	bl	4061ec <__aeabi_fsub>
  4054a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4054ac:	4601      	mov	r1, r0
  4054ae:	4628      	mov	r0, r5
  4054b0:	f000 ffa6 	bl	406400 <__aeabi_fmul>
  4054b4:	490b      	ldr	r1, [pc, #44]	; (4054e4 <__kernel_sinf+0xe8>)
  4054b6:	f000 fe99 	bl	4061ec <__aeabi_fsub>
  4054ba:	4631      	mov	r1, r6
  4054bc:	f000 ffa0 	bl	406400 <__aeabi_fmul>
  4054c0:	4621      	mov	r1, r4
  4054c2:	f000 fe95 	bl	4061f0 <__addsf3>
  4054c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4054ca:	4620      	mov	r0, r4
  4054cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4054d0:	2f2ec9d3 	.word	0x2f2ec9d3
  4054d4:	32d72f34 	.word	0x32d72f34
  4054d8:	3638ef1b 	.word	0x3638ef1b
  4054dc:	39500d01 	.word	0x39500d01
  4054e0:	3c088889 	.word	0x3c088889
  4054e4:	3e2aaaab 	.word	0x3e2aaaab

004054e8 <matherr>:
  4054e8:	2000      	movs	r0, #0
  4054ea:	4770      	bx	lr

004054ec <nan>:
  4054ec:	2000      	movs	r0, #0
  4054ee:	4901      	ldr	r1, [pc, #4]	; (4054f4 <nan+0x8>)
  4054f0:	4770      	bx	lr
  4054f2:	bf00      	nop
  4054f4:	7ff80000 	.word	0x7ff80000

004054f8 <atanf>:
  4054f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4054fc:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
  405500:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
  405504:	4604      	mov	r4, r0
  405506:	4606      	mov	r6, r0
  405508:	db08      	blt.n	40551c <atanf+0x24>
  40550a:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
  40550e:	dc6f      	bgt.n	4055f0 <atanf+0xf8>
  405510:	2800      	cmp	r0, #0
  405512:	f340 80a0 	ble.w	405656 <atanf+0x15e>
  405516:	486f      	ldr	r0, [pc, #444]	; (4056d4 <atanf+0x1dc>)
  405518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40551c:	4b6e      	ldr	r3, [pc, #440]	; (4056d8 <atanf+0x1e0>)
  40551e:	429d      	cmp	r5, r3
  405520:	dc77      	bgt.n	405612 <atanf+0x11a>
  405522:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
  405526:	db68      	blt.n	4055fa <atanf+0x102>
  405528:	f04f 37ff 	mov.w	r7, #4294967295
  40552c:	4621      	mov	r1, r4
  40552e:	4620      	mov	r0, r4
  405530:	f000 ff66 	bl	406400 <__aeabi_fmul>
  405534:	4601      	mov	r1, r0
  405536:	4680      	mov	r8, r0
  405538:	f000 ff62 	bl	406400 <__aeabi_fmul>
  40553c:	4967      	ldr	r1, [pc, #412]	; (4056dc <atanf+0x1e4>)
  40553e:	4605      	mov	r5, r0
  405540:	f000 ff5e 	bl	406400 <__aeabi_fmul>
  405544:	4966      	ldr	r1, [pc, #408]	; (4056e0 <atanf+0x1e8>)
  405546:	f000 fe53 	bl	4061f0 <__addsf3>
  40554a:	4629      	mov	r1, r5
  40554c:	f000 ff58 	bl	406400 <__aeabi_fmul>
  405550:	4964      	ldr	r1, [pc, #400]	; (4056e4 <atanf+0x1ec>)
  405552:	f000 fe4d 	bl	4061f0 <__addsf3>
  405556:	4629      	mov	r1, r5
  405558:	f000 ff52 	bl	406400 <__aeabi_fmul>
  40555c:	4962      	ldr	r1, [pc, #392]	; (4056e8 <atanf+0x1f0>)
  40555e:	f000 fe47 	bl	4061f0 <__addsf3>
  405562:	4629      	mov	r1, r5
  405564:	f000 ff4c 	bl	406400 <__aeabi_fmul>
  405568:	4960      	ldr	r1, [pc, #384]	; (4056ec <atanf+0x1f4>)
  40556a:	f000 fe41 	bl	4061f0 <__addsf3>
  40556e:	4629      	mov	r1, r5
  405570:	f000 ff46 	bl	406400 <__aeabi_fmul>
  405574:	495e      	ldr	r1, [pc, #376]	; (4056f0 <atanf+0x1f8>)
  405576:	f000 fe3b 	bl	4061f0 <__addsf3>
  40557a:	4641      	mov	r1, r8
  40557c:	f000 ff40 	bl	406400 <__aeabi_fmul>
  405580:	495c      	ldr	r1, [pc, #368]	; (4056f4 <atanf+0x1fc>)
  405582:	4680      	mov	r8, r0
  405584:	4628      	mov	r0, r5
  405586:	f000 ff3b 	bl	406400 <__aeabi_fmul>
  40558a:	495b      	ldr	r1, [pc, #364]	; (4056f8 <atanf+0x200>)
  40558c:	f000 fe2e 	bl	4061ec <__aeabi_fsub>
  405590:	4629      	mov	r1, r5
  405592:	f000 ff35 	bl	406400 <__aeabi_fmul>
  405596:	4959      	ldr	r1, [pc, #356]	; (4056fc <atanf+0x204>)
  405598:	f000 fe28 	bl	4061ec <__aeabi_fsub>
  40559c:	4629      	mov	r1, r5
  40559e:	f000 ff2f 	bl	406400 <__aeabi_fmul>
  4055a2:	4957      	ldr	r1, [pc, #348]	; (405700 <atanf+0x208>)
  4055a4:	f000 fe22 	bl	4061ec <__aeabi_fsub>
  4055a8:	4629      	mov	r1, r5
  4055aa:	f000 ff29 	bl	406400 <__aeabi_fmul>
  4055ae:	4955      	ldr	r1, [pc, #340]	; (405704 <atanf+0x20c>)
  4055b0:	f000 fe1c 	bl	4061ec <__aeabi_fsub>
  4055b4:	4629      	mov	r1, r5
  4055b6:	f000 ff23 	bl	406400 <__aeabi_fmul>
  4055ba:	1c7b      	adds	r3, r7, #1
  4055bc:	4601      	mov	r1, r0
  4055be:	4640      	mov	r0, r8
  4055c0:	d04c      	beq.n	40565c <atanf+0x164>
  4055c2:	f000 fe15 	bl	4061f0 <__addsf3>
  4055c6:	4621      	mov	r1, r4
  4055c8:	f000 ff1a 	bl	406400 <__aeabi_fmul>
  4055cc:	4b4e      	ldr	r3, [pc, #312]	; (405708 <atanf+0x210>)
  4055ce:	4d4f      	ldr	r5, [pc, #316]	; (40570c <atanf+0x214>)
  4055d0:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
  4055d4:	f000 fe0a 	bl	4061ec <__aeabi_fsub>
  4055d8:	4621      	mov	r1, r4
  4055da:	f000 fe07 	bl	4061ec <__aeabi_fsub>
  4055de:	4601      	mov	r1, r0
  4055e0:	f855 0027 	ldr.w	r0, [r5, r7, lsl #2]
  4055e4:	f000 fe02 	bl	4061ec <__aeabi_fsub>
  4055e8:	2e00      	cmp	r6, #0
  4055ea:	db30      	blt.n	40564e <atanf+0x156>
  4055ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4055f0:	4601      	mov	r1, r0
  4055f2:	f000 fdfd 	bl	4061f0 <__addsf3>
  4055f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4055fa:	4945      	ldr	r1, [pc, #276]	; (405710 <atanf+0x218>)
  4055fc:	f000 fdf8 	bl	4061f0 <__addsf3>
  405600:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  405604:	f001 f8b8 	bl	406778 <__aeabi_fcmpgt>
  405608:	2800      	cmp	r0, #0
  40560a:	d08d      	beq.n	405528 <atanf+0x30>
  40560c:	4620      	mov	r0, r4
  40560e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405612:	f000 f887 	bl	405724 <fabsf>
  405616:	4b3f      	ldr	r3, [pc, #252]	; (405714 <atanf+0x21c>)
  405618:	429d      	cmp	r5, r3
  40561a:	4604      	mov	r4, r0
  40561c:	dc29      	bgt.n	405672 <atanf+0x17a>
  40561e:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
  405622:	429d      	cmp	r5, r3
  405624:	dc44      	bgt.n	4056b0 <atanf+0x1b8>
  405626:	4601      	mov	r1, r0
  405628:	f000 fde2 	bl	4061f0 <__addsf3>
  40562c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  405630:	f000 fddc 	bl	4061ec <__aeabi_fsub>
  405634:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  405638:	4605      	mov	r5, r0
  40563a:	4620      	mov	r0, r4
  40563c:	f000 fdd8 	bl	4061f0 <__addsf3>
  405640:	4601      	mov	r1, r0
  405642:	4628      	mov	r0, r5
  405644:	f000 ff90 	bl	406568 <__aeabi_fdiv>
  405648:	2700      	movs	r7, #0
  40564a:	4604      	mov	r4, r0
  40564c:	e76e      	b.n	40552c <atanf+0x34>
  40564e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  405652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405656:	4830      	ldr	r0, [pc, #192]	; (405718 <atanf+0x220>)
  405658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40565c:	f000 fdc8 	bl	4061f0 <__addsf3>
  405660:	4621      	mov	r1, r4
  405662:	f000 fecd 	bl	406400 <__aeabi_fmul>
  405666:	4601      	mov	r1, r0
  405668:	4620      	mov	r0, r4
  40566a:	f000 fdbf 	bl	4061ec <__aeabi_fsub>
  40566e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405672:	4b2a      	ldr	r3, [pc, #168]	; (40571c <atanf+0x224>)
  405674:	429d      	cmp	r5, r3
  405676:	dc14      	bgt.n	4056a2 <atanf+0x1aa>
  405678:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
  40567c:	f000 fdb6 	bl	4061ec <__aeabi_fsub>
  405680:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
  405684:	4605      	mov	r5, r0
  405686:	4620      	mov	r0, r4
  405688:	f000 feba 	bl	406400 <__aeabi_fmul>
  40568c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  405690:	f000 fdae 	bl	4061f0 <__addsf3>
  405694:	4601      	mov	r1, r0
  405696:	4628      	mov	r0, r5
  405698:	f000 ff66 	bl	406568 <__aeabi_fdiv>
  40569c:	2702      	movs	r7, #2
  40569e:	4604      	mov	r4, r0
  4056a0:	e744      	b.n	40552c <atanf+0x34>
  4056a2:	4601      	mov	r1, r0
  4056a4:	481e      	ldr	r0, [pc, #120]	; (405720 <atanf+0x228>)
  4056a6:	f000 ff5f 	bl	406568 <__aeabi_fdiv>
  4056aa:	2703      	movs	r7, #3
  4056ac:	4604      	mov	r4, r0
  4056ae:	e73d      	b.n	40552c <atanf+0x34>
  4056b0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  4056b4:	f000 fd9a 	bl	4061ec <__aeabi_fsub>
  4056b8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  4056bc:	4605      	mov	r5, r0
  4056be:	4620      	mov	r0, r4
  4056c0:	f000 fd96 	bl	4061f0 <__addsf3>
  4056c4:	4601      	mov	r1, r0
  4056c6:	4628      	mov	r0, r5
  4056c8:	f000 ff4e 	bl	406568 <__aeabi_fdiv>
  4056cc:	2701      	movs	r7, #1
  4056ce:	4604      	mov	r4, r0
  4056d0:	e72c      	b.n	40552c <atanf+0x34>
  4056d2:	bf00      	nop
  4056d4:	3fc90fdb 	.word	0x3fc90fdb
  4056d8:	3edfffff 	.word	0x3edfffff
  4056dc:	3c8569d7 	.word	0x3c8569d7
  4056e0:	3d4bda59 	.word	0x3d4bda59
  4056e4:	3d886b35 	.word	0x3d886b35
  4056e8:	3dba2e6e 	.word	0x3dba2e6e
  4056ec:	3e124925 	.word	0x3e124925
  4056f0:	3eaaaaab 	.word	0x3eaaaaab
  4056f4:	bd15a221 	.word	0xbd15a221
  4056f8:	3d6ef16b 	.word	0x3d6ef16b
  4056fc:	3d9d8795 	.word	0x3d9d8795
  405700:	3de38e38 	.word	0x3de38e38
  405704:	3e4ccccd 	.word	0x3e4ccccd
  405708:	0040bd2c 	.word	0x0040bd2c
  40570c:	0040bd1c 	.word	0x0040bd1c
  405710:	7149f2ca 	.word	0x7149f2ca
  405714:	3f97ffff 	.word	0x3f97ffff
  405718:	bfc90fdb 	.word	0xbfc90fdb
  40571c:	401bffff 	.word	0x401bffff
  405720:	bf800000 	.word	0xbf800000

00405724 <fabsf>:
  405724:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
  405728:	4770      	bx	lr
  40572a:	bf00      	nop

0040572c <floorf>:
  40572c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405730:	f020 4700 	bic.w	r7, r0, #2147483648	; 0x80000000
  405734:	0dfc      	lsrs	r4, r7, #23
  405736:	3c7f      	subs	r4, #127	; 0x7f
  405738:	2c16      	cmp	r4, #22
  40573a:	4605      	mov	r5, r0
  40573c:	dc13      	bgt.n	405766 <floorf+0x3a>
  40573e:	2c00      	cmp	r4, #0
  405740:	4680      	mov	r8, r0
  405742:	db1b      	blt.n	40577c <floorf+0x50>
  405744:	4f19      	ldr	r7, [pc, #100]	; (4057ac <floorf+0x80>)
  405746:	4127      	asrs	r7, r4
  405748:	4238      	tst	r0, r7
  40574a:	d014      	beq.n	405776 <floorf+0x4a>
  40574c:	4918      	ldr	r1, [pc, #96]	; (4057b0 <floorf+0x84>)
  40574e:	f000 fd4f 	bl	4061f0 <__addsf3>
  405752:	2100      	movs	r1, #0
  405754:	f001 f810 	bl	406778 <__aeabi_fcmpgt>
  405758:	b168      	cbz	r0, 405776 <floorf+0x4a>
  40575a:	2d00      	cmp	r5, #0
  40575c:	db1b      	blt.n	405796 <floorf+0x6a>
  40575e:	ea28 0007 	bic.w	r0, r8, r7
  405762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405766:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
  40576a:	d304      	bcc.n	405776 <floorf+0x4a>
  40576c:	4601      	mov	r1, r0
  40576e:	f000 fd3f 	bl	4061f0 <__addsf3>
  405772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405776:	4628      	mov	r0, r5
  405778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40577c:	490c      	ldr	r1, [pc, #48]	; (4057b0 <floorf+0x84>)
  40577e:	f000 fd37 	bl	4061f0 <__addsf3>
  405782:	2100      	movs	r1, #0
  405784:	f000 fff8 	bl	406778 <__aeabi_fcmpgt>
  405788:	2800      	cmp	r0, #0
  40578a:	d0f4      	beq.n	405776 <floorf+0x4a>
  40578c:	2d00      	cmp	r5, #0
  40578e:	db08      	blt.n	4057a2 <floorf+0x76>
  405790:	2000      	movs	r0, #0
  405792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405796:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  40579a:	fa43 f404 	asr.w	r4, r3, r4
  40579e:	44a0      	add	r8, r4
  4057a0:	e7dd      	b.n	40575e <floorf+0x32>
  4057a2:	2f00      	cmp	r7, #0
  4057a4:	d0e7      	beq.n	405776 <floorf+0x4a>
  4057a6:	4803      	ldr	r0, [pc, #12]	; (4057b4 <floorf+0x88>)
  4057a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4057ac:	007fffff 	.word	0x007fffff
  4057b0:	7149f2ca 	.word	0x7149f2ca
  4057b4:	bf800000 	.word	0xbf800000

004057b8 <scalbnf>:
  4057b8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  4057bc:	b538      	push	{r3, r4, r5, lr}
  4057be:	4603      	mov	r3, r0
  4057c0:	d016      	beq.n	4057f0 <scalbnf+0x38>
  4057c2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
  4057c6:	d20f      	bcs.n	4057e8 <scalbnf+0x30>
  4057c8:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
  4057cc:	460d      	mov	r5, r1
  4057ce:	d310      	bcc.n	4057f2 <scalbnf+0x3a>
  4057d0:	4604      	mov	r4, r0
  4057d2:	0dd0      	lsrs	r0, r2, #23
  4057d4:	4428      	add	r0, r5
  4057d6:	28fe      	cmp	r0, #254	; 0xfe
  4057d8:	dc2e      	bgt.n	405838 <scalbnf+0x80>
  4057da:	2800      	cmp	r0, #0
  4057dc:	dd1d      	ble.n	40581a <scalbnf+0x62>
  4057de:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
  4057e2:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
  4057e6:	bd38      	pop	{r3, r4, r5, pc}
  4057e8:	4601      	mov	r1, r0
  4057ea:	f000 fd01 	bl	4061f0 <__addsf3>
  4057ee:	bd38      	pop	{r3, r4, r5, pc}
  4057f0:	bd38      	pop	{r3, r4, r5, pc}
  4057f2:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
  4057f6:	f000 fe03 	bl	406400 <__aeabi_fmul>
  4057fa:	4a18      	ldr	r2, [pc, #96]	; (40585c <scalbnf+0xa4>)
  4057fc:	4295      	cmp	r5, r2
  4057fe:	4603      	mov	r3, r0
  405800:	db07      	blt.n	405812 <scalbnf+0x5a>
  405802:	4604      	mov	r4, r0
  405804:	f3c0 50c7 	ubfx	r0, r0, #23, #8
  405808:	3819      	subs	r0, #25
  40580a:	e7e3      	b.n	4057d4 <scalbnf+0x1c>
  40580c:	4814      	ldr	r0, [pc, #80]	; (405860 <scalbnf+0xa8>)
  40580e:	f000 f82b 	bl	405868 <copysignf>
  405812:	4913      	ldr	r1, [pc, #76]	; (405860 <scalbnf+0xa8>)
  405814:	f000 fdf4 	bl	406400 <__aeabi_fmul>
  405818:	bd38      	pop	{r3, r4, r5, pc}
  40581a:	f110 0f16 	cmn.w	r0, #22
  40581e:	da13      	bge.n	405848 <scalbnf+0x90>
  405820:	f24c 3250 	movw	r2, #50000	; 0xc350
  405824:	4295      	cmp	r5, r2
  405826:	4619      	mov	r1, r3
  405828:	ddf0      	ble.n	40580c <scalbnf+0x54>
  40582a:	480e      	ldr	r0, [pc, #56]	; (405864 <scalbnf+0xac>)
  40582c:	f000 f81c 	bl	405868 <copysignf>
  405830:	490c      	ldr	r1, [pc, #48]	; (405864 <scalbnf+0xac>)
  405832:	f000 fde5 	bl	406400 <__aeabi_fmul>
  405836:	bd38      	pop	{r3, r4, r5, pc}
  405838:	4619      	mov	r1, r3
  40583a:	480a      	ldr	r0, [pc, #40]	; (405864 <scalbnf+0xac>)
  40583c:	f000 f814 	bl	405868 <copysignf>
  405840:	4908      	ldr	r1, [pc, #32]	; (405864 <scalbnf+0xac>)
  405842:	f000 fddd 	bl	406400 <__aeabi_fmul>
  405846:	bd38      	pop	{r3, r4, r5, pc}
  405848:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
  40584c:	3019      	adds	r0, #25
  40584e:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
  405852:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
  405856:	f000 fdd3 	bl	406400 <__aeabi_fmul>
  40585a:	bd38      	pop	{r3, r4, r5, pc}
  40585c:	ffff3cb0 	.word	0xffff3cb0
  405860:	0da24260 	.word	0x0da24260
  405864:	7149f2ca 	.word	0x7149f2ca

00405868 <copysignf>:
  405868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40586c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
  405870:	4308      	orrs	r0, r1
  405872:	4770      	bx	lr

00405874 <__aeabi_drsub>:
  405874:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  405878:	e002      	b.n	405880 <__adddf3>
  40587a:	bf00      	nop

0040587c <__aeabi_dsub>:
  40587c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00405880 <__adddf3>:
  405880:	b530      	push	{r4, r5, lr}
  405882:	ea4f 0441 	mov.w	r4, r1, lsl #1
  405886:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40588a:	ea94 0f05 	teq	r4, r5
  40588e:	bf08      	it	eq
  405890:	ea90 0f02 	teqeq	r0, r2
  405894:	bf1f      	itttt	ne
  405896:	ea54 0c00 	orrsne.w	ip, r4, r0
  40589a:	ea55 0c02 	orrsne.w	ip, r5, r2
  40589e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4058a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4058a6:	f000 80e2 	beq.w	405a6e <__adddf3+0x1ee>
  4058aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4058ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4058b2:	bfb8      	it	lt
  4058b4:	426d      	neglt	r5, r5
  4058b6:	dd0c      	ble.n	4058d2 <__adddf3+0x52>
  4058b8:	442c      	add	r4, r5
  4058ba:	ea80 0202 	eor.w	r2, r0, r2
  4058be:	ea81 0303 	eor.w	r3, r1, r3
  4058c2:	ea82 0000 	eor.w	r0, r2, r0
  4058c6:	ea83 0101 	eor.w	r1, r3, r1
  4058ca:	ea80 0202 	eor.w	r2, r0, r2
  4058ce:	ea81 0303 	eor.w	r3, r1, r3
  4058d2:	2d36      	cmp	r5, #54	; 0x36
  4058d4:	bf88      	it	hi
  4058d6:	bd30      	pophi	{r4, r5, pc}
  4058d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4058dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4058e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4058e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4058e8:	d002      	beq.n	4058f0 <__adddf3+0x70>
  4058ea:	4240      	negs	r0, r0
  4058ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4058f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4058f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4058f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4058fc:	d002      	beq.n	405904 <__adddf3+0x84>
  4058fe:	4252      	negs	r2, r2
  405900:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  405904:	ea94 0f05 	teq	r4, r5
  405908:	f000 80a7 	beq.w	405a5a <__adddf3+0x1da>
  40590c:	f1a4 0401 	sub.w	r4, r4, #1
  405910:	f1d5 0e20 	rsbs	lr, r5, #32
  405914:	db0d      	blt.n	405932 <__adddf3+0xb2>
  405916:	fa02 fc0e 	lsl.w	ip, r2, lr
  40591a:	fa22 f205 	lsr.w	r2, r2, r5
  40591e:	1880      	adds	r0, r0, r2
  405920:	f141 0100 	adc.w	r1, r1, #0
  405924:	fa03 f20e 	lsl.w	r2, r3, lr
  405928:	1880      	adds	r0, r0, r2
  40592a:	fa43 f305 	asr.w	r3, r3, r5
  40592e:	4159      	adcs	r1, r3
  405930:	e00e      	b.n	405950 <__adddf3+0xd0>
  405932:	f1a5 0520 	sub.w	r5, r5, #32
  405936:	f10e 0e20 	add.w	lr, lr, #32
  40593a:	2a01      	cmp	r2, #1
  40593c:	fa03 fc0e 	lsl.w	ip, r3, lr
  405940:	bf28      	it	cs
  405942:	f04c 0c02 	orrcs.w	ip, ip, #2
  405946:	fa43 f305 	asr.w	r3, r3, r5
  40594a:	18c0      	adds	r0, r0, r3
  40594c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  405950:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405954:	d507      	bpl.n	405966 <__adddf3+0xe6>
  405956:	f04f 0e00 	mov.w	lr, #0
  40595a:	f1dc 0c00 	rsbs	ip, ip, #0
  40595e:	eb7e 0000 	sbcs.w	r0, lr, r0
  405962:	eb6e 0101 	sbc.w	r1, lr, r1
  405966:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40596a:	d31b      	bcc.n	4059a4 <__adddf3+0x124>
  40596c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  405970:	d30c      	bcc.n	40598c <__adddf3+0x10c>
  405972:	0849      	lsrs	r1, r1, #1
  405974:	ea5f 0030 	movs.w	r0, r0, rrx
  405978:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40597c:	f104 0401 	add.w	r4, r4, #1
  405980:	ea4f 5244 	mov.w	r2, r4, lsl #21
  405984:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  405988:	f080 809a 	bcs.w	405ac0 <__adddf3+0x240>
  40598c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  405990:	bf08      	it	eq
  405992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  405996:	f150 0000 	adcs.w	r0, r0, #0
  40599a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40599e:	ea41 0105 	orr.w	r1, r1, r5
  4059a2:	bd30      	pop	{r4, r5, pc}
  4059a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4059a8:	4140      	adcs	r0, r0
  4059aa:	eb41 0101 	adc.w	r1, r1, r1
  4059ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4059b2:	f1a4 0401 	sub.w	r4, r4, #1
  4059b6:	d1e9      	bne.n	40598c <__adddf3+0x10c>
  4059b8:	f091 0f00 	teq	r1, #0
  4059bc:	bf04      	itt	eq
  4059be:	4601      	moveq	r1, r0
  4059c0:	2000      	moveq	r0, #0
  4059c2:	fab1 f381 	clz	r3, r1
  4059c6:	bf08      	it	eq
  4059c8:	3320      	addeq	r3, #32
  4059ca:	f1a3 030b 	sub.w	r3, r3, #11
  4059ce:	f1b3 0220 	subs.w	r2, r3, #32
  4059d2:	da0c      	bge.n	4059ee <__adddf3+0x16e>
  4059d4:	320c      	adds	r2, #12
  4059d6:	dd08      	ble.n	4059ea <__adddf3+0x16a>
  4059d8:	f102 0c14 	add.w	ip, r2, #20
  4059dc:	f1c2 020c 	rsb	r2, r2, #12
  4059e0:	fa01 f00c 	lsl.w	r0, r1, ip
  4059e4:	fa21 f102 	lsr.w	r1, r1, r2
  4059e8:	e00c      	b.n	405a04 <__adddf3+0x184>
  4059ea:	f102 0214 	add.w	r2, r2, #20
  4059ee:	bfd8      	it	le
  4059f0:	f1c2 0c20 	rsble	ip, r2, #32
  4059f4:	fa01 f102 	lsl.w	r1, r1, r2
  4059f8:	fa20 fc0c 	lsr.w	ip, r0, ip
  4059fc:	bfdc      	itt	le
  4059fe:	ea41 010c 	orrle.w	r1, r1, ip
  405a02:	4090      	lslle	r0, r2
  405a04:	1ae4      	subs	r4, r4, r3
  405a06:	bfa2      	ittt	ge
  405a08:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  405a0c:	4329      	orrge	r1, r5
  405a0e:	bd30      	popge	{r4, r5, pc}
  405a10:	ea6f 0404 	mvn.w	r4, r4
  405a14:	3c1f      	subs	r4, #31
  405a16:	da1c      	bge.n	405a52 <__adddf3+0x1d2>
  405a18:	340c      	adds	r4, #12
  405a1a:	dc0e      	bgt.n	405a3a <__adddf3+0x1ba>
  405a1c:	f104 0414 	add.w	r4, r4, #20
  405a20:	f1c4 0220 	rsb	r2, r4, #32
  405a24:	fa20 f004 	lsr.w	r0, r0, r4
  405a28:	fa01 f302 	lsl.w	r3, r1, r2
  405a2c:	ea40 0003 	orr.w	r0, r0, r3
  405a30:	fa21 f304 	lsr.w	r3, r1, r4
  405a34:	ea45 0103 	orr.w	r1, r5, r3
  405a38:	bd30      	pop	{r4, r5, pc}
  405a3a:	f1c4 040c 	rsb	r4, r4, #12
  405a3e:	f1c4 0220 	rsb	r2, r4, #32
  405a42:	fa20 f002 	lsr.w	r0, r0, r2
  405a46:	fa01 f304 	lsl.w	r3, r1, r4
  405a4a:	ea40 0003 	orr.w	r0, r0, r3
  405a4e:	4629      	mov	r1, r5
  405a50:	bd30      	pop	{r4, r5, pc}
  405a52:	fa21 f004 	lsr.w	r0, r1, r4
  405a56:	4629      	mov	r1, r5
  405a58:	bd30      	pop	{r4, r5, pc}
  405a5a:	f094 0f00 	teq	r4, #0
  405a5e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  405a62:	bf06      	itte	eq
  405a64:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  405a68:	3401      	addeq	r4, #1
  405a6a:	3d01      	subne	r5, #1
  405a6c:	e74e      	b.n	40590c <__adddf3+0x8c>
  405a6e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  405a72:	bf18      	it	ne
  405a74:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  405a78:	d029      	beq.n	405ace <__adddf3+0x24e>
  405a7a:	ea94 0f05 	teq	r4, r5
  405a7e:	bf08      	it	eq
  405a80:	ea90 0f02 	teqeq	r0, r2
  405a84:	d005      	beq.n	405a92 <__adddf3+0x212>
  405a86:	ea54 0c00 	orrs.w	ip, r4, r0
  405a8a:	bf04      	itt	eq
  405a8c:	4619      	moveq	r1, r3
  405a8e:	4610      	moveq	r0, r2
  405a90:	bd30      	pop	{r4, r5, pc}
  405a92:	ea91 0f03 	teq	r1, r3
  405a96:	bf1e      	ittt	ne
  405a98:	2100      	movne	r1, #0
  405a9a:	2000      	movne	r0, #0
  405a9c:	bd30      	popne	{r4, r5, pc}
  405a9e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  405aa2:	d105      	bne.n	405ab0 <__adddf3+0x230>
  405aa4:	0040      	lsls	r0, r0, #1
  405aa6:	4149      	adcs	r1, r1
  405aa8:	bf28      	it	cs
  405aaa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  405aae:	bd30      	pop	{r4, r5, pc}
  405ab0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  405ab4:	bf3c      	itt	cc
  405ab6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  405aba:	bd30      	popcc	{r4, r5, pc}
  405abc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405ac0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  405ac4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  405ac8:	f04f 0000 	mov.w	r0, #0
  405acc:	bd30      	pop	{r4, r5, pc}
  405ace:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  405ad2:	bf1a      	itte	ne
  405ad4:	4619      	movne	r1, r3
  405ad6:	4610      	movne	r0, r2
  405ad8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  405adc:	bf1c      	itt	ne
  405ade:	460b      	movne	r3, r1
  405ae0:	4602      	movne	r2, r0
  405ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  405ae6:	bf06      	itte	eq
  405ae8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  405aec:	ea91 0f03 	teqeq	r1, r3
  405af0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  405af4:	bd30      	pop	{r4, r5, pc}
  405af6:	bf00      	nop

00405af8 <__aeabi_ui2d>:
  405af8:	f090 0f00 	teq	r0, #0
  405afc:	bf04      	itt	eq
  405afe:	2100      	moveq	r1, #0
  405b00:	4770      	bxeq	lr
  405b02:	b530      	push	{r4, r5, lr}
  405b04:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405b08:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405b0c:	f04f 0500 	mov.w	r5, #0
  405b10:	f04f 0100 	mov.w	r1, #0
  405b14:	e750      	b.n	4059b8 <__adddf3+0x138>
  405b16:	bf00      	nop

00405b18 <__aeabi_i2d>:
  405b18:	f090 0f00 	teq	r0, #0
  405b1c:	bf04      	itt	eq
  405b1e:	2100      	moveq	r1, #0
  405b20:	4770      	bxeq	lr
  405b22:	b530      	push	{r4, r5, lr}
  405b24:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405b28:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405b2c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  405b30:	bf48      	it	mi
  405b32:	4240      	negmi	r0, r0
  405b34:	f04f 0100 	mov.w	r1, #0
  405b38:	e73e      	b.n	4059b8 <__adddf3+0x138>
  405b3a:	bf00      	nop

00405b3c <__aeabi_f2d>:
  405b3c:	0042      	lsls	r2, r0, #1
  405b3e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  405b42:	ea4f 0131 	mov.w	r1, r1, rrx
  405b46:	ea4f 7002 	mov.w	r0, r2, lsl #28
  405b4a:	bf1f      	itttt	ne
  405b4c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  405b50:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  405b54:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  405b58:	4770      	bxne	lr
  405b5a:	f092 0f00 	teq	r2, #0
  405b5e:	bf14      	ite	ne
  405b60:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  405b64:	4770      	bxeq	lr
  405b66:	b530      	push	{r4, r5, lr}
  405b68:	f44f 7460 	mov.w	r4, #896	; 0x380
  405b6c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405b70:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  405b74:	e720      	b.n	4059b8 <__adddf3+0x138>
  405b76:	bf00      	nop

00405b78 <__aeabi_ul2d>:
  405b78:	ea50 0201 	orrs.w	r2, r0, r1
  405b7c:	bf08      	it	eq
  405b7e:	4770      	bxeq	lr
  405b80:	b530      	push	{r4, r5, lr}
  405b82:	f04f 0500 	mov.w	r5, #0
  405b86:	e00a      	b.n	405b9e <__aeabi_l2d+0x16>

00405b88 <__aeabi_l2d>:
  405b88:	ea50 0201 	orrs.w	r2, r0, r1
  405b8c:	bf08      	it	eq
  405b8e:	4770      	bxeq	lr
  405b90:	b530      	push	{r4, r5, lr}
  405b92:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  405b96:	d502      	bpl.n	405b9e <__aeabi_l2d+0x16>
  405b98:	4240      	negs	r0, r0
  405b9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405b9e:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405ba2:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405ba6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  405baa:	f43f aedc 	beq.w	405966 <__adddf3+0xe6>
  405bae:	f04f 0203 	mov.w	r2, #3
  405bb2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  405bb6:	bf18      	it	ne
  405bb8:	3203      	addne	r2, #3
  405bba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  405bbe:	bf18      	it	ne
  405bc0:	3203      	addne	r2, #3
  405bc2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  405bc6:	f1c2 0320 	rsb	r3, r2, #32
  405bca:	fa00 fc03 	lsl.w	ip, r0, r3
  405bce:	fa20 f002 	lsr.w	r0, r0, r2
  405bd2:	fa01 fe03 	lsl.w	lr, r1, r3
  405bd6:	ea40 000e 	orr.w	r0, r0, lr
  405bda:	fa21 f102 	lsr.w	r1, r1, r2
  405bde:	4414      	add	r4, r2
  405be0:	e6c1      	b.n	405966 <__adddf3+0xe6>
  405be2:	bf00      	nop

00405be4 <__aeabi_dmul>:
  405be4:	b570      	push	{r4, r5, r6, lr}
  405be6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405bea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  405bee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  405bf2:	bf1d      	ittte	ne
  405bf4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  405bf8:	ea94 0f0c 	teqne	r4, ip
  405bfc:	ea95 0f0c 	teqne	r5, ip
  405c00:	f000 f8de 	bleq	405dc0 <__aeabi_dmul+0x1dc>
  405c04:	442c      	add	r4, r5
  405c06:	ea81 0603 	eor.w	r6, r1, r3
  405c0a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  405c0e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  405c12:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  405c16:	bf18      	it	ne
  405c18:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  405c1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405c20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  405c24:	d038      	beq.n	405c98 <__aeabi_dmul+0xb4>
  405c26:	fba0 ce02 	umull	ip, lr, r0, r2
  405c2a:	f04f 0500 	mov.w	r5, #0
  405c2e:	fbe1 e502 	umlal	lr, r5, r1, r2
  405c32:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  405c36:	fbe0 e503 	umlal	lr, r5, r0, r3
  405c3a:	f04f 0600 	mov.w	r6, #0
  405c3e:	fbe1 5603 	umlal	r5, r6, r1, r3
  405c42:	f09c 0f00 	teq	ip, #0
  405c46:	bf18      	it	ne
  405c48:	f04e 0e01 	orrne.w	lr, lr, #1
  405c4c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  405c50:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  405c54:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  405c58:	d204      	bcs.n	405c64 <__aeabi_dmul+0x80>
  405c5a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  405c5e:	416d      	adcs	r5, r5
  405c60:	eb46 0606 	adc.w	r6, r6, r6
  405c64:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  405c68:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  405c6c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  405c70:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  405c74:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  405c78:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  405c7c:	bf88      	it	hi
  405c7e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  405c82:	d81e      	bhi.n	405cc2 <__aeabi_dmul+0xde>
  405c84:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  405c88:	bf08      	it	eq
  405c8a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  405c8e:	f150 0000 	adcs.w	r0, r0, #0
  405c92:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405c96:	bd70      	pop	{r4, r5, r6, pc}
  405c98:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  405c9c:	ea46 0101 	orr.w	r1, r6, r1
  405ca0:	ea40 0002 	orr.w	r0, r0, r2
  405ca4:	ea81 0103 	eor.w	r1, r1, r3
  405ca8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  405cac:	bfc2      	ittt	gt
  405cae:	ebd4 050c 	rsbsgt	r5, r4, ip
  405cb2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  405cb6:	bd70      	popgt	{r4, r5, r6, pc}
  405cb8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405cbc:	f04f 0e00 	mov.w	lr, #0
  405cc0:	3c01      	subs	r4, #1
  405cc2:	f300 80ab 	bgt.w	405e1c <__aeabi_dmul+0x238>
  405cc6:	f114 0f36 	cmn.w	r4, #54	; 0x36
  405cca:	bfde      	ittt	le
  405ccc:	2000      	movle	r0, #0
  405cce:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  405cd2:	bd70      	pople	{r4, r5, r6, pc}
  405cd4:	f1c4 0400 	rsb	r4, r4, #0
  405cd8:	3c20      	subs	r4, #32
  405cda:	da35      	bge.n	405d48 <__aeabi_dmul+0x164>
  405cdc:	340c      	adds	r4, #12
  405cde:	dc1b      	bgt.n	405d18 <__aeabi_dmul+0x134>
  405ce0:	f104 0414 	add.w	r4, r4, #20
  405ce4:	f1c4 0520 	rsb	r5, r4, #32
  405ce8:	fa00 f305 	lsl.w	r3, r0, r5
  405cec:	fa20 f004 	lsr.w	r0, r0, r4
  405cf0:	fa01 f205 	lsl.w	r2, r1, r5
  405cf4:	ea40 0002 	orr.w	r0, r0, r2
  405cf8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  405cfc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  405d00:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  405d04:	fa21 f604 	lsr.w	r6, r1, r4
  405d08:	eb42 0106 	adc.w	r1, r2, r6
  405d0c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405d10:	bf08      	it	eq
  405d12:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405d16:	bd70      	pop	{r4, r5, r6, pc}
  405d18:	f1c4 040c 	rsb	r4, r4, #12
  405d1c:	f1c4 0520 	rsb	r5, r4, #32
  405d20:	fa00 f304 	lsl.w	r3, r0, r4
  405d24:	fa20 f005 	lsr.w	r0, r0, r5
  405d28:	fa01 f204 	lsl.w	r2, r1, r4
  405d2c:	ea40 0002 	orr.w	r0, r0, r2
  405d30:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405d34:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  405d38:	f141 0100 	adc.w	r1, r1, #0
  405d3c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405d40:	bf08      	it	eq
  405d42:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405d46:	bd70      	pop	{r4, r5, r6, pc}
  405d48:	f1c4 0520 	rsb	r5, r4, #32
  405d4c:	fa00 f205 	lsl.w	r2, r0, r5
  405d50:	ea4e 0e02 	orr.w	lr, lr, r2
  405d54:	fa20 f304 	lsr.w	r3, r0, r4
  405d58:	fa01 f205 	lsl.w	r2, r1, r5
  405d5c:	ea43 0302 	orr.w	r3, r3, r2
  405d60:	fa21 f004 	lsr.w	r0, r1, r4
  405d64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405d68:	fa21 f204 	lsr.w	r2, r1, r4
  405d6c:	ea20 0002 	bic.w	r0, r0, r2
  405d70:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  405d74:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405d78:	bf08      	it	eq
  405d7a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405d7e:	bd70      	pop	{r4, r5, r6, pc}
  405d80:	f094 0f00 	teq	r4, #0
  405d84:	d10f      	bne.n	405da6 <__aeabi_dmul+0x1c2>
  405d86:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  405d8a:	0040      	lsls	r0, r0, #1
  405d8c:	eb41 0101 	adc.w	r1, r1, r1
  405d90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405d94:	bf08      	it	eq
  405d96:	3c01      	subeq	r4, #1
  405d98:	d0f7      	beq.n	405d8a <__aeabi_dmul+0x1a6>
  405d9a:	ea41 0106 	orr.w	r1, r1, r6
  405d9e:	f095 0f00 	teq	r5, #0
  405da2:	bf18      	it	ne
  405da4:	4770      	bxne	lr
  405da6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  405daa:	0052      	lsls	r2, r2, #1
  405dac:	eb43 0303 	adc.w	r3, r3, r3
  405db0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  405db4:	bf08      	it	eq
  405db6:	3d01      	subeq	r5, #1
  405db8:	d0f7      	beq.n	405daa <__aeabi_dmul+0x1c6>
  405dba:	ea43 0306 	orr.w	r3, r3, r6
  405dbe:	4770      	bx	lr
  405dc0:	ea94 0f0c 	teq	r4, ip
  405dc4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  405dc8:	bf18      	it	ne
  405dca:	ea95 0f0c 	teqne	r5, ip
  405dce:	d00c      	beq.n	405dea <__aeabi_dmul+0x206>
  405dd0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  405dd4:	bf18      	it	ne
  405dd6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405dda:	d1d1      	bne.n	405d80 <__aeabi_dmul+0x19c>
  405ddc:	ea81 0103 	eor.w	r1, r1, r3
  405de0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405de4:	f04f 0000 	mov.w	r0, #0
  405de8:	bd70      	pop	{r4, r5, r6, pc}
  405dea:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  405dee:	bf06      	itte	eq
  405df0:	4610      	moveq	r0, r2
  405df2:	4619      	moveq	r1, r3
  405df4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405df8:	d019      	beq.n	405e2e <__aeabi_dmul+0x24a>
  405dfa:	ea94 0f0c 	teq	r4, ip
  405dfe:	d102      	bne.n	405e06 <__aeabi_dmul+0x222>
  405e00:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  405e04:	d113      	bne.n	405e2e <__aeabi_dmul+0x24a>
  405e06:	ea95 0f0c 	teq	r5, ip
  405e0a:	d105      	bne.n	405e18 <__aeabi_dmul+0x234>
  405e0c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  405e10:	bf1c      	itt	ne
  405e12:	4610      	movne	r0, r2
  405e14:	4619      	movne	r1, r3
  405e16:	d10a      	bne.n	405e2e <__aeabi_dmul+0x24a>
  405e18:	ea81 0103 	eor.w	r1, r1, r3
  405e1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405e20:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  405e24:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  405e28:	f04f 0000 	mov.w	r0, #0
  405e2c:	bd70      	pop	{r4, r5, r6, pc}
  405e2e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  405e32:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  405e36:	bd70      	pop	{r4, r5, r6, pc}

00405e38 <__aeabi_ddiv>:
  405e38:	b570      	push	{r4, r5, r6, lr}
  405e3a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405e3e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  405e42:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  405e46:	bf1d      	ittte	ne
  405e48:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  405e4c:	ea94 0f0c 	teqne	r4, ip
  405e50:	ea95 0f0c 	teqne	r5, ip
  405e54:	f000 f8a7 	bleq	405fa6 <__aeabi_ddiv+0x16e>
  405e58:	eba4 0405 	sub.w	r4, r4, r5
  405e5c:	ea81 0e03 	eor.w	lr, r1, r3
  405e60:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  405e64:	ea4f 3101 	mov.w	r1, r1, lsl #12
  405e68:	f000 8088 	beq.w	405f7c <__aeabi_ddiv+0x144>
  405e6c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  405e70:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  405e74:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  405e78:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  405e7c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  405e80:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  405e84:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  405e88:	ea4f 2600 	mov.w	r6, r0, lsl #8
  405e8c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  405e90:	429d      	cmp	r5, r3
  405e92:	bf08      	it	eq
  405e94:	4296      	cmpeq	r6, r2
  405e96:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  405e9a:	f504 7440 	add.w	r4, r4, #768	; 0x300
  405e9e:	d202      	bcs.n	405ea6 <__aeabi_ddiv+0x6e>
  405ea0:	085b      	lsrs	r3, r3, #1
  405ea2:	ea4f 0232 	mov.w	r2, r2, rrx
  405ea6:	1ab6      	subs	r6, r6, r2
  405ea8:	eb65 0503 	sbc.w	r5, r5, r3
  405eac:	085b      	lsrs	r3, r3, #1
  405eae:	ea4f 0232 	mov.w	r2, r2, rrx
  405eb2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  405eb6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  405eba:	ebb6 0e02 	subs.w	lr, r6, r2
  405ebe:	eb75 0e03 	sbcs.w	lr, r5, r3
  405ec2:	bf22      	ittt	cs
  405ec4:	1ab6      	subcs	r6, r6, r2
  405ec6:	4675      	movcs	r5, lr
  405ec8:	ea40 000c 	orrcs.w	r0, r0, ip
  405ecc:	085b      	lsrs	r3, r3, #1
  405ece:	ea4f 0232 	mov.w	r2, r2, rrx
  405ed2:	ebb6 0e02 	subs.w	lr, r6, r2
  405ed6:	eb75 0e03 	sbcs.w	lr, r5, r3
  405eda:	bf22      	ittt	cs
  405edc:	1ab6      	subcs	r6, r6, r2
  405ede:	4675      	movcs	r5, lr
  405ee0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  405ee4:	085b      	lsrs	r3, r3, #1
  405ee6:	ea4f 0232 	mov.w	r2, r2, rrx
  405eea:	ebb6 0e02 	subs.w	lr, r6, r2
  405eee:	eb75 0e03 	sbcs.w	lr, r5, r3
  405ef2:	bf22      	ittt	cs
  405ef4:	1ab6      	subcs	r6, r6, r2
  405ef6:	4675      	movcs	r5, lr
  405ef8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  405efc:	085b      	lsrs	r3, r3, #1
  405efe:	ea4f 0232 	mov.w	r2, r2, rrx
  405f02:	ebb6 0e02 	subs.w	lr, r6, r2
  405f06:	eb75 0e03 	sbcs.w	lr, r5, r3
  405f0a:	bf22      	ittt	cs
  405f0c:	1ab6      	subcs	r6, r6, r2
  405f0e:	4675      	movcs	r5, lr
  405f10:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  405f14:	ea55 0e06 	orrs.w	lr, r5, r6
  405f18:	d018      	beq.n	405f4c <__aeabi_ddiv+0x114>
  405f1a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  405f1e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  405f22:	ea4f 1606 	mov.w	r6, r6, lsl #4
  405f26:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  405f2a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  405f2e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  405f32:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  405f36:	d1c0      	bne.n	405eba <__aeabi_ddiv+0x82>
  405f38:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405f3c:	d10b      	bne.n	405f56 <__aeabi_ddiv+0x11e>
  405f3e:	ea41 0100 	orr.w	r1, r1, r0
  405f42:	f04f 0000 	mov.w	r0, #0
  405f46:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  405f4a:	e7b6      	b.n	405eba <__aeabi_ddiv+0x82>
  405f4c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405f50:	bf04      	itt	eq
  405f52:	4301      	orreq	r1, r0
  405f54:	2000      	moveq	r0, #0
  405f56:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  405f5a:	bf88      	it	hi
  405f5c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  405f60:	f63f aeaf 	bhi.w	405cc2 <__aeabi_dmul+0xde>
  405f64:	ebb5 0c03 	subs.w	ip, r5, r3
  405f68:	bf04      	itt	eq
  405f6a:	ebb6 0c02 	subseq.w	ip, r6, r2
  405f6e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  405f72:	f150 0000 	adcs.w	r0, r0, #0
  405f76:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405f7a:	bd70      	pop	{r4, r5, r6, pc}
  405f7c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  405f80:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  405f84:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  405f88:	bfc2      	ittt	gt
  405f8a:	ebd4 050c 	rsbsgt	r5, r4, ip
  405f8e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  405f92:	bd70      	popgt	{r4, r5, r6, pc}
  405f94:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405f98:	f04f 0e00 	mov.w	lr, #0
  405f9c:	3c01      	subs	r4, #1
  405f9e:	e690      	b.n	405cc2 <__aeabi_dmul+0xde>
  405fa0:	ea45 0e06 	orr.w	lr, r5, r6
  405fa4:	e68d      	b.n	405cc2 <__aeabi_dmul+0xde>
  405fa6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  405faa:	ea94 0f0c 	teq	r4, ip
  405fae:	bf08      	it	eq
  405fb0:	ea95 0f0c 	teqeq	r5, ip
  405fb4:	f43f af3b 	beq.w	405e2e <__aeabi_dmul+0x24a>
  405fb8:	ea94 0f0c 	teq	r4, ip
  405fbc:	d10a      	bne.n	405fd4 <__aeabi_ddiv+0x19c>
  405fbe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  405fc2:	f47f af34 	bne.w	405e2e <__aeabi_dmul+0x24a>
  405fc6:	ea95 0f0c 	teq	r5, ip
  405fca:	f47f af25 	bne.w	405e18 <__aeabi_dmul+0x234>
  405fce:	4610      	mov	r0, r2
  405fd0:	4619      	mov	r1, r3
  405fd2:	e72c      	b.n	405e2e <__aeabi_dmul+0x24a>
  405fd4:	ea95 0f0c 	teq	r5, ip
  405fd8:	d106      	bne.n	405fe8 <__aeabi_ddiv+0x1b0>
  405fda:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  405fde:	f43f aefd 	beq.w	405ddc <__aeabi_dmul+0x1f8>
  405fe2:	4610      	mov	r0, r2
  405fe4:	4619      	mov	r1, r3
  405fe6:	e722      	b.n	405e2e <__aeabi_dmul+0x24a>
  405fe8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  405fec:	bf18      	it	ne
  405fee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405ff2:	f47f aec5 	bne.w	405d80 <__aeabi_dmul+0x19c>
  405ff6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  405ffa:	f47f af0d 	bne.w	405e18 <__aeabi_dmul+0x234>
  405ffe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  406002:	f47f aeeb 	bne.w	405ddc <__aeabi_dmul+0x1f8>
  406006:	e712      	b.n	405e2e <__aeabi_dmul+0x24a>

00406008 <__gedf2>:
  406008:	f04f 3cff 	mov.w	ip, #4294967295
  40600c:	e006      	b.n	40601c <__cmpdf2+0x4>
  40600e:	bf00      	nop

00406010 <__ledf2>:
  406010:	f04f 0c01 	mov.w	ip, #1
  406014:	e002      	b.n	40601c <__cmpdf2+0x4>
  406016:	bf00      	nop

00406018 <__cmpdf2>:
  406018:	f04f 0c01 	mov.w	ip, #1
  40601c:	f84d cd04 	str.w	ip, [sp, #-4]!
  406020:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  406024:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406028:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40602c:	bf18      	it	ne
  40602e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  406032:	d01b      	beq.n	40606c <__cmpdf2+0x54>
  406034:	b001      	add	sp, #4
  406036:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40603a:	bf0c      	ite	eq
  40603c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  406040:	ea91 0f03 	teqne	r1, r3
  406044:	bf02      	ittt	eq
  406046:	ea90 0f02 	teqeq	r0, r2
  40604a:	2000      	moveq	r0, #0
  40604c:	4770      	bxeq	lr
  40604e:	f110 0f00 	cmn.w	r0, #0
  406052:	ea91 0f03 	teq	r1, r3
  406056:	bf58      	it	pl
  406058:	4299      	cmppl	r1, r3
  40605a:	bf08      	it	eq
  40605c:	4290      	cmpeq	r0, r2
  40605e:	bf2c      	ite	cs
  406060:	17d8      	asrcs	r0, r3, #31
  406062:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  406066:	f040 0001 	orr.w	r0, r0, #1
  40606a:	4770      	bx	lr
  40606c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  406070:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406074:	d102      	bne.n	40607c <__cmpdf2+0x64>
  406076:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40607a:	d107      	bne.n	40608c <__cmpdf2+0x74>
  40607c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  406080:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406084:	d1d6      	bne.n	406034 <__cmpdf2+0x1c>
  406086:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40608a:	d0d3      	beq.n	406034 <__cmpdf2+0x1c>
  40608c:	f85d 0b04 	ldr.w	r0, [sp], #4
  406090:	4770      	bx	lr
  406092:	bf00      	nop

00406094 <__aeabi_cdrcmple>:
  406094:	4684      	mov	ip, r0
  406096:	4610      	mov	r0, r2
  406098:	4662      	mov	r2, ip
  40609a:	468c      	mov	ip, r1
  40609c:	4619      	mov	r1, r3
  40609e:	4663      	mov	r3, ip
  4060a0:	e000      	b.n	4060a4 <__aeabi_cdcmpeq>
  4060a2:	bf00      	nop

004060a4 <__aeabi_cdcmpeq>:
  4060a4:	b501      	push	{r0, lr}
  4060a6:	f7ff ffb7 	bl	406018 <__cmpdf2>
  4060aa:	2800      	cmp	r0, #0
  4060ac:	bf48      	it	mi
  4060ae:	f110 0f00 	cmnmi.w	r0, #0
  4060b2:	bd01      	pop	{r0, pc}

004060b4 <__aeabi_dcmpeq>:
  4060b4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4060b8:	f7ff fff4 	bl	4060a4 <__aeabi_cdcmpeq>
  4060bc:	bf0c      	ite	eq
  4060be:	2001      	moveq	r0, #1
  4060c0:	2000      	movne	r0, #0
  4060c2:	f85d fb08 	ldr.w	pc, [sp], #8
  4060c6:	bf00      	nop

004060c8 <__aeabi_dcmplt>:
  4060c8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4060cc:	f7ff ffea 	bl	4060a4 <__aeabi_cdcmpeq>
  4060d0:	bf34      	ite	cc
  4060d2:	2001      	movcc	r0, #1
  4060d4:	2000      	movcs	r0, #0
  4060d6:	f85d fb08 	ldr.w	pc, [sp], #8
  4060da:	bf00      	nop

004060dc <__aeabi_dcmple>:
  4060dc:	f84d ed08 	str.w	lr, [sp, #-8]!
  4060e0:	f7ff ffe0 	bl	4060a4 <__aeabi_cdcmpeq>
  4060e4:	bf94      	ite	ls
  4060e6:	2001      	movls	r0, #1
  4060e8:	2000      	movhi	r0, #0
  4060ea:	f85d fb08 	ldr.w	pc, [sp], #8
  4060ee:	bf00      	nop

004060f0 <__aeabi_dcmpge>:
  4060f0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4060f4:	f7ff ffce 	bl	406094 <__aeabi_cdrcmple>
  4060f8:	bf94      	ite	ls
  4060fa:	2001      	movls	r0, #1
  4060fc:	2000      	movhi	r0, #0
  4060fe:	f85d fb08 	ldr.w	pc, [sp], #8
  406102:	bf00      	nop

00406104 <__aeabi_dcmpgt>:
  406104:	f84d ed08 	str.w	lr, [sp, #-8]!
  406108:	f7ff ffc4 	bl	406094 <__aeabi_cdrcmple>
  40610c:	bf34      	ite	cc
  40610e:	2001      	movcc	r0, #1
  406110:	2000      	movcs	r0, #0
  406112:	f85d fb08 	ldr.w	pc, [sp], #8
  406116:	bf00      	nop

00406118 <__aeabi_dcmpun>:
  406118:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40611c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406120:	d102      	bne.n	406128 <__aeabi_dcmpun+0x10>
  406122:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  406126:	d10a      	bne.n	40613e <__aeabi_dcmpun+0x26>
  406128:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40612c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406130:	d102      	bne.n	406138 <__aeabi_dcmpun+0x20>
  406132:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  406136:	d102      	bne.n	40613e <__aeabi_dcmpun+0x26>
  406138:	f04f 0000 	mov.w	r0, #0
  40613c:	4770      	bx	lr
  40613e:	f04f 0001 	mov.w	r0, #1
  406142:	4770      	bx	lr

00406144 <__aeabi_d2f>:
  406144:	ea4f 0241 	mov.w	r2, r1, lsl #1
  406148:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  40614c:	bf24      	itt	cs
  40614e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  406152:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  406156:	d90d      	bls.n	406174 <__aeabi_d2f+0x30>
  406158:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40615c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  406160:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  406164:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  406168:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  40616c:	bf08      	it	eq
  40616e:	f020 0001 	biceq.w	r0, r0, #1
  406172:	4770      	bx	lr
  406174:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  406178:	d121      	bne.n	4061be <__aeabi_d2f+0x7a>
  40617a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  40617e:	bfbc      	itt	lt
  406180:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  406184:	4770      	bxlt	lr
  406186:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40618a:	ea4f 5252 	mov.w	r2, r2, lsr #21
  40618e:	f1c2 0218 	rsb	r2, r2, #24
  406192:	f1c2 0c20 	rsb	ip, r2, #32
  406196:	fa10 f30c 	lsls.w	r3, r0, ip
  40619a:	fa20 f002 	lsr.w	r0, r0, r2
  40619e:	bf18      	it	ne
  4061a0:	f040 0001 	orrne.w	r0, r0, #1
  4061a4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4061a8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  4061ac:	fa03 fc0c 	lsl.w	ip, r3, ip
  4061b0:	ea40 000c 	orr.w	r0, r0, ip
  4061b4:	fa23 f302 	lsr.w	r3, r3, r2
  4061b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
  4061bc:	e7cc      	b.n	406158 <__aeabi_d2f+0x14>
  4061be:	ea7f 5362 	mvns.w	r3, r2, asr #21
  4061c2:	d107      	bne.n	4061d4 <__aeabi_d2f+0x90>
  4061c4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  4061c8:	bf1e      	ittt	ne
  4061ca:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  4061ce:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  4061d2:	4770      	bxne	lr
  4061d4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  4061d8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  4061dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4061e0:	4770      	bx	lr
  4061e2:	bf00      	nop

004061e4 <__aeabi_frsub>:
  4061e4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  4061e8:	e002      	b.n	4061f0 <__addsf3>
  4061ea:	bf00      	nop

004061ec <__aeabi_fsub>:
  4061ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

004061f0 <__addsf3>:
  4061f0:	0042      	lsls	r2, r0, #1
  4061f2:	bf1f      	itttt	ne
  4061f4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  4061f8:	ea92 0f03 	teqne	r2, r3
  4061fc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  406200:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  406204:	d06a      	beq.n	4062dc <__addsf3+0xec>
  406206:	ea4f 6212 	mov.w	r2, r2, lsr #24
  40620a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  40620e:	bfc1      	itttt	gt
  406210:	18d2      	addgt	r2, r2, r3
  406212:	4041      	eorgt	r1, r0
  406214:	4048      	eorgt	r0, r1
  406216:	4041      	eorgt	r1, r0
  406218:	bfb8      	it	lt
  40621a:	425b      	neglt	r3, r3
  40621c:	2b19      	cmp	r3, #25
  40621e:	bf88      	it	hi
  406220:	4770      	bxhi	lr
  406222:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  406226:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40622a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  40622e:	bf18      	it	ne
  406230:	4240      	negne	r0, r0
  406232:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  406236:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  40623a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  40623e:	bf18      	it	ne
  406240:	4249      	negne	r1, r1
  406242:	ea92 0f03 	teq	r2, r3
  406246:	d03f      	beq.n	4062c8 <__addsf3+0xd8>
  406248:	f1a2 0201 	sub.w	r2, r2, #1
  40624c:	fa41 fc03 	asr.w	ip, r1, r3
  406250:	eb10 000c 	adds.w	r0, r0, ip
  406254:	f1c3 0320 	rsb	r3, r3, #32
  406258:	fa01 f103 	lsl.w	r1, r1, r3
  40625c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  406260:	d502      	bpl.n	406268 <__addsf3+0x78>
  406262:	4249      	negs	r1, r1
  406264:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  406268:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  40626c:	d313      	bcc.n	406296 <__addsf3+0xa6>
  40626e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  406272:	d306      	bcc.n	406282 <__addsf3+0x92>
  406274:	0840      	lsrs	r0, r0, #1
  406276:	ea4f 0131 	mov.w	r1, r1, rrx
  40627a:	f102 0201 	add.w	r2, r2, #1
  40627e:	2afe      	cmp	r2, #254	; 0xfe
  406280:	d251      	bcs.n	406326 <__addsf3+0x136>
  406282:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  406286:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  40628a:	bf08      	it	eq
  40628c:	f020 0001 	biceq.w	r0, r0, #1
  406290:	ea40 0003 	orr.w	r0, r0, r3
  406294:	4770      	bx	lr
  406296:	0049      	lsls	r1, r1, #1
  406298:	eb40 0000 	adc.w	r0, r0, r0
  40629c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  4062a0:	f1a2 0201 	sub.w	r2, r2, #1
  4062a4:	d1ed      	bne.n	406282 <__addsf3+0x92>
  4062a6:	fab0 fc80 	clz	ip, r0
  4062aa:	f1ac 0c08 	sub.w	ip, ip, #8
  4062ae:	ebb2 020c 	subs.w	r2, r2, ip
  4062b2:	fa00 f00c 	lsl.w	r0, r0, ip
  4062b6:	bfaa      	itet	ge
  4062b8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  4062bc:	4252      	neglt	r2, r2
  4062be:	4318      	orrge	r0, r3
  4062c0:	bfbc      	itt	lt
  4062c2:	40d0      	lsrlt	r0, r2
  4062c4:	4318      	orrlt	r0, r3
  4062c6:	4770      	bx	lr
  4062c8:	f092 0f00 	teq	r2, #0
  4062cc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  4062d0:	bf06      	itte	eq
  4062d2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  4062d6:	3201      	addeq	r2, #1
  4062d8:	3b01      	subne	r3, #1
  4062da:	e7b5      	b.n	406248 <__addsf3+0x58>
  4062dc:	ea4f 0341 	mov.w	r3, r1, lsl #1
  4062e0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  4062e4:	bf18      	it	ne
  4062e6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  4062ea:	d021      	beq.n	406330 <__addsf3+0x140>
  4062ec:	ea92 0f03 	teq	r2, r3
  4062f0:	d004      	beq.n	4062fc <__addsf3+0x10c>
  4062f2:	f092 0f00 	teq	r2, #0
  4062f6:	bf08      	it	eq
  4062f8:	4608      	moveq	r0, r1
  4062fa:	4770      	bx	lr
  4062fc:	ea90 0f01 	teq	r0, r1
  406300:	bf1c      	itt	ne
  406302:	2000      	movne	r0, #0
  406304:	4770      	bxne	lr
  406306:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  40630a:	d104      	bne.n	406316 <__addsf3+0x126>
  40630c:	0040      	lsls	r0, r0, #1
  40630e:	bf28      	it	cs
  406310:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  406314:	4770      	bx	lr
  406316:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  40631a:	bf3c      	itt	cc
  40631c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  406320:	4770      	bxcc	lr
  406322:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  406326:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  40632a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40632e:	4770      	bx	lr
  406330:	ea7f 6222 	mvns.w	r2, r2, asr #24
  406334:	bf16      	itet	ne
  406336:	4608      	movne	r0, r1
  406338:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  40633c:	4601      	movne	r1, r0
  40633e:	0242      	lsls	r2, r0, #9
  406340:	bf06      	itte	eq
  406342:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  406346:	ea90 0f01 	teqeq	r0, r1
  40634a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  40634e:	4770      	bx	lr

00406350 <__aeabi_ui2f>:
  406350:	f04f 0300 	mov.w	r3, #0
  406354:	e004      	b.n	406360 <__aeabi_i2f+0x8>
  406356:	bf00      	nop

00406358 <__aeabi_i2f>:
  406358:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  40635c:	bf48      	it	mi
  40635e:	4240      	negmi	r0, r0
  406360:	ea5f 0c00 	movs.w	ip, r0
  406364:	bf08      	it	eq
  406366:	4770      	bxeq	lr
  406368:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  40636c:	4601      	mov	r1, r0
  40636e:	f04f 0000 	mov.w	r0, #0
  406372:	e01c      	b.n	4063ae <__aeabi_l2f+0x2a>

00406374 <__aeabi_ul2f>:
  406374:	ea50 0201 	orrs.w	r2, r0, r1
  406378:	bf08      	it	eq
  40637a:	4770      	bxeq	lr
  40637c:	f04f 0300 	mov.w	r3, #0
  406380:	e00a      	b.n	406398 <__aeabi_l2f+0x14>
  406382:	bf00      	nop

00406384 <__aeabi_l2f>:
  406384:	ea50 0201 	orrs.w	r2, r0, r1
  406388:	bf08      	it	eq
  40638a:	4770      	bxeq	lr
  40638c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  406390:	d502      	bpl.n	406398 <__aeabi_l2f+0x14>
  406392:	4240      	negs	r0, r0
  406394:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  406398:	ea5f 0c01 	movs.w	ip, r1
  40639c:	bf02      	ittt	eq
  40639e:	4684      	moveq	ip, r0
  4063a0:	4601      	moveq	r1, r0
  4063a2:	2000      	moveq	r0, #0
  4063a4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  4063a8:	bf08      	it	eq
  4063aa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  4063ae:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  4063b2:	fabc f28c 	clz	r2, ip
  4063b6:	3a08      	subs	r2, #8
  4063b8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  4063bc:	db10      	blt.n	4063e0 <__aeabi_l2f+0x5c>
  4063be:	fa01 fc02 	lsl.w	ip, r1, r2
  4063c2:	4463      	add	r3, ip
  4063c4:	fa00 fc02 	lsl.w	ip, r0, r2
  4063c8:	f1c2 0220 	rsb	r2, r2, #32
  4063cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4063d0:	fa20 f202 	lsr.w	r2, r0, r2
  4063d4:	eb43 0002 	adc.w	r0, r3, r2
  4063d8:	bf08      	it	eq
  4063da:	f020 0001 	biceq.w	r0, r0, #1
  4063de:	4770      	bx	lr
  4063e0:	f102 0220 	add.w	r2, r2, #32
  4063e4:	fa01 fc02 	lsl.w	ip, r1, r2
  4063e8:	f1c2 0220 	rsb	r2, r2, #32
  4063ec:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  4063f0:	fa21 f202 	lsr.w	r2, r1, r2
  4063f4:	eb43 0002 	adc.w	r0, r3, r2
  4063f8:	bf08      	it	eq
  4063fa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  4063fe:	4770      	bx	lr

00406400 <__aeabi_fmul>:
  406400:	f04f 0cff 	mov.w	ip, #255	; 0xff
  406404:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  406408:	bf1e      	ittt	ne
  40640a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  40640e:	ea92 0f0c 	teqne	r2, ip
  406412:	ea93 0f0c 	teqne	r3, ip
  406416:	d06f      	beq.n	4064f8 <__aeabi_fmul+0xf8>
  406418:	441a      	add	r2, r3
  40641a:	ea80 0c01 	eor.w	ip, r0, r1
  40641e:	0240      	lsls	r0, r0, #9
  406420:	bf18      	it	ne
  406422:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  406426:	d01e      	beq.n	406466 <__aeabi_fmul+0x66>
  406428:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  40642c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  406430:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  406434:	fba0 3101 	umull	r3, r1, r0, r1
  406438:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  40643c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  406440:	bf3e      	ittt	cc
  406442:	0049      	lslcc	r1, r1, #1
  406444:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  406448:	005b      	lslcc	r3, r3, #1
  40644a:	ea40 0001 	orr.w	r0, r0, r1
  40644e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  406452:	2afd      	cmp	r2, #253	; 0xfd
  406454:	d81d      	bhi.n	406492 <__aeabi_fmul+0x92>
  406456:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  40645a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  40645e:	bf08      	it	eq
  406460:	f020 0001 	biceq.w	r0, r0, #1
  406464:	4770      	bx	lr
  406466:	f090 0f00 	teq	r0, #0
  40646a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  40646e:	bf08      	it	eq
  406470:	0249      	lsleq	r1, r1, #9
  406472:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  406476:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  40647a:	3a7f      	subs	r2, #127	; 0x7f
  40647c:	bfc2      	ittt	gt
  40647e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  406482:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  406486:	4770      	bxgt	lr
  406488:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40648c:	f04f 0300 	mov.w	r3, #0
  406490:	3a01      	subs	r2, #1
  406492:	dc5d      	bgt.n	406550 <__aeabi_fmul+0x150>
  406494:	f112 0f19 	cmn.w	r2, #25
  406498:	bfdc      	itt	le
  40649a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  40649e:	4770      	bxle	lr
  4064a0:	f1c2 0200 	rsb	r2, r2, #0
  4064a4:	0041      	lsls	r1, r0, #1
  4064a6:	fa21 f102 	lsr.w	r1, r1, r2
  4064aa:	f1c2 0220 	rsb	r2, r2, #32
  4064ae:	fa00 fc02 	lsl.w	ip, r0, r2
  4064b2:	ea5f 0031 	movs.w	r0, r1, rrx
  4064b6:	f140 0000 	adc.w	r0, r0, #0
  4064ba:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  4064be:	bf08      	it	eq
  4064c0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  4064c4:	4770      	bx	lr
  4064c6:	f092 0f00 	teq	r2, #0
  4064ca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  4064ce:	bf02      	ittt	eq
  4064d0:	0040      	lsleq	r0, r0, #1
  4064d2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  4064d6:	3a01      	subeq	r2, #1
  4064d8:	d0f9      	beq.n	4064ce <__aeabi_fmul+0xce>
  4064da:	ea40 000c 	orr.w	r0, r0, ip
  4064de:	f093 0f00 	teq	r3, #0
  4064e2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  4064e6:	bf02      	ittt	eq
  4064e8:	0049      	lsleq	r1, r1, #1
  4064ea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  4064ee:	3b01      	subeq	r3, #1
  4064f0:	d0f9      	beq.n	4064e6 <__aeabi_fmul+0xe6>
  4064f2:	ea41 010c 	orr.w	r1, r1, ip
  4064f6:	e78f      	b.n	406418 <__aeabi_fmul+0x18>
  4064f8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  4064fc:	ea92 0f0c 	teq	r2, ip
  406500:	bf18      	it	ne
  406502:	ea93 0f0c 	teqne	r3, ip
  406506:	d00a      	beq.n	40651e <__aeabi_fmul+0x11e>
  406508:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  40650c:	bf18      	it	ne
  40650e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  406512:	d1d8      	bne.n	4064c6 <__aeabi_fmul+0xc6>
  406514:	ea80 0001 	eor.w	r0, r0, r1
  406518:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  40651c:	4770      	bx	lr
  40651e:	f090 0f00 	teq	r0, #0
  406522:	bf17      	itett	ne
  406524:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  406528:	4608      	moveq	r0, r1
  40652a:	f091 0f00 	teqne	r1, #0
  40652e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  406532:	d014      	beq.n	40655e <__aeabi_fmul+0x15e>
  406534:	ea92 0f0c 	teq	r2, ip
  406538:	d101      	bne.n	40653e <__aeabi_fmul+0x13e>
  40653a:	0242      	lsls	r2, r0, #9
  40653c:	d10f      	bne.n	40655e <__aeabi_fmul+0x15e>
  40653e:	ea93 0f0c 	teq	r3, ip
  406542:	d103      	bne.n	40654c <__aeabi_fmul+0x14c>
  406544:	024b      	lsls	r3, r1, #9
  406546:	bf18      	it	ne
  406548:	4608      	movne	r0, r1
  40654a:	d108      	bne.n	40655e <__aeabi_fmul+0x15e>
  40654c:	ea80 0001 	eor.w	r0, r0, r1
  406550:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  406554:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  406558:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40655c:	4770      	bx	lr
  40655e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  406562:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  406566:	4770      	bx	lr

00406568 <__aeabi_fdiv>:
  406568:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40656c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  406570:	bf1e      	ittt	ne
  406572:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  406576:	ea92 0f0c 	teqne	r2, ip
  40657a:	ea93 0f0c 	teqne	r3, ip
  40657e:	d069      	beq.n	406654 <__aeabi_fdiv+0xec>
  406580:	eba2 0203 	sub.w	r2, r2, r3
  406584:	ea80 0c01 	eor.w	ip, r0, r1
  406588:	0249      	lsls	r1, r1, #9
  40658a:	ea4f 2040 	mov.w	r0, r0, lsl #9
  40658e:	d037      	beq.n	406600 <__aeabi_fdiv+0x98>
  406590:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  406594:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  406598:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  40659c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  4065a0:	428b      	cmp	r3, r1
  4065a2:	bf38      	it	cc
  4065a4:	005b      	lslcc	r3, r3, #1
  4065a6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  4065aa:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  4065ae:	428b      	cmp	r3, r1
  4065b0:	bf24      	itt	cs
  4065b2:	1a5b      	subcs	r3, r3, r1
  4065b4:	ea40 000c 	orrcs.w	r0, r0, ip
  4065b8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  4065bc:	bf24      	itt	cs
  4065be:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  4065c2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4065c6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  4065ca:	bf24      	itt	cs
  4065cc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  4065d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4065d4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  4065d8:	bf24      	itt	cs
  4065da:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  4065de:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4065e2:	011b      	lsls	r3, r3, #4
  4065e4:	bf18      	it	ne
  4065e6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  4065ea:	d1e0      	bne.n	4065ae <__aeabi_fdiv+0x46>
  4065ec:	2afd      	cmp	r2, #253	; 0xfd
  4065ee:	f63f af50 	bhi.w	406492 <__aeabi_fmul+0x92>
  4065f2:	428b      	cmp	r3, r1
  4065f4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  4065f8:	bf08      	it	eq
  4065fa:	f020 0001 	biceq.w	r0, r0, #1
  4065fe:	4770      	bx	lr
  406600:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  406604:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  406608:	327f      	adds	r2, #127	; 0x7f
  40660a:	bfc2      	ittt	gt
  40660c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  406610:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  406614:	4770      	bxgt	lr
  406616:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40661a:	f04f 0300 	mov.w	r3, #0
  40661e:	3a01      	subs	r2, #1
  406620:	e737      	b.n	406492 <__aeabi_fmul+0x92>
  406622:	f092 0f00 	teq	r2, #0
  406626:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  40662a:	bf02      	ittt	eq
  40662c:	0040      	lsleq	r0, r0, #1
  40662e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  406632:	3a01      	subeq	r2, #1
  406634:	d0f9      	beq.n	40662a <__aeabi_fdiv+0xc2>
  406636:	ea40 000c 	orr.w	r0, r0, ip
  40663a:	f093 0f00 	teq	r3, #0
  40663e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  406642:	bf02      	ittt	eq
  406644:	0049      	lsleq	r1, r1, #1
  406646:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  40664a:	3b01      	subeq	r3, #1
  40664c:	d0f9      	beq.n	406642 <__aeabi_fdiv+0xda>
  40664e:	ea41 010c 	orr.w	r1, r1, ip
  406652:	e795      	b.n	406580 <__aeabi_fdiv+0x18>
  406654:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  406658:	ea92 0f0c 	teq	r2, ip
  40665c:	d108      	bne.n	406670 <__aeabi_fdiv+0x108>
  40665e:	0242      	lsls	r2, r0, #9
  406660:	f47f af7d 	bne.w	40655e <__aeabi_fmul+0x15e>
  406664:	ea93 0f0c 	teq	r3, ip
  406668:	f47f af70 	bne.w	40654c <__aeabi_fmul+0x14c>
  40666c:	4608      	mov	r0, r1
  40666e:	e776      	b.n	40655e <__aeabi_fmul+0x15e>
  406670:	ea93 0f0c 	teq	r3, ip
  406674:	d104      	bne.n	406680 <__aeabi_fdiv+0x118>
  406676:	024b      	lsls	r3, r1, #9
  406678:	f43f af4c 	beq.w	406514 <__aeabi_fmul+0x114>
  40667c:	4608      	mov	r0, r1
  40667e:	e76e      	b.n	40655e <__aeabi_fmul+0x15e>
  406680:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  406684:	bf18      	it	ne
  406686:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  40668a:	d1ca      	bne.n	406622 <__aeabi_fdiv+0xba>
  40668c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  406690:	f47f af5c 	bne.w	40654c <__aeabi_fmul+0x14c>
  406694:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  406698:	f47f af3c 	bne.w	406514 <__aeabi_fmul+0x114>
  40669c:	e75f      	b.n	40655e <__aeabi_fmul+0x15e>
  40669e:	bf00      	nop

004066a0 <__gesf2>:
  4066a0:	f04f 3cff 	mov.w	ip, #4294967295
  4066a4:	e006      	b.n	4066b4 <__cmpsf2+0x4>
  4066a6:	bf00      	nop

004066a8 <__lesf2>:
  4066a8:	f04f 0c01 	mov.w	ip, #1
  4066ac:	e002      	b.n	4066b4 <__cmpsf2+0x4>
  4066ae:	bf00      	nop

004066b0 <__cmpsf2>:
  4066b0:	f04f 0c01 	mov.w	ip, #1
  4066b4:	f84d cd04 	str.w	ip, [sp, #-4]!
  4066b8:	ea4f 0240 	mov.w	r2, r0, lsl #1
  4066bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
  4066c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  4066c4:	bf18      	it	ne
  4066c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  4066ca:	d011      	beq.n	4066f0 <__cmpsf2+0x40>
  4066cc:	b001      	add	sp, #4
  4066ce:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
  4066d2:	bf18      	it	ne
  4066d4:	ea90 0f01 	teqne	r0, r1
  4066d8:	bf58      	it	pl
  4066da:	ebb2 0003 	subspl.w	r0, r2, r3
  4066de:	bf88      	it	hi
  4066e0:	17c8      	asrhi	r0, r1, #31
  4066e2:	bf38      	it	cc
  4066e4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
  4066e8:	bf18      	it	ne
  4066ea:	f040 0001 	orrne.w	r0, r0, #1
  4066ee:	4770      	bx	lr
  4066f0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  4066f4:	d102      	bne.n	4066fc <__cmpsf2+0x4c>
  4066f6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  4066fa:	d105      	bne.n	406708 <__cmpsf2+0x58>
  4066fc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  406700:	d1e4      	bne.n	4066cc <__cmpsf2+0x1c>
  406702:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  406706:	d0e1      	beq.n	4066cc <__cmpsf2+0x1c>
  406708:	f85d 0b04 	ldr.w	r0, [sp], #4
  40670c:	4770      	bx	lr
  40670e:	bf00      	nop

00406710 <__aeabi_cfrcmple>:
  406710:	4684      	mov	ip, r0
  406712:	4608      	mov	r0, r1
  406714:	4661      	mov	r1, ip
  406716:	e7ff      	b.n	406718 <__aeabi_cfcmpeq>

00406718 <__aeabi_cfcmpeq>:
  406718:	b50f      	push	{r0, r1, r2, r3, lr}
  40671a:	f7ff ffc9 	bl	4066b0 <__cmpsf2>
  40671e:	2800      	cmp	r0, #0
  406720:	bf48      	it	mi
  406722:	f110 0f00 	cmnmi.w	r0, #0
  406726:	bd0f      	pop	{r0, r1, r2, r3, pc}

00406728 <__aeabi_fcmpeq>:
  406728:	f84d ed08 	str.w	lr, [sp, #-8]!
  40672c:	f7ff fff4 	bl	406718 <__aeabi_cfcmpeq>
  406730:	bf0c      	ite	eq
  406732:	2001      	moveq	r0, #1
  406734:	2000      	movne	r0, #0
  406736:	f85d fb08 	ldr.w	pc, [sp], #8
  40673a:	bf00      	nop

0040673c <__aeabi_fcmplt>:
  40673c:	f84d ed08 	str.w	lr, [sp, #-8]!
  406740:	f7ff ffea 	bl	406718 <__aeabi_cfcmpeq>
  406744:	bf34      	ite	cc
  406746:	2001      	movcc	r0, #1
  406748:	2000      	movcs	r0, #0
  40674a:	f85d fb08 	ldr.w	pc, [sp], #8
  40674e:	bf00      	nop

00406750 <__aeabi_fcmple>:
  406750:	f84d ed08 	str.w	lr, [sp, #-8]!
  406754:	f7ff ffe0 	bl	406718 <__aeabi_cfcmpeq>
  406758:	bf94      	ite	ls
  40675a:	2001      	movls	r0, #1
  40675c:	2000      	movhi	r0, #0
  40675e:	f85d fb08 	ldr.w	pc, [sp], #8
  406762:	bf00      	nop

00406764 <__aeabi_fcmpge>:
  406764:	f84d ed08 	str.w	lr, [sp, #-8]!
  406768:	f7ff ffd2 	bl	406710 <__aeabi_cfrcmple>
  40676c:	bf94      	ite	ls
  40676e:	2001      	movls	r0, #1
  406770:	2000      	movhi	r0, #0
  406772:	f85d fb08 	ldr.w	pc, [sp], #8
  406776:	bf00      	nop

00406778 <__aeabi_fcmpgt>:
  406778:	f84d ed08 	str.w	lr, [sp, #-8]!
  40677c:	f7ff ffc8 	bl	406710 <__aeabi_cfrcmple>
  406780:	bf34      	ite	cc
  406782:	2001      	movcc	r0, #1
  406784:	2000      	movcs	r0, #0
  406786:	f85d fb08 	ldr.w	pc, [sp], #8
  40678a:	bf00      	nop

0040678c <__aeabi_fcmpun>:
  40678c:	ea4f 0240 	mov.w	r2, r0, lsl #1
  406790:	ea4f 0341 	mov.w	r3, r1, lsl #1
  406794:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  406798:	d102      	bne.n	4067a0 <__aeabi_fcmpun+0x14>
  40679a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  40679e:	d108      	bne.n	4067b2 <__aeabi_fcmpun+0x26>
  4067a0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  4067a4:	d102      	bne.n	4067ac <__aeabi_fcmpun+0x20>
  4067a6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  4067aa:	d102      	bne.n	4067b2 <__aeabi_fcmpun+0x26>
  4067ac:	f04f 0000 	mov.w	r0, #0
  4067b0:	4770      	bx	lr
  4067b2:	f04f 0001 	mov.w	r0, #1
  4067b6:	4770      	bx	lr

004067b8 <__aeabi_f2iz>:
  4067b8:	ea4f 0240 	mov.w	r2, r0, lsl #1
  4067bc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  4067c0:	d30f      	bcc.n	4067e2 <__aeabi_f2iz+0x2a>
  4067c2:	f04f 039e 	mov.w	r3, #158	; 0x9e
  4067c6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  4067ca:	d90d      	bls.n	4067e8 <__aeabi_f2iz+0x30>
  4067cc:	ea4f 2300 	mov.w	r3, r0, lsl #8
  4067d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4067d4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  4067d8:	fa23 f002 	lsr.w	r0, r3, r2
  4067dc:	bf18      	it	ne
  4067de:	4240      	negne	r0, r0
  4067e0:	4770      	bx	lr
  4067e2:	f04f 0000 	mov.w	r0, #0
  4067e6:	4770      	bx	lr
  4067e8:	f112 0f61 	cmn.w	r2, #97	; 0x61
  4067ec:	d101      	bne.n	4067f2 <__aeabi_f2iz+0x3a>
  4067ee:	0242      	lsls	r2, r0, #9
  4067f0:	d105      	bne.n	4067fe <__aeabi_f2iz+0x46>
  4067f2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
  4067f6:	bf08      	it	eq
  4067f8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4067fc:	4770      	bx	lr
  4067fe:	f04f 0000 	mov.w	r0, #0
  406802:	4770      	bx	lr

00406804 <__errno>:
  406804:	4b01      	ldr	r3, [pc, #4]	; (40680c <__errno+0x8>)
  406806:	6818      	ldr	r0, [r3, #0]
  406808:	4770      	bx	lr
  40680a:	bf00      	nop
  40680c:	20400010 	.word	0x20400010

00406810 <__libc_init_array>:
  406810:	b570      	push	{r4, r5, r6, lr}
  406812:	4e0f      	ldr	r6, [pc, #60]	; (406850 <__libc_init_array+0x40>)
  406814:	4d0f      	ldr	r5, [pc, #60]	; (406854 <__libc_init_array+0x44>)
  406816:	1b76      	subs	r6, r6, r5
  406818:	10b6      	asrs	r6, r6, #2
  40681a:	bf18      	it	ne
  40681c:	2400      	movne	r4, #0
  40681e:	d005      	beq.n	40682c <__libc_init_array+0x1c>
  406820:	3401      	adds	r4, #1
  406822:	f855 3b04 	ldr.w	r3, [r5], #4
  406826:	4798      	blx	r3
  406828:	42a6      	cmp	r6, r4
  40682a:	d1f9      	bne.n	406820 <__libc_init_array+0x10>
  40682c:	4e0a      	ldr	r6, [pc, #40]	; (406858 <__libc_init_array+0x48>)
  40682e:	4d0b      	ldr	r5, [pc, #44]	; (40685c <__libc_init_array+0x4c>)
  406830:	1b76      	subs	r6, r6, r5
  406832:	f005 fbc9 	bl	40bfc8 <_init>
  406836:	10b6      	asrs	r6, r6, #2
  406838:	bf18      	it	ne
  40683a:	2400      	movne	r4, #0
  40683c:	d006      	beq.n	40684c <__libc_init_array+0x3c>
  40683e:	3401      	adds	r4, #1
  406840:	f855 3b04 	ldr.w	r3, [r5], #4
  406844:	4798      	blx	r3
  406846:	42a6      	cmp	r6, r4
  406848:	d1f9      	bne.n	40683e <__libc_init_array+0x2e>
  40684a:	bd70      	pop	{r4, r5, r6, pc}
  40684c:	bd70      	pop	{r4, r5, r6, pc}
  40684e:	bf00      	nop
  406850:	0040bfd4 	.word	0x0040bfd4
  406854:	0040bfd4 	.word	0x0040bfd4
  406858:	0040bfdc 	.word	0x0040bfdc
  40685c:	0040bfd4 	.word	0x0040bfd4

00406860 <malloc>:
  406860:	4b02      	ldr	r3, [pc, #8]	; (40686c <malloc+0xc>)
  406862:	4601      	mov	r1, r0
  406864:	6818      	ldr	r0, [r3, #0]
  406866:	f000 b80b 	b.w	406880 <_malloc_r>
  40686a:	bf00      	nop
  40686c:	20400010 	.word	0x20400010

00406870 <free>:
  406870:	4b02      	ldr	r3, [pc, #8]	; (40687c <free+0xc>)
  406872:	4601      	mov	r1, r0
  406874:	6818      	ldr	r0, [r3, #0]
  406876:	f003 ba2b 	b.w	409cd0 <_free_r>
  40687a:	bf00      	nop
  40687c:	20400010 	.word	0x20400010

00406880 <_malloc_r>:
  406880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406884:	f101 060b 	add.w	r6, r1, #11
  406888:	2e16      	cmp	r6, #22
  40688a:	b083      	sub	sp, #12
  40688c:	4605      	mov	r5, r0
  40688e:	f240 809e 	bls.w	4069ce <_malloc_r+0x14e>
  406892:	f036 0607 	bics.w	r6, r6, #7
  406896:	f100 80bd 	bmi.w	406a14 <_malloc_r+0x194>
  40689a:	42b1      	cmp	r1, r6
  40689c:	f200 80ba 	bhi.w	406a14 <_malloc_r+0x194>
  4068a0:	f000 fb86 	bl	406fb0 <__malloc_lock>
  4068a4:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  4068a8:	f0c0 8293 	bcc.w	406dd2 <_malloc_r+0x552>
  4068ac:	0a73      	lsrs	r3, r6, #9
  4068ae:	f000 80b8 	beq.w	406a22 <_malloc_r+0x1a2>
  4068b2:	2b04      	cmp	r3, #4
  4068b4:	f200 8179 	bhi.w	406baa <_malloc_r+0x32a>
  4068b8:	09b3      	lsrs	r3, r6, #6
  4068ba:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4068be:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4068c2:	00c3      	lsls	r3, r0, #3
  4068c4:	4fbf      	ldr	r7, [pc, #764]	; (406bc4 <_malloc_r+0x344>)
  4068c6:	443b      	add	r3, r7
  4068c8:	f1a3 0108 	sub.w	r1, r3, #8
  4068cc:	685c      	ldr	r4, [r3, #4]
  4068ce:	42a1      	cmp	r1, r4
  4068d0:	d106      	bne.n	4068e0 <_malloc_r+0x60>
  4068d2:	e00c      	b.n	4068ee <_malloc_r+0x6e>
  4068d4:	2a00      	cmp	r2, #0
  4068d6:	f280 80aa 	bge.w	406a2e <_malloc_r+0x1ae>
  4068da:	68e4      	ldr	r4, [r4, #12]
  4068dc:	42a1      	cmp	r1, r4
  4068de:	d006      	beq.n	4068ee <_malloc_r+0x6e>
  4068e0:	6863      	ldr	r3, [r4, #4]
  4068e2:	f023 0303 	bic.w	r3, r3, #3
  4068e6:	1b9a      	subs	r2, r3, r6
  4068e8:	2a0f      	cmp	r2, #15
  4068ea:	ddf3      	ble.n	4068d4 <_malloc_r+0x54>
  4068ec:	4670      	mov	r0, lr
  4068ee:	693c      	ldr	r4, [r7, #16]
  4068f0:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 406bd8 <_malloc_r+0x358>
  4068f4:	4574      	cmp	r4, lr
  4068f6:	f000 81ab 	beq.w	406c50 <_malloc_r+0x3d0>
  4068fa:	6863      	ldr	r3, [r4, #4]
  4068fc:	f023 0303 	bic.w	r3, r3, #3
  406900:	1b9a      	subs	r2, r3, r6
  406902:	2a0f      	cmp	r2, #15
  406904:	f300 8190 	bgt.w	406c28 <_malloc_r+0x3a8>
  406908:	2a00      	cmp	r2, #0
  40690a:	f8c7 e014 	str.w	lr, [r7, #20]
  40690e:	f8c7 e010 	str.w	lr, [r7, #16]
  406912:	f280 809d 	bge.w	406a50 <_malloc_r+0x1d0>
  406916:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40691a:	f080 8161 	bcs.w	406be0 <_malloc_r+0x360>
  40691e:	08db      	lsrs	r3, r3, #3
  406920:	f103 0c01 	add.w	ip, r3, #1
  406924:	1099      	asrs	r1, r3, #2
  406926:	687a      	ldr	r2, [r7, #4]
  406928:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  40692c:	f8c4 8008 	str.w	r8, [r4, #8]
  406930:	2301      	movs	r3, #1
  406932:	408b      	lsls	r3, r1
  406934:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  406938:	4313      	orrs	r3, r2
  40693a:	3908      	subs	r1, #8
  40693c:	60e1      	str	r1, [r4, #12]
  40693e:	607b      	str	r3, [r7, #4]
  406940:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  406944:	f8c8 400c 	str.w	r4, [r8, #12]
  406948:	1082      	asrs	r2, r0, #2
  40694a:	2401      	movs	r4, #1
  40694c:	4094      	lsls	r4, r2
  40694e:	429c      	cmp	r4, r3
  406950:	f200 808b 	bhi.w	406a6a <_malloc_r+0x1ea>
  406954:	421c      	tst	r4, r3
  406956:	d106      	bne.n	406966 <_malloc_r+0xe6>
  406958:	f020 0003 	bic.w	r0, r0, #3
  40695c:	0064      	lsls	r4, r4, #1
  40695e:	421c      	tst	r4, r3
  406960:	f100 0004 	add.w	r0, r0, #4
  406964:	d0fa      	beq.n	40695c <_malloc_r+0xdc>
  406966:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40696a:	46cc      	mov	ip, r9
  40696c:	4680      	mov	r8, r0
  40696e:	f8dc 300c 	ldr.w	r3, [ip, #12]
  406972:	459c      	cmp	ip, r3
  406974:	d107      	bne.n	406986 <_malloc_r+0x106>
  406976:	e16d      	b.n	406c54 <_malloc_r+0x3d4>
  406978:	2a00      	cmp	r2, #0
  40697a:	f280 817b 	bge.w	406c74 <_malloc_r+0x3f4>
  40697e:	68db      	ldr	r3, [r3, #12]
  406980:	459c      	cmp	ip, r3
  406982:	f000 8167 	beq.w	406c54 <_malloc_r+0x3d4>
  406986:	6859      	ldr	r1, [r3, #4]
  406988:	f021 0103 	bic.w	r1, r1, #3
  40698c:	1b8a      	subs	r2, r1, r6
  40698e:	2a0f      	cmp	r2, #15
  406990:	ddf2      	ble.n	406978 <_malloc_r+0xf8>
  406992:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  406996:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40699a:	9300      	str	r3, [sp, #0]
  40699c:	199c      	adds	r4, r3, r6
  40699e:	4628      	mov	r0, r5
  4069a0:	f046 0601 	orr.w	r6, r6, #1
  4069a4:	f042 0501 	orr.w	r5, r2, #1
  4069a8:	605e      	str	r6, [r3, #4]
  4069aa:	f8c8 c00c 	str.w	ip, [r8, #12]
  4069ae:	f8cc 8008 	str.w	r8, [ip, #8]
  4069b2:	617c      	str	r4, [r7, #20]
  4069b4:	613c      	str	r4, [r7, #16]
  4069b6:	f8c4 e00c 	str.w	lr, [r4, #12]
  4069ba:	f8c4 e008 	str.w	lr, [r4, #8]
  4069be:	6065      	str	r5, [r4, #4]
  4069c0:	505a      	str	r2, [r3, r1]
  4069c2:	f000 fafb 	bl	406fbc <__malloc_unlock>
  4069c6:	9b00      	ldr	r3, [sp, #0]
  4069c8:	f103 0408 	add.w	r4, r3, #8
  4069cc:	e01e      	b.n	406a0c <_malloc_r+0x18c>
  4069ce:	2910      	cmp	r1, #16
  4069d0:	d820      	bhi.n	406a14 <_malloc_r+0x194>
  4069d2:	f000 faed 	bl	406fb0 <__malloc_lock>
  4069d6:	2610      	movs	r6, #16
  4069d8:	2318      	movs	r3, #24
  4069da:	2002      	movs	r0, #2
  4069dc:	4f79      	ldr	r7, [pc, #484]	; (406bc4 <_malloc_r+0x344>)
  4069de:	443b      	add	r3, r7
  4069e0:	f1a3 0208 	sub.w	r2, r3, #8
  4069e4:	685c      	ldr	r4, [r3, #4]
  4069e6:	4294      	cmp	r4, r2
  4069e8:	f000 813d 	beq.w	406c66 <_malloc_r+0x3e6>
  4069ec:	6863      	ldr	r3, [r4, #4]
  4069ee:	68e1      	ldr	r1, [r4, #12]
  4069f0:	68a6      	ldr	r6, [r4, #8]
  4069f2:	f023 0303 	bic.w	r3, r3, #3
  4069f6:	4423      	add	r3, r4
  4069f8:	4628      	mov	r0, r5
  4069fa:	685a      	ldr	r2, [r3, #4]
  4069fc:	60f1      	str	r1, [r6, #12]
  4069fe:	f042 0201 	orr.w	r2, r2, #1
  406a02:	608e      	str	r6, [r1, #8]
  406a04:	605a      	str	r2, [r3, #4]
  406a06:	f000 fad9 	bl	406fbc <__malloc_unlock>
  406a0a:	3408      	adds	r4, #8
  406a0c:	4620      	mov	r0, r4
  406a0e:	b003      	add	sp, #12
  406a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406a14:	2400      	movs	r4, #0
  406a16:	230c      	movs	r3, #12
  406a18:	4620      	mov	r0, r4
  406a1a:	602b      	str	r3, [r5, #0]
  406a1c:	b003      	add	sp, #12
  406a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406a22:	2040      	movs	r0, #64	; 0x40
  406a24:	f44f 7300 	mov.w	r3, #512	; 0x200
  406a28:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  406a2c:	e74a      	b.n	4068c4 <_malloc_r+0x44>
  406a2e:	4423      	add	r3, r4
  406a30:	68e1      	ldr	r1, [r4, #12]
  406a32:	685a      	ldr	r2, [r3, #4]
  406a34:	68a6      	ldr	r6, [r4, #8]
  406a36:	f042 0201 	orr.w	r2, r2, #1
  406a3a:	60f1      	str	r1, [r6, #12]
  406a3c:	4628      	mov	r0, r5
  406a3e:	608e      	str	r6, [r1, #8]
  406a40:	605a      	str	r2, [r3, #4]
  406a42:	f000 fabb 	bl	406fbc <__malloc_unlock>
  406a46:	3408      	adds	r4, #8
  406a48:	4620      	mov	r0, r4
  406a4a:	b003      	add	sp, #12
  406a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406a50:	4423      	add	r3, r4
  406a52:	4628      	mov	r0, r5
  406a54:	685a      	ldr	r2, [r3, #4]
  406a56:	f042 0201 	orr.w	r2, r2, #1
  406a5a:	605a      	str	r2, [r3, #4]
  406a5c:	f000 faae 	bl	406fbc <__malloc_unlock>
  406a60:	3408      	adds	r4, #8
  406a62:	4620      	mov	r0, r4
  406a64:	b003      	add	sp, #12
  406a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406a6a:	68bc      	ldr	r4, [r7, #8]
  406a6c:	6863      	ldr	r3, [r4, #4]
  406a6e:	f023 0803 	bic.w	r8, r3, #3
  406a72:	45b0      	cmp	r8, r6
  406a74:	d304      	bcc.n	406a80 <_malloc_r+0x200>
  406a76:	eba8 0306 	sub.w	r3, r8, r6
  406a7a:	2b0f      	cmp	r3, #15
  406a7c:	f300 8085 	bgt.w	406b8a <_malloc_r+0x30a>
  406a80:	f8df 9158 	ldr.w	r9, [pc, #344]	; 406bdc <_malloc_r+0x35c>
  406a84:	4b50      	ldr	r3, [pc, #320]	; (406bc8 <_malloc_r+0x348>)
  406a86:	f8d9 2000 	ldr.w	r2, [r9]
  406a8a:	681b      	ldr	r3, [r3, #0]
  406a8c:	3201      	adds	r2, #1
  406a8e:	4433      	add	r3, r6
  406a90:	eb04 0a08 	add.w	sl, r4, r8
  406a94:	f000 8155 	beq.w	406d42 <_malloc_r+0x4c2>
  406a98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  406a9c:	330f      	adds	r3, #15
  406a9e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  406aa2:	f02b 0b0f 	bic.w	fp, fp, #15
  406aa6:	4659      	mov	r1, fp
  406aa8:	4628      	mov	r0, r5
  406aaa:	f000 faf7 	bl	40709c <_sbrk_r>
  406aae:	1c41      	adds	r1, r0, #1
  406ab0:	4602      	mov	r2, r0
  406ab2:	f000 80fc 	beq.w	406cae <_malloc_r+0x42e>
  406ab6:	4582      	cmp	sl, r0
  406ab8:	f200 80f7 	bhi.w	406caa <_malloc_r+0x42a>
  406abc:	4b43      	ldr	r3, [pc, #268]	; (406bcc <_malloc_r+0x34c>)
  406abe:	6819      	ldr	r1, [r3, #0]
  406ac0:	4459      	add	r1, fp
  406ac2:	6019      	str	r1, [r3, #0]
  406ac4:	f000 814d 	beq.w	406d62 <_malloc_r+0x4e2>
  406ac8:	f8d9 0000 	ldr.w	r0, [r9]
  406acc:	3001      	adds	r0, #1
  406ace:	bf1b      	ittet	ne
  406ad0:	eba2 0a0a 	subne.w	sl, r2, sl
  406ad4:	4451      	addne	r1, sl
  406ad6:	f8c9 2000 	streq.w	r2, [r9]
  406ada:	6019      	strne	r1, [r3, #0]
  406adc:	f012 0107 	ands.w	r1, r2, #7
  406ae0:	f000 8115 	beq.w	406d0e <_malloc_r+0x48e>
  406ae4:	f1c1 0008 	rsb	r0, r1, #8
  406ae8:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  406aec:	4402      	add	r2, r0
  406aee:	3108      	adds	r1, #8
  406af0:	eb02 090b 	add.w	r9, r2, fp
  406af4:	f3c9 090b 	ubfx	r9, r9, #0, #12
  406af8:	eba1 0909 	sub.w	r9, r1, r9
  406afc:	4649      	mov	r1, r9
  406afe:	4628      	mov	r0, r5
  406b00:	9301      	str	r3, [sp, #4]
  406b02:	9200      	str	r2, [sp, #0]
  406b04:	f000 faca 	bl	40709c <_sbrk_r>
  406b08:	1c43      	adds	r3, r0, #1
  406b0a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  406b0e:	f000 8143 	beq.w	406d98 <_malloc_r+0x518>
  406b12:	1a80      	subs	r0, r0, r2
  406b14:	4448      	add	r0, r9
  406b16:	f040 0001 	orr.w	r0, r0, #1
  406b1a:	6819      	ldr	r1, [r3, #0]
  406b1c:	60ba      	str	r2, [r7, #8]
  406b1e:	4449      	add	r1, r9
  406b20:	42bc      	cmp	r4, r7
  406b22:	6050      	str	r0, [r2, #4]
  406b24:	6019      	str	r1, [r3, #0]
  406b26:	d017      	beq.n	406b58 <_malloc_r+0x2d8>
  406b28:	f1b8 0f0f 	cmp.w	r8, #15
  406b2c:	f240 80fb 	bls.w	406d26 <_malloc_r+0x4a6>
  406b30:	6860      	ldr	r0, [r4, #4]
  406b32:	f1a8 020c 	sub.w	r2, r8, #12
  406b36:	f022 0207 	bic.w	r2, r2, #7
  406b3a:	eb04 0e02 	add.w	lr, r4, r2
  406b3e:	f000 0001 	and.w	r0, r0, #1
  406b42:	f04f 0c05 	mov.w	ip, #5
  406b46:	4310      	orrs	r0, r2
  406b48:	2a0f      	cmp	r2, #15
  406b4a:	6060      	str	r0, [r4, #4]
  406b4c:	f8ce c004 	str.w	ip, [lr, #4]
  406b50:	f8ce c008 	str.w	ip, [lr, #8]
  406b54:	f200 8117 	bhi.w	406d86 <_malloc_r+0x506>
  406b58:	4b1d      	ldr	r3, [pc, #116]	; (406bd0 <_malloc_r+0x350>)
  406b5a:	68bc      	ldr	r4, [r7, #8]
  406b5c:	681a      	ldr	r2, [r3, #0]
  406b5e:	4291      	cmp	r1, r2
  406b60:	bf88      	it	hi
  406b62:	6019      	strhi	r1, [r3, #0]
  406b64:	4b1b      	ldr	r3, [pc, #108]	; (406bd4 <_malloc_r+0x354>)
  406b66:	681a      	ldr	r2, [r3, #0]
  406b68:	4291      	cmp	r1, r2
  406b6a:	6862      	ldr	r2, [r4, #4]
  406b6c:	bf88      	it	hi
  406b6e:	6019      	strhi	r1, [r3, #0]
  406b70:	f022 0203 	bic.w	r2, r2, #3
  406b74:	4296      	cmp	r6, r2
  406b76:	eba2 0306 	sub.w	r3, r2, r6
  406b7a:	d801      	bhi.n	406b80 <_malloc_r+0x300>
  406b7c:	2b0f      	cmp	r3, #15
  406b7e:	dc04      	bgt.n	406b8a <_malloc_r+0x30a>
  406b80:	4628      	mov	r0, r5
  406b82:	f000 fa1b 	bl	406fbc <__malloc_unlock>
  406b86:	2400      	movs	r4, #0
  406b88:	e740      	b.n	406a0c <_malloc_r+0x18c>
  406b8a:	19a2      	adds	r2, r4, r6
  406b8c:	f043 0301 	orr.w	r3, r3, #1
  406b90:	f046 0601 	orr.w	r6, r6, #1
  406b94:	6066      	str	r6, [r4, #4]
  406b96:	4628      	mov	r0, r5
  406b98:	60ba      	str	r2, [r7, #8]
  406b9a:	6053      	str	r3, [r2, #4]
  406b9c:	f000 fa0e 	bl	406fbc <__malloc_unlock>
  406ba0:	3408      	adds	r4, #8
  406ba2:	4620      	mov	r0, r4
  406ba4:	b003      	add	sp, #12
  406ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406baa:	2b14      	cmp	r3, #20
  406bac:	d971      	bls.n	406c92 <_malloc_r+0x412>
  406bae:	2b54      	cmp	r3, #84	; 0x54
  406bb0:	f200 80a3 	bhi.w	406cfa <_malloc_r+0x47a>
  406bb4:	0b33      	lsrs	r3, r6, #12
  406bb6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  406bba:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  406bbe:	00c3      	lsls	r3, r0, #3
  406bc0:	e680      	b.n	4068c4 <_malloc_r+0x44>
  406bc2:	bf00      	nop
  406bc4:	20400440 	.word	0x20400440
  406bc8:	20400bcc 	.word	0x20400bcc
  406bcc:	20400b9c 	.word	0x20400b9c
  406bd0:	20400bc4 	.word	0x20400bc4
  406bd4:	20400bc8 	.word	0x20400bc8
  406bd8:	20400448 	.word	0x20400448
  406bdc:	20400848 	.word	0x20400848
  406be0:	0a5a      	lsrs	r2, r3, #9
  406be2:	2a04      	cmp	r2, #4
  406be4:	d95b      	bls.n	406c9e <_malloc_r+0x41e>
  406be6:	2a14      	cmp	r2, #20
  406be8:	f200 80ae 	bhi.w	406d48 <_malloc_r+0x4c8>
  406bec:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  406bf0:	00c9      	lsls	r1, r1, #3
  406bf2:	325b      	adds	r2, #91	; 0x5b
  406bf4:	eb07 0c01 	add.w	ip, r7, r1
  406bf8:	5879      	ldr	r1, [r7, r1]
  406bfa:	f1ac 0c08 	sub.w	ip, ip, #8
  406bfe:	458c      	cmp	ip, r1
  406c00:	f000 8088 	beq.w	406d14 <_malloc_r+0x494>
  406c04:	684a      	ldr	r2, [r1, #4]
  406c06:	f022 0203 	bic.w	r2, r2, #3
  406c0a:	4293      	cmp	r3, r2
  406c0c:	d273      	bcs.n	406cf6 <_malloc_r+0x476>
  406c0e:	6889      	ldr	r1, [r1, #8]
  406c10:	458c      	cmp	ip, r1
  406c12:	d1f7      	bne.n	406c04 <_malloc_r+0x384>
  406c14:	f8dc 200c 	ldr.w	r2, [ip, #12]
  406c18:	687b      	ldr	r3, [r7, #4]
  406c1a:	60e2      	str	r2, [r4, #12]
  406c1c:	f8c4 c008 	str.w	ip, [r4, #8]
  406c20:	6094      	str	r4, [r2, #8]
  406c22:	f8cc 400c 	str.w	r4, [ip, #12]
  406c26:	e68f      	b.n	406948 <_malloc_r+0xc8>
  406c28:	19a1      	adds	r1, r4, r6
  406c2a:	f046 0c01 	orr.w	ip, r6, #1
  406c2e:	f042 0601 	orr.w	r6, r2, #1
  406c32:	f8c4 c004 	str.w	ip, [r4, #4]
  406c36:	4628      	mov	r0, r5
  406c38:	6179      	str	r1, [r7, #20]
  406c3a:	6139      	str	r1, [r7, #16]
  406c3c:	f8c1 e00c 	str.w	lr, [r1, #12]
  406c40:	f8c1 e008 	str.w	lr, [r1, #8]
  406c44:	604e      	str	r6, [r1, #4]
  406c46:	50e2      	str	r2, [r4, r3]
  406c48:	f000 f9b8 	bl	406fbc <__malloc_unlock>
  406c4c:	3408      	adds	r4, #8
  406c4e:	e6dd      	b.n	406a0c <_malloc_r+0x18c>
  406c50:	687b      	ldr	r3, [r7, #4]
  406c52:	e679      	b.n	406948 <_malloc_r+0xc8>
  406c54:	f108 0801 	add.w	r8, r8, #1
  406c58:	f018 0f03 	tst.w	r8, #3
  406c5c:	f10c 0c08 	add.w	ip, ip, #8
  406c60:	f47f ae85 	bne.w	40696e <_malloc_r+0xee>
  406c64:	e02d      	b.n	406cc2 <_malloc_r+0x442>
  406c66:	68dc      	ldr	r4, [r3, #12]
  406c68:	42a3      	cmp	r3, r4
  406c6a:	bf08      	it	eq
  406c6c:	3002      	addeq	r0, #2
  406c6e:	f43f ae3e 	beq.w	4068ee <_malloc_r+0x6e>
  406c72:	e6bb      	b.n	4069ec <_malloc_r+0x16c>
  406c74:	4419      	add	r1, r3
  406c76:	461c      	mov	r4, r3
  406c78:	684a      	ldr	r2, [r1, #4]
  406c7a:	68db      	ldr	r3, [r3, #12]
  406c7c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  406c80:	f042 0201 	orr.w	r2, r2, #1
  406c84:	604a      	str	r2, [r1, #4]
  406c86:	4628      	mov	r0, r5
  406c88:	60f3      	str	r3, [r6, #12]
  406c8a:	609e      	str	r6, [r3, #8]
  406c8c:	f000 f996 	bl	406fbc <__malloc_unlock>
  406c90:	e6bc      	b.n	406a0c <_malloc_r+0x18c>
  406c92:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  406c96:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  406c9a:	00c3      	lsls	r3, r0, #3
  406c9c:	e612      	b.n	4068c4 <_malloc_r+0x44>
  406c9e:	099a      	lsrs	r2, r3, #6
  406ca0:	f102 0139 	add.w	r1, r2, #57	; 0x39
  406ca4:	00c9      	lsls	r1, r1, #3
  406ca6:	3238      	adds	r2, #56	; 0x38
  406ca8:	e7a4      	b.n	406bf4 <_malloc_r+0x374>
  406caa:	42bc      	cmp	r4, r7
  406cac:	d054      	beq.n	406d58 <_malloc_r+0x4d8>
  406cae:	68bc      	ldr	r4, [r7, #8]
  406cb0:	6862      	ldr	r2, [r4, #4]
  406cb2:	f022 0203 	bic.w	r2, r2, #3
  406cb6:	e75d      	b.n	406b74 <_malloc_r+0x2f4>
  406cb8:	f859 3908 	ldr.w	r3, [r9], #-8
  406cbc:	4599      	cmp	r9, r3
  406cbe:	f040 8086 	bne.w	406dce <_malloc_r+0x54e>
  406cc2:	f010 0f03 	tst.w	r0, #3
  406cc6:	f100 30ff 	add.w	r0, r0, #4294967295
  406cca:	d1f5      	bne.n	406cb8 <_malloc_r+0x438>
  406ccc:	687b      	ldr	r3, [r7, #4]
  406cce:	ea23 0304 	bic.w	r3, r3, r4
  406cd2:	607b      	str	r3, [r7, #4]
  406cd4:	0064      	lsls	r4, r4, #1
  406cd6:	429c      	cmp	r4, r3
  406cd8:	f63f aec7 	bhi.w	406a6a <_malloc_r+0x1ea>
  406cdc:	2c00      	cmp	r4, #0
  406cde:	f43f aec4 	beq.w	406a6a <_malloc_r+0x1ea>
  406ce2:	421c      	tst	r4, r3
  406ce4:	4640      	mov	r0, r8
  406ce6:	f47f ae3e 	bne.w	406966 <_malloc_r+0xe6>
  406cea:	0064      	lsls	r4, r4, #1
  406cec:	421c      	tst	r4, r3
  406cee:	f100 0004 	add.w	r0, r0, #4
  406cf2:	d0fa      	beq.n	406cea <_malloc_r+0x46a>
  406cf4:	e637      	b.n	406966 <_malloc_r+0xe6>
  406cf6:	468c      	mov	ip, r1
  406cf8:	e78c      	b.n	406c14 <_malloc_r+0x394>
  406cfa:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  406cfe:	d815      	bhi.n	406d2c <_malloc_r+0x4ac>
  406d00:	0bf3      	lsrs	r3, r6, #15
  406d02:	f103 0078 	add.w	r0, r3, #120	; 0x78
  406d06:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  406d0a:	00c3      	lsls	r3, r0, #3
  406d0c:	e5da      	b.n	4068c4 <_malloc_r+0x44>
  406d0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  406d12:	e6ed      	b.n	406af0 <_malloc_r+0x270>
  406d14:	687b      	ldr	r3, [r7, #4]
  406d16:	1092      	asrs	r2, r2, #2
  406d18:	2101      	movs	r1, #1
  406d1a:	fa01 f202 	lsl.w	r2, r1, r2
  406d1e:	4313      	orrs	r3, r2
  406d20:	607b      	str	r3, [r7, #4]
  406d22:	4662      	mov	r2, ip
  406d24:	e779      	b.n	406c1a <_malloc_r+0x39a>
  406d26:	2301      	movs	r3, #1
  406d28:	6053      	str	r3, [r2, #4]
  406d2a:	e729      	b.n	406b80 <_malloc_r+0x300>
  406d2c:	f240 5254 	movw	r2, #1364	; 0x554
  406d30:	4293      	cmp	r3, r2
  406d32:	d822      	bhi.n	406d7a <_malloc_r+0x4fa>
  406d34:	0cb3      	lsrs	r3, r6, #18
  406d36:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  406d3a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  406d3e:	00c3      	lsls	r3, r0, #3
  406d40:	e5c0      	b.n	4068c4 <_malloc_r+0x44>
  406d42:	f103 0b10 	add.w	fp, r3, #16
  406d46:	e6ae      	b.n	406aa6 <_malloc_r+0x226>
  406d48:	2a54      	cmp	r2, #84	; 0x54
  406d4a:	d829      	bhi.n	406da0 <_malloc_r+0x520>
  406d4c:	0b1a      	lsrs	r2, r3, #12
  406d4e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  406d52:	00c9      	lsls	r1, r1, #3
  406d54:	326e      	adds	r2, #110	; 0x6e
  406d56:	e74d      	b.n	406bf4 <_malloc_r+0x374>
  406d58:	4b20      	ldr	r3, [pc, #128]	; (406ddc <_malloc_r+0x55c>)
  406d5a:	6819      	ldr	r1, [r3, #0]
  406d5c:	4459      	add	r1, fp
  406d5e:	6019      	str	r1, [r3, #0]
  406d60:	e6b2      	b.n	406ac8 <_malloc_r+0x248>
  406d62:	f3ca 000b 	ubfx	r0, sl, #0, #12
  406d66:	2800      	cmp	r0, #0
  406d68:	f47f aeae 	bne.w	406ac8 <_malloc_r+0x248>
  406d6c:	eb08 030b 	add.w	r3, r8, fp
  406d70:	68ba      	ldr	r2, [r7, #8]
  406d72:	f043 0301 	orr.w	r3, r3, #1
  406d76:	6053      	str	r3, [r2, #4]
  406d78:	e6ee      	b.n	406b58 <_malloc_r+0x2d8>
  406d7a:	207f      	movs	r0, #127	; 0x7f
  406d7c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  406d80:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  406d84:	e59e      	b.n	4068c4 <_malloc_r+0x44>
  406d86:	f104 0108 	add.w	r1, r4, #8
  406d8a:	4628      	mov	r0, r5
  406d8c:	9300      	str	r3, [sp, #0]
  406d8e:	f002 ff9f 	bl	409cd0 <_free_r>
  406d92:	9b00      	ldr	r3, [sp, #0]
  406d94:	6819      	ldr	r1, [r3, #0]
  406d96:	e6df      	b.n	406b58 <_malloc_r+0x2d8>
  406d98:	2001      	movs	r0, #1
  406d9a:	f04f 0900 	mov.w	r9, #0
  406d9e:	e6bc      	b.n	406b1a <_malloc_r+0x29a>
  406da0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406da4:	d805      	bhi.n	406db2 <_malloc_r+0x532>
  406da6:	0bda      	lsrs	r2, r3, #15
  406da8:	f102 0178 	add.w	r1, r2, #120	; 0x78
  406dac:	00c9      	lsls	r1, r1, #3
  406dae:	3277      	adds	r2, #119	; 0x77
  406db0:	e720      	b.n	406bf4 <_malloc_r+0x374>
  406db2:	f240 5154 	movw	r1, #1364	; 0x554
  406db6:	428a      	cmp	r2, r1
  406db8:	d805      	bhi.n	406dc6 <_malloc_r+0x546>
  406dba:	0c9a      	lsrs	r2, r3, #18
  406dbc:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  406dc0:	00c9      	lsls	r1, r1, #3
  406dc2:	327c      	adds	r2, #124	; 0x7c
  406dc4:	e716      	b.n	406bf4 <_malloc_r+0x374>
  406dc6:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  406dca:	227e      	movs	r2, #126	; 0x7e
  406dcc:	e712      	b.n	406bf4 <_malloc_r+0x374>
  406dce:	687b      	ldr	r3, [r7, #4]
  406dd0:	e780      	b.n	406cd4 <_malloc_r+0x454>
  406dd2:	08f0      	lsrs	r0, r6, #3
  406dd4:	f106 0308 	add.w	r3, r6, #8
  406dd8:	e600      	b.n	4069dc <_malloc_r+0x15c>
  406dda:	bf00      	nop
  406ddc:	20400b9c 	.word	0x20400b9c

00406de0 <memcpy>:
  406de0:	4684      	mov	ip, r0
  406de2:	ea41 0300 	orr.w	r3, r1, r0
  406de6:	f013 0303 	ands.w	r3, r3, #3
  406dea:	d16d      	bne.n	406ec8 <memcpy+0xe8>
  406dec:	3a40      	subs	r2, #64	; 0x40
  406dee:	d341      	bcc.n	406e74 <memcpy+0x94>
  406df0:	f851 3b04 	ldr.w	r3, [r1], #4
  406df4:	f840 3b04 	str.w	r3, [r0], #4
  406df8:	f851 3b04 	ldr.w	r3, [r1], #4
  406dfc:	f840 3b04 	str.w	r3, [r0], #4
  406e00:	f851 3b04 	ldr.w	r3, [r1], #4
  406e04:	f840 3b04 	str.w	r3, [r0], #4
  406e08:	f851 3b04 	ldr.w	r3, [r1], #4
  406e0c:	f840 3b04 	str.w	r3, [r0], #4
  406e10:	f851 3b04 	ldr.w	r3, [r1], #4
  406e14:	f840 3b04 	str.w	r3, [r0], #4
  406e18:	f851 3b04 	ldr.w	r3, [r1], #4
  406e1c:	f840 3b04 	str.w	r3, [r0], #4
  406e20:	f851 3b04 	ldr.w	r3, [r1], #4
  406e24:	f840 3b04 	str.w	r3, [r0], #4
  406e28:	f851 3b04 	ldr.w	r3, [r1], #4
  406e2c:	f840 3b04 	str.w	r3, [r0], #4
  406e30:	f851 3b04 	ldr.w	r3, [r1], #4
  406e34:	f840 3b04 	str.w	r3, [r0], #4
  406e38:	f851 3b04 	ldr.w	r3, [r1], #4
  406e3c:	f840 3b04 	str.w	r3, [r0], #4
  406e40:	f851 3b04 	ldr.w	r3, [r1], #4
  406e44:	f840 3b04 	str.w	r3, [r0], #4
  406e48:	f851 3b04 	ldr.w	r3, [r1], #4
  406e4c:	f840 3b04 	str.w	r3, [r0], #4
  406e50:	f851 3b04 	ldr.w	r3, [r1], #4
  406e54:	f840 3b04 	str.w	r3, [r0], #4
  406e58:	f851 3b04 	ldr.w	r3, [r1], #4
  406e5c:	f840 3b04 	str.w	r3, [r0], #4
  406e60:	f851 3b04 	ldr.w	r3, [r1], #4
  406e64:	f840 3b04 	str.w	r3, [r0], #4
  406e68:	f851 3b04 	ldr.w	r3, [r1], #4
  406e6c:	f840 3b04 	str.w	r3, [r0], #4
  406e70:	3a40      	subs	r2, #64	; 0x40
  406e72:	d2bd      	bcs.n	406df0 <memcpy+0x10>
  406e74:	3230      	adds	r2, #48	; 0x30
  406e76:	d311      	bcc.n	406e9c <memcpy+0xbc>
  406e78:	f851 3b04 	ldr.w	r3, [r1], #4
  406e7c:	f840 3b04 	str.w	r3, [r0], #4
  406e80:	f851 3b04 	ldr.w	r3, [r1], #4
  406e84:	f840 3b04 	str.w	r3, [r0], #4
  406e88:	f851 3b04 	ldr.w	r3, [r1], #4
  406e8c:	f840 3b04 	str.w	r3, [r0], #4
  406e90:	f851 3b04 	ldr.w	r3, [r1], #4
  406e94:	f840 3b04 	str.w	r3, [r0], #4
  406e98:	3a10      	subs	r2, #16
  406e9a:	d2ed      	bcs.n	406e78 <memcpy+0x98>
  406e9c:	320c      	adds	r2, #12
  406e9e:	d305      	bcc.n	406eac <memcpy+0xcc>
  406ea0:	f851 3b04 	ldr.w	r3, [r1], #4
  406ea4:	f840 3b04 	str.w	r3, [r0], #4
  406ea8:	3a04      	subs	r2, #4
  406eaa:	d2f9      	bcs.n	406ea0 <memcpy+0xc0>
  406eac:	3204      	adds	r2, #4
  406eae:	d008      	beq.n	406ec2 <memcpy+0xe2>
  406eb0:	07d2      	lsls	r2, r2, #31
  406eb2:	bf1c      	itt	ne
  406eb4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406eb8:	f800 3b01 	strbne.w	r3, [r0], #1
  406ebc:	d301      	bcc.n	406ec2 <memcpy+0xe2>
  406ebe:	880b      	ldrh	r3, [r1, #0]
  406ec0:	8003      	strh	r3, [r0, #0]
  406ec2:	4660      	mov	r0, ip
  406ec4:	4770      	bx	lr
  406ec6:	bf00      	nop
  406ec8:	2a08      	cmp	r2, #8
  406eca:	d313      	bcc.n	406ef4 <memcpy+0x114>
  406ecc:	078b      	lsls	r3, r1, #30
  406ece:	d08d      	beq.n	406dec <memcpy+0xc>
  406ed0:	f010 0303 	ands.w	r3, r0, #3
  406ed4:	d08a      	beq.n	406dec <memcpy+0xc>
  406ed6:	f1c3 0304 	rsb	r3, r3, #4
  406eda:	1ad2      	subs	r2, r2, r3
  406edc:	07db      	lsls	r3, r3, #31
  406ede:	bf1c      	itt	ne
  406ee0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406ee4:	f800 3b01 	strbne.w	r3, [r0], #1
  406ee8:	d380      	bcc.n	406dec <memcpy+0xc>
  406eea:	f831 3b02 	ldrh.w	r3, [r1], #2
  406eee:	f820 3b02 	strh.w	r3, [r0], #2
  406ef2:	e77b      	b.n	406dec <memcpy+0xc>
  406ef4:	3a04      	subs	r2, #4
  406ef6:	d3d9      	bcc.n	406eac <memcpy+0xcc>
  406ef8:	3a01      	subs	r2, #1
  406efa:	f811 3b01 	ldrb.w	r3, [r1], #1
  406efe:	f800 3b01 	strb.w	r3, [r0], #1
  406f02:	d2f9      	bcs.n	406ef8 <memcpy+0x118>
  406f04:	780b      	ldrb	r3, [r1, #0]
  406f06:	7003      	strb	r3, [r0, #0]
  406f08:	784b      	ldrb	r3, [r1, #1]
  406f0a:	7043      	strb	r3, [r0, #1]
  406f0c:	788b      	ldrb	r3, [r1, #2]
  406f0e:	7083      	strb	r3, [r0, #2]
  406f10:	4660      	mov	r0, ip
  406f12:	4770      	bx	lr

00406f14 <memset>:
  406f14:	b470      	push	{r4, r5, r6}
  406f16:	0786      	lsls	r6, r0, #30
  406f18:	d046      	beq.n	406fa8 <memset+0x94>
  406f1a:	1e54      	subs	r4, r2, #1
  406f1c:	2a00      	cmp	r2, #0
  406f1e:	d041      	beq.n	406fa4 <memset+0x90>
  406f20:	b2ca      	uxtb	r2, r1
  406f22:	4603      	mov	r3, r0
  406f24:	e002      	b.n	406f2c <memset+0x18>
  406f26:	f114 34ff 	adds.w	r4, r4, #4294967295
  406f2a:	d33b      	bcc.n	406fa4 <memset+0x90>
  406f2c:	f803 2b01 	strb.w	r2, [r3], #1
  406f30:	079d      	lsls	r5, r3, #30
  406f32:	d1f8      	bne.n	406f26 <memset+0x12>
  406f34:	2c03      	cmp	r4, #3
  406f36:	d92e      	bls.n	406f96 <memset+0x82>
  406f38:	b2cd      	uxtb	r5, r1
  406f3a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  406f3e:	2c0f      	cmp	r4, #15
  406f40:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  406f44:	d919      	bls.n	406f7a <memset+0x66>
  406f46:	f103 0210 	add.w	r2, r3, #16
  406f4a:	4626      	mov	r6, r4
  406f4c:	3e10      	subs	r6, #16
  406f4e:	2e0f      	cmp	r6, #15
  406f50:	f842 5c10 	str.w	r5, [r2, #-16]
  406f54:	f842 5c0c 	str.w	r5, [r2, #-12]
  406f58:	f842 5c08 	str.w	r5, [r2, #-8]
  406f5c:	f842 5c04 	str.w	r5, [r2, #-4]
  406f60:	f102 0210 	add.w	r2, r2, #16
  406f64:	d8f2      	bhi.n	406f4c <memset+0x38>
  406f66:	f1a4 0210 	sub.w	r2, r4, #16
  406f6a:	f022 020f 	bic.w	r2, r2, #15
  406f6e:	f004 040f 	and.w	r4, r4, #15
  406f72:	3210      	adds	r2, #16
  406f74:	2c03      	cmp	r4, #3
  406f76:	4413      	add	r3, r2
  406f78:	d90d      	bls.n	406f96 <memset+0x82>
  406f7a:	461e      	mov	r6, r3
  406f7c:	4622      	mov	r2, r4
  406f7e:	3a04      	subs	r2, #4
  406f80:	2a03      	cmp	r2, #3
  406f82:	f846 5b04 	str.w	r5, [r6], #4
  406f86:	d8fa      	bhi.n	406f7e <memset+0x6a>
  406f88:	1f22      	subs	r2, r4, #4
  406f8a:	f022 0203 	bic.w	r2, r2, #3
  406f8e:	3204      	adds	r2, #4
  406f90:	4413      	add	r3, r2
  406f92:	f004 0403 	and.w	r4, r4, #3
  406f96:	b12c      	cbz	r4, 406fa4 <memset+0x90>
  406f98:	b2c9      	uxtb	r1, r1
  406f9a:	441c      	add	r4, r3
  406f9c:	f803 1b01 	strb.w	r1, [r3], #1
  406fa0:	429c      	cmp	r4, r3
  406fa2:	d1fb      	bne.n	406f9c <memset+0x88>
  406fa4:	bc70      	pop	{r4, r5, r6}
  406fa6:	4770      	bx	lr
  406fa8:	4614      	mov	r4, r2
  406faa:	4603      	mov	r3, r0
  406fac:	e7c2      	b.n	406f34 <memset+0x20>
  406fae:	bf00      	nop

00406fb0 <__malloc_lock>:
  406fb0:	4801      	ldr	r0, [pc, #4]	; (406fb8 <__malloc_lock+0x8>)
  406fb2:	f003 b927 	b.w	40a204 <__retarget_lock_acquire_recursive>
  406fb6:	bf00      	nop
  406fb8:	20400c34 	.word	0x20400c34

00406fbc <__malloc_unlock>:
  406fbc:	4801      	ldr	r0, [pc, #4]	; (406fc4 <__malloc_unlock+0x8>)
  406fbe:	f003 b923 	b.w	40a208 <__retarget_lock_release_recursive>
  406fc2:	bf00      	nop
  406fc4:	20400c34 	.word	0x20400c34

00406fc8 <printf>:
  406fc8:	b40f      	push	{r0, r1, r2, r3}
  406fca:	b500      	push	{lr}
  406fcc:	4907      	ldr	r1, [pc, #28]	; (406fec <printf+0x24>)
  406fce:	b083      	sub	sp, #12
  406fd0:	ab04      	add	r3, sp, #16
  406fd2:	6808      	ldr	r0, [r1, #0]
  406fd4:	f853 2b04 	ldr.w	r2, [r3], #4
  406fd8:	6881      	ldr	r1, [r0, #8]
  406fda:	9301      	str	r3, [sp, #4]
  406fdc:	f000 f9be 	bl	40735c <_vfprintf_r>
  406fe0:	b003      	add	sp, #12
  406fe2:	f85d eb04 	ldr.w	lr, [sp], #4
  406fe6:	b004      	add	sp, #16
  406fe8:	4770      	bx	lr
  406fea:	bf00      	nop
  406fec:	20400010 	.word	0x20400010

00406ff0 <_puts_r>:
  406ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
  406ff2:	4605      	mov	r5, r0
  406ff4:	b089      	sub	sp, #36	; 0x24
  406ff6:	4608      	mov	r0, r1
  406ff8:	460c      	mov	r4, r1
  406ffa:	f000 f941 	bl	407280 <strlen>
  406ffe:	6bab      	ldr	r3, [r5, #56]	; 0x38
  407000:	4f21      	ldr	r7, [pc, #132]	; (407088 <_puts_r+0x98>)
  407002:	9404      	str	r4, [sp, #16]
  407004:	2601      	movs	r6, #1
  407006:	1c44      	adds	r4, r0, #1
  407008:	a904      	add	r1, sp, #16
  40700a:	2202      	movs	r2, #2
  40700c:	9403      	str	r4, [sp, #12]
  40700e:	9005      	str	r0, [sp, #20]
  407010:	68ac      	ldr	r4, [r5, #8]
  407012:	9706      	str	r7, [sp, #24]
  407014:	9607      	str	r6, [sp, #28]
  407016:	9101      	str	r1, [sp, #4]
  407018:	9202      	str	r2, [sp, #8]
  40701a:	b353      	cbz	r3, 407072 <_puts_r+0x82>
  40701c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40701e:	f013 0f01 	tst.w	r3, #1
  407022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407026:	b29a      	uxth	r2, r3
  407028:	d101      	bne.n	40702e <_puts_r+0x3e>
  40702a:	0590      	lsls	r0, r2, #22
  40702c:	d525      	bpl.n	40707a <_puts_r+0x8a>
  40702e:	0491      	lsls	r1, r2, #18
  407030:	d406      	bmi.n	407040 <_puts_r+0x50>
  407032:	6e62      	ldr	r2, [r4, #100]	; 0x64
  407034:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  407038:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  40703c:	81a3      	strh	r3, [r4, #12]
  40703e:	6662      	str	r2, [r4, #100]	; 0x64
  407040:	4628      	mov	r0, r5
  407042:	aa01      	add	r2, sp, #4
  407044:	4621      	mov	r1, r4
  407046:	f002 ff29 	bl	409e9c <__sfvwrite_r>
  40704a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40704c:	2800      	cmp	r0, #0
  40704e:	bf0c      	ite	eq
  407050:	250a      	moveq	r5, #10
  407052:	f04f 35ff 	movne.w	r5, #4294967295
  407056:	07da      	lsls	r2, r3, #31
  407058:	d402      	bmi.n	407060 <_puts_r+0x70>
  40705a:	89a3      	ldrh	r3, [r4, #12]
  40705c:	059b      	lsls	r3, r3, #22
  40705e:	d502      	bpl.n	407066 <_puts_r+0x76>
  407060:	4628      	mov	r0, r5
  407062:	b009      	add	sp, #36	; 0x24
  407064:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407066:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407068:	f003 f8ce 	bl	40a208 <__retarget_lock_release_recursive>
  40706c:	4628      	mov	r0, r5
  40706e:	b009      	add	sp, #36	; 0x24
  407070:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407072:	4628      	mov	r0, r5
  407074:	f002 fd8a 	bl	409b8c <__sinit>
  407078:	e7d0      	b.n	40701c <_puts_r+0x2c>
  40707a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40707c:	f003 f8c2 	bl	40a204 <__retarget_lock_acquire_recursive>
  407080:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407084:	b29a      	uxth	r2, r3
  407086:	e7d2      	b.n	40702e <_puts_r+0x3e>
  407088:	0040bd40 	.word	0x0040bd40

0040708c <puts>:
  40708c:	4b02      	ldr	r3, [pc, #8]	; (407098 <puts+0xc>)
  40708e:	4601      	mov	r1, r0
  407090:	6818      	ldr	r0, [r3, #0]
  407092:	f7ff bfad 	b.w	406ff0 <_puts_r>
  407096:	bf00      	nop
  407098:	20400010 	.word	0x20400010

0040709c <_sbrk_r>:
  40709c:	b538      	push	{r3, r4, r5, lr}
  40709e:	4c07      	ldr	r4, [pc, #28]	; (4070bc <_sbrk_r+0x20>)
  4070a0:	2300      	movs	r3, #0
  4070a2:	4605      	mov	r5, r0
  4070a4:	4608      	mov	r0, r1
  4070a6:	6023      	str	r3, [r4, #0]
  4070a8:	f7f9 fe9a 	bl	400de0 <_sbrk>
  4070ac:	1c43      	adds	r3, r0, #1
  4070ae:	d000      	beq.n	4070b2 <_sbrk_r+0x16>
  4070b0:	bd38      	pop	{r3, r4, r5, pc}
  4070b2:	6823      	ldr	r3, [r4, #0]
  4070b4:	2b00      	cmp	r3, #0
  4070b6:	d0fb      	beq.n	4070b0 <_sbrk_r+0x14>
  4070b8:	602b      	str	r3, [r5, #0]
  4070ba:	bd38      	pop	{r3, r4, r5, pc}
  4070bc:	20400c48 	.word	0x20400c48

004070c0 <setbuf>:
  4070c0:	2900      	cmp	r1, #0
  4070c2:	bf0c      	ite	eq
  4070c4:	2202      	moveq	r2, #2
  4070c6:	2200      	movne	r2, #0
  4070c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4070cc:	f000 b800 	b.w	4070d0 <setvbuf>

004070d0 <setvbuf>:
  4070d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4070d4:	4c61      	ldr	r4, [pc, #388]	; (40725c <setvbuf+0x18c>)
  4070d6:	6825      	ldr	r5, [r4, #0]
  4070d8:	b083      	sub	sp, #12
  4070da:	4604      	mov	r4, r0
  4070dc:	460f      	mov	r7, r1
  4070de:	4690      	mov	r8, r2
  4070e0:	461e      	mov	r6, r3
  4070e2:	b115      	cbz	r5, 4070ea <setvbuf+0x1a>
  4070e4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4070e6:	2b00      	cmp	r3, #0
  4070e8:	d064      	beq.n	4071b4 <setvbuf+0xe4>
  4070ea:	f1b8 0f02 	cmp.w	r8, #2
  4070ee:	d006      	beq.n	4070fe <setvbuf+0x2e>
  4070f0:	f1b8 0f01 	cmp.w	r8, #1
  4070f4:	f200 809f 	bhi.w	407236 <setvbuf+0x166>
  4070f8:	2e00      	cmp	r6, #0
  4070fa:	f2c0 809c 	blt.w	407236 <setvbuf+0x166>
  4070fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
  407100:	07d8      	lsls	r0, r3, #31
  407102:	d534      	bpl.n	40716e <setvbuf+0x9e>
  407104:	4621      	mov	r1, r4
  407106:	4628      	mov	r0, r5
  407108:	f002 fce8 	bl	409adc <_fflush_r>
  40710c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40710e:	b141      	cbz	r1, 407122 <setvbuf+0x52>
  407110:	f104 0340 	add.w	r3, r4, #64	; 0x40
  407114:	4299      	cmp	r1, r3
  407116:	d002      	beq.n	40711e <setvbuf+0x4e>
  407118:	4628      	mov	r0, r5
  40711a:	f002 fdd9 	bl	409cd0 <_free_r>
  40711e:	2300      	movs	r3, #0
  407120:	6323      	str	r3, [r4, #48]	; 0x30
  407122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407126:	2200      	movs	r2, #0
  407128:	61a2      	str	r2, [r4, #24]
  40712a:	6062      	str	r2, [r4, #4]
  40712c:	061a      	lsls	r2, r3, #24
  40712e:	d43a      	bmi.n	4071a6 <setvbuf+0xd6>
  407130:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  407134:	f023 0303 	bic.w	r3, r3, #3
  407138:	f1b8 0f02 	cmp.w	r8, #2
  40713c:	81a3      	strh	r3, [r4, #12]
  40713e:	d01d      	beq.n	40717c <setvbuf+0xac>
  407140:	ab01      	add	r3, sp, #4
  407142:	466a      	mov	r2, sp
  407144:	4621      	mov	r1, r4
  407146:	4628      	mov	r0, r5
  407148:	f003 f860 	bl	40a20c <__swhatbuf_r>
  40714c:	89a3      	ldrh	r3, [r4, #12]
  40714e:	4318      	orrs	r0, r3
  407150:	81a0      	strh	r0, [r4, #12]
  407152:	2e00      	cmp	r6, #0
  407154:	d132      	bne.n	4071bc <setvbuf+0xec>
  407156:	9e00      	ldr	r6, [sp, #0]
  407158:	4630      	mov	r0, r6
  40715a:	f7ff fb81 	bl	406860 <malloc>
  40715e:	4607      	mov	r7, r0
  407160:	2800      	cmp	r0, #0
  407162:	d06b      	beq.n	40723c <setvbuf+0x16c>
  407164:	89a3      	ldrh	r3, [r4, #12]
  407166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40716a:	81a3      	strh	r3, [r4, #12]
  40716c:	e028      	b.n	4071c0 <setvbuf+0xf0>
  40716e:	89a3      	ldrh	r3, [r4, #12]
  407170:	0599      	lsls	r1, r3, #22
  407172:	d4c7      	bmi.n	407104 <setvbuf+0x34>
  407174:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407176:	f003 f845 	bl	40a204 <__retarget_lock_acquire_recursive>
  40717a:	e7c3      	b.n	407104 <setvbuf+0x34>
  40717c:	2500      	movs	r5, #0
  40717e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  407180:	2600      	movs	r6, #0
  407182:	f104 0243 	add.w	r2, r4, #67	; 0x43
  407186:	f043 0302 	orr.w	r3, r3, #2
  40718a:	2001      	movs	r0, #1
  40718c:	60a6      	str	r6, [r4, #8]
  40718e:	07ce      	lsls	r6, r1, #31
  407190:	81a3      	strh	r3, [r4, #12]
  407192:	6022      	str	r2, [r4, #0]
  407194:	6122      	str	r2, [r4, #16]
  407196:	6160      	str	r0, [r4, #20]
  407198:	d401      	bmi.n	40719e <setvbuf+0xce>
  40719a:	0598      	lsls	r0, r3, #22
  40719c:	d53e      	bpl.n	40721c <setvbuf+0x14c>
  40719e:	4628      	mov	r0, r5
  4071a0:	b003      	add	sp, #12
  4071a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4071a6:	6921      	ldr	r1, [r4, #16]
  4071a8:	4628      	mov	r0, r5
  4071aa:	f002 fd91 	bl	409cd0 <_free_r>
  4071ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4071b2:	e7bd      	b.n	407130 <setvbuf+0x60>
  4071b4:	4628      	mov	r0, r5
  4071b6:	f002 fce9 	bl	409b8c <__sinit>
  4071ba:	e796      	b.n	4070ea <setvbuf+0x1a>
  4071bc:	2f00      	cmp	r7, #0
  4071be:	d0cb      	beq.n	407158 <setvbuf+0x88>
  4071c0:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4071c2:	2b00      	cmp	r3, #0
  4071c4:	d033      	beq.n	40722e <setvbuf+0x15e>
  4071c6:	9b00      	ldr	r3, [sp, #0]
  4071c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4071cc:	6027      	str	r7, [r4, #0]
  4071ce:	429e      	cmp	r6, r3
  4071d0:	bf1c      	itt	ne
  4071d2:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  4071d6:	81a2      	strhne	r2, [r4, #12]
  4071d8:	f1b8 0f01 	cmp.w	r8, #1
  4071dc:	bf04      	itt	eq
  4071de:	f042 0201 	orreq.w	r2, r2, #1
  4071e2:	81a2      	strheq	r2, [r4, #12]
  4071e4:	b292      	uxth	r2, r2
  4071e6:	f012 0308 	ands.w	r3, r2, #8
  4071ea:	6127      	str	r7, [r4, #16]
  4071ec:	6166      	str	r6, [r4, #20]
  4071ee:	d00e      	beq.n	40720e <setvbuf+0x13e>
  4071f0:	07d1      	lsls	r1, r2, #31
  4071f2:	d51a      	bpl.n	40722a <setvbuf+0x15a>
  4071f4:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4071f6:	4276      	negs	r6, r6
  4071f8:	2300      	movs	r3, #0
  4071fa:	f015 0501 	ands.w	r5, r5, #1
  4071fe:	61a6      	str	r6, [r4, #24]
  407200:	60a3      	str	r3, [r4, #8]
  407202:	d009      	beq.n	407218 <setvbuf+0x148>
  407204:	2500      	movs	r5, #0
  407206:	4628      	mov	r0, r5
  407208:	b003      	add	sp, #12
  40720a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40720e:	60a3      	str	r3, [r4, #8]
  407210:	6e65      	ldr	r5, [r4, #100]	; 0x64
  407212:	f015 0501 	ands.w	r5, r5, #1
  407216:	d1f5      	bne.n	407204 <setvbuf+0x134>
  407218:	0593      	lsls	r3, r2, #22
  40721a:	d4c0      	bmi.n	40719e <setvbuf+0xce>
  40721c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40721e:	f002 fff3 	bl	40a208 <__retarget_lock_release_recursive>
  407222:	4628      	mov	r0, r5
  407224:	b003      	add	sp, #12
  407226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40722a:	60a6      	str	r6, [r4, #8]
  40722c:	e7f0      	b.n	407210 <setvbuf+0x140>
  40722e:	4628      	mov	r0, r5
  407230:	f002 fcac 	bl	409b8c <__sinit>
  407234:	e7c7      	b.n	4071c6 <setvbuf+0xf6>
  407236:	f04f 35ff 	mov.w	r5, #4294967295
  40723a:	e7b0      	b.n	40719e <setvbuf+0xce>
  40723c:	f8dd 9000 	ldr.w	r9, [sp]
  407240:	45b1      	cmp	r9, r6
  407242:	d004      	beq.n	40724e <setvbuf+0x17e>
  407244:	4648      	mov	r0, r9
  407246:	f7ff fb0b 	bl	406860 <malloc>
  40724a:	4607      	mov	r7, r0
  40724c:	b920      	cbnz	r0, 407258 <setvbuf+0x188>
  40724e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407252:	f04f 35ff 	mov.w	r5, #4294967295
  407256:	e792      	b.n	40717e <setvbuf+0xae>
  407258:	464e      	mov	r6, r9
  40725a:	e783      	b.n	407164 <setvbuf+0x94>
  40725c:	20400010 	.word	0x20400010
	...

00407280 <strlen>:
  407280:	f890 f000 	pld	[r0]
  407284:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  407288:	f020 0107 	bic.w	r1, r0, #7
  40728c:	f06f 0c00 	mvn.w	ip, #0
  407290:	f010 0407 	ands.w	r4, r0, #7
  407294:	f891 f020 	pld	[r1, #32]
  407298:	f040 8049 	bne.w	40732e <strlen+0xae>
  40729c:	f04f 0400 	mov.w	r4, #0
  4072a0:	f06f 0007 	mvn.w	r0, #7
  4072a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4072a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4072ac:	f100 0008 	add.w	r0, r0, #8
  4072b0:	fa82 f24c 	uadd8	r2, r2, ip
  4072b4:	faa4 f28c 	sel	r2, r4, ip
  4072b8:	fa83 f34c 	uadd8	r3, r3, ip
  4072bc:	faa2 f38c 	sel	r3, r2, ip
  4072c0:	bb4b      	cbnz	r3, 407316 <strlen+0x96>
  4072c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4072c6:	fa82 f24c 	uadd8	r2, r2, ip
  4072ca:	f100 0008 	add.w	r0, r0, #8
  4072ce:	faa4 f28c 	sel	r2, r4, ip
  4072d2:	fa83 f34c 	uadd8	r3, r3, ip
  4072d6:	faa2 f38c 	sel	r3, r2, ip
  4072da:	b9e3      	cbnz	r3, 407316 <strlen+0x96>
  4072dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4072e0:	fa82 f24c 	uadd8	r2, r2, ip
  4072e4:	f100 0008 	add.w	r0, r0, #8
  4072e8:	faa4 f28c 	sel	r2, r4, ip
  4072ec:	fa83 f34c 	uadd8	r3, r3, ip
  4072f0:	faa2 f38c 	sel	r3, r2, ip
  4072f4:	b97b      	cbnz	r3, 407316 <strlen+0x96>
  4072f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4072fa:	f101 0120 	add.w	r1, r1, #32
  4072fe:	fa82 f24c 	uadd8	r2, r2, ip
  407302:	f100 0008 	add.w	r0, r0, #8
  407306:	faa4 f28c 	sel	r2, r4, ip
  40730a:	fa83 f34c 	uadd8	r3, r3, ip
  40730e:	faa2 f38c 	sel	r3, r2, ip
  407312:	2b00      	cmp	r3, #0
  407314:	d0c6      	beq.n	4072a4 <strlen+0x24>
  407316:	2a00      	cmp	r2, #0
  407318:	bf04      	itt	eq
  40731a:	3004      	addeq	r0, #4
  40731c:	461a      	moveq	r2, r3
  40731e:	ba12      	rev	r2, r2
  407320:	fab2 f282 	clz	r2, r2
  407324:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  407328:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40732c:	4770      	bx	lr
  40732e:	e9d1 2300 	ldrd	r2, r3, [r1]
  407332:	f004 0503 	and.w	r5, r4, #3
  407336:	f1c4 0000 	rsb	r0, r4, #0
  40733a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40733e:	f014 0f04 	tst.w	r4, #4
  407342:	f891 f040 	pld	[r1, #64]	; 0x40
  407346:	fa0c f505 	lsl.w	r5, ip, r5
  40734a:	ea62 0205 	orn	r2, r2, r5
  40734e:	bf1c      	itt	ne
  407350:	ea63 0305 	ornne	r3, r3, r5
  407354:	4662      	movne	r2, ip
  407356:	f04f 0400 	mov.w	r4, #0
  40735a:	e7a9      	b.n	4072b0 <strlen+0x30>

0040735c <_vfprintf_r>:
  40735c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407360:	b0c1      	sub	sp, #260	; 0x104
  407362:	461d      	mov	r5, r3
  407364:	468a      	mov	sl, r1
  407366:	4691      	mov	r9, r2
  407368:	4604      	mov	r4, r0
  40736a:	9008      	str	r0, [sp, #32]
  40736c:	f002 ff38 	bl	40a1e0 <_localeconv_r>
  407370:	6803      	ldr	r3, [r0, #0]
  407372:	9315      	str	r3, [sp, #84]	; 0x54
  407374:	4618      	mov	r0, r3
  407376:	f7ff ff83 	bl	407280 <strlen>
  40737a:	950e      	str	r5, [sp, #56]	; 0x38
  40737c:	9014      	str	r0, [sp, #80]	; 0x50
  40737e:	b11c      	cbz	r4, 407388 <_vfprintf_r+0x2c>
  407380:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  407382:	2b00      	cmp	r3, #0
  407384:	f000 825f 	beq.w	407846 <_vfprintf_r+0x4ea>
  407388:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  40738c:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
  407390:	f013 0f01 	tst.w	r3, #1
  407394:	b293      	uxth	r3, r2
  407396:	d102      	bne.n	40739e <_vfprintf_r+0x42>
  407398:	0599      	lsls	r1, r3, #22
  40739a:	f140 8275 	bpl.w	407888 <_vfprintf_r+0x52c>
  40739e:	049f      	lsls	r7, r3, #18
  4073a0:	d40a      	bmi.n	4073b8 <_vfprintf_r+0x5c>
  4073a2:	f8da 1064 	ldr.w	r1, [sl, #100]	; 0x64
  4073a6:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
  4073aa:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4073ae:	f8aa 300c 	strh.w	r3, [sl, #12]
  4073b2:	f8ca 1064 	str.w	r1, [sl, #100]	; 0x64
  4073b6:	b29b      	uxth	r3, r3
  4073b8:	071e      	lsls	r6, r3, #28
  4073ba:	f140 8223 	bpl.w	407804 <_vfprintf_r+0x4a8>
  4073be:	f8da 2010 	ldr.w	r2, [sl, #16]
  4073c2:	2a00      	cmp	r2, #0
  4073c4:	f000 821e 	beq.w	407804 <_vfprintf_r+0x4a8>
  4073c8:	f003 021a 	and.w	r2, r3, #26
  4073cc:	2a0a      	cmp	r2, #10
  4073ce:	f000 823e 	beq.w	40784e <_vfprintf_r+0x4f2>
  4073d2:	2300      	movs	r3, #0
  4073d4:	4618      	mov	r0, r3
  4073d6:	9311      	str	r3, [sp, #68]	; 0x44
  4073d8:	9313      	str	r3, [sp, #76]	; 0x4c
  4073da:	9312      	str	r3, [sp, #72]	; 0x48
  4073dc:	9325      	str	r3, [sp, #148]	; 0x94
  4073de:	9324      	str	r3, [sp, #144]	; 0x90
  4073e0:	9318      	str	r3, [sp, #96]	; 0x60
  4073e2:	9319      	str	r3, [sp, #100]	; 0x64
  4073e4:	930b      	str	r3, [sp, #44]	; 0x2c
  4073e6:	ab30      	add	r3, sp, #192	; 0xc0
  4073e8:	9323      	str	r3, [sp, #140]	; 0x8c
  4073ea:	4698      	mov	r8, r3
  4073ec:	9016      	str	r0, [sp, #88]	; 0x58
  4073ee:	9017      	str	r0, [sp, #92]	; 0x5c
  4073f0:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  4073f4:	f899 3000 	ldrb.w	r3, [r9]
  4073f8:	464c      	mov	r4, r9
  4073fa:	b1eb      	cbz	r3, 407438 <_vfprintf_r+0xdc>
  4073fc:	2b25      	cmp	r3, #37	; 0x25
  4073fe:	d102      	bne.n	407406 <_vfprintf_r+0xaa>
  407400:	e01a      	b.n	407438 <_vfprintf_r+0xdc>
  407402:	2b25      	cmp	r3, #37	; 0x25
  407404:	d003      	beq.n	40740e <_vfprintf_r+0xb2>
  407406:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40740a:	2b00      	cmp	r3, #0
  40740c:	d1f9      	bne.n	407402 <_vfprintf_r+0xa6>
  40740e:	eba4 0509 	sub.w	r5, r4, r9
  407412:	b18d      	cbz	r5, 407438 <_vfprintf_r+0xdc>
  407414:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407416:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407418:	f8c8 9000 	str.w	r9, [r8]
  40741c:	3301      	adds	r3, #1
  40741e:	442a      	add	r2, r5
  407420:	2b07      	cmp	r3, #7
  407422:	f8c8 5004 	str.w	r5, [r8, #4]
  407426:	9225      	str	r2, [sp, #148]	; 0x94
  407428:	9324      	str	r3, [sp, #144]	; 0x90
  40742a:	f300 8201 	bgt.w	407830 <_vfprintf_r+0x4d4>
  40742e:	f108 0808 	add.w	r8, r8, #8
  407432:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407434:	442b      	add	r3, r5
  407436:	930b      	str	r3, [sp, #44]	; 0x2c
  407438:	7823      	ldrb	r3, [r4, #0]
  40743a:	2b00      	cmp	r3, #0
  40743c:	f000 83f0 	beq.w	407c20 <_vfprintf_r+0x8c4>
  407440:	2300      	movs	r3, #0
  407442:	461a      	mov	r2, r3
  407444:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  407448:	4619      	mov	r1, r3
  40744a:	930c      	str	r3, [sp, #48]	; 0x30
  40744c:	469b      	mov	fp, r3
  40744e:	7866      	ldrb	r6, [r4, #1]
  407450:	f04f 33ff 	mov.w	r3, #4294967295
  407454:	f104 0901 	add.w	r9, r4, #1
  407458:	9309      	str	r3, [sp, #36]	; 0x24
  40745a:	f109 0901 	add.w	r9, r9, #1
  40745e:	f1a6 0320 	sub.w	r3, r6, #32
  407462:	2b58      	cmp	r3, #88	; 0x58
  407464:	f200 83bf 	bhi.w	407be6 <_vfprintf_r+0x88a>
  407468:	e8df f013 	tbh	[pc, r3, lsl #1]
  40746c:	03bd02e0 	.word	0x03bd02e0
  407470:	034f03bd 	.word	0x034f03bd
  407474:	03bd03bd 	.word	0x03bd03bd
  407478:	03bd03bd 	.word	0x03bd03bd
  40747c:	03bd03bd 	.word	0x03bd03bd
  407480:	03080354 	.word	0x03080354
  407484:	021a03bd 	.word	0x021a03bd
  407488:	03bd02e8 	.word	0x03bd02e8
  40748c:	033a0303 	.word	0x033a0303
  407490:	033a033a 	.word	0x033a033a
  407494:	033a033a 	.word	0x033a033a
  407498:	033a033a 	.word	0x033a033a
  40749c:	033a033a 	.word	0x033a033a
  4074a0:	03bd03bd 	.word	0x03bd03bd
  4074a4:	03bd03bd 	.word	0x03bd03bd
  4074a8:	03bd03bd 	.word	0x03bd03bd
  4074ac:	03bd03bd 	.word	0x03bd03bd
  4074b0:	03bd03bd 	.word	0x03bd03bd
  4074b4:	03620349 	.word	0x03620349
  4074b8:	036203bd 	.word	0x036203bd
  4074bc:	03bd03bd 	.word	0x03bd03bd
  4074c0:	03bd03bd 	.word	0x03bd03bd
  4074c4:	03bd03a2 	.word	0x03bd03a2
  4074c8:	006f03bd 	.word	0x006f03bd
  4074cc:	03bd03bd 	.word	0x03bd03bd
  4074d0:	03bd03bd 	.word	0x03bd03bd
  4074d4:	005903bd 	.word	0x005903bd
  4074d8:	03bd03bd 	.word	0x03bd03bd
  4074dc:	03bd031e 	.word	0x03bd031e
  4074e0:	03bd03bd 	.word	0x03bd03bd
  4074e4:	03bd03bd 	.word	0x03bd03bd
  4074e8:	03bd03bd 	.word	0x03bd03bd
  4074ec:	03bd03bd 	.word	0x03bd03bd
  4074f0:	032403bd 	.word	0x032403bd
  4074f4:	03620273 	.word	0x03620273
  4074f8:	03620362 	.word	0x03620362
  4074fc:	027302b7 	.word	0x027302b7
  407500:	03bd03bd 	.word	0x03bd03bd
  407504:	03bd02bc 	.word	0x03bd02bc
  407508:	007102c9 	.word	0x007102c9
  40750c:	0247030d 	.word	0x0247030d
  407510:	025203bd 	.word	0x025203bd
  407514:	005b03bd 	.word	0x005b03bd
  407518:	03bd03bd 	.word	0x03bd03bd
  40751c:	021f      	.short	0x021f
  40751e:	f04b 0b10 	orr.w	fp, fp, #16
  407522:	f01b 0f20 	tst.w	fp, #32
  407526:	f040 8353 	bne.w	407bd0 <_vfprintf_r+0x874>
  40752a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40752c:	f01b 0f10 	tst.w	fp, #16
  407530:	4613      	mov	r3, r2
  407532:	f040 85b4 	bne.w	40809e <_vfprintf_r+0xd42>
  407536:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40753a:	f000 85b0 	beq.w	40809e <_vfprintf_r+0xd42>
  40753e:	8814      	ldrh	r4, [r2, #0]
  407540:	3204      	adds	r2, #4
  407542:	2500      	movs	r5, #0
  407544:	2301      	movs	r3, #1
  407546:	920e      	str	r2, [sp, #56]	; 0x38
  407548:	e014      	b.n	407574 <_vfprintf_r+0x218>
  40754a:	f04b 0b10 	orr.w	fp, fp, #16
  40754e:	f01b 0320 	ands.w	r3, fp, #32
  407552:	f040 8332 	bne.w	407bba <_vfprintf_r+0x85e>
  407556:	f01b 0210 	ands.w	r2, fp, #16
  40755a:	f040 8589 	bne.w	408070 <_vfprintf_r+0xd14>
  40755e:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  407562:	f000 8585 	beq.w	408070 <_vfprintf_r+0xd14>
  407566:	990e      	ldr	r1, [sp, #56]	; 0x38
  407568:	4613      	mov	r3, r2
  40756a:	460a      	mov	r2, r1
  40756c:	3204      	adds	r2, #4
  40756e:	880c      	ldrh	r4, [r1, #0]
  407570:	920e      	str	r2, [sp, #56]	; 0x38
  407572:	2500      	movs	r5, #0
  407574:	f04f 0a00 	mov.w	sl, #0
  407578:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  40757c:	9909      	ldr	r1, [sp, #36]	; 0x24
  40757e:	1c4a      	adds	r2, r1, #1
  407580:	f000 820b 	beq.w	40799a <_vfprintf_r+0x63e>
  407584:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  407588:	9206      	str	r2, [sp, #24]
  40758a:	ea54 0205 	orrs.w	r2, r4, r5
  40758e:	f040 820a 	bne.w	4079a6 <_vfprintf_r+0x64a>
  407592:	2900      	cmp	r1, #0
  407594:	f040 846f 	bne.w	407e76 <_vfprintf_r+0xb1a>
  407598:	2b00      	cmp	r3, #0
  40759a:	f040 852d 	bne.w	407ff8 <_vfprintf_r+0xc9c>
  40759e:	f01b 0301 	ands.w	r3, fp, #1
  4075a2:	930d      	str	r3, [sp, #52]	; 0x34
  4075a4:	f000 8668 	beq.w	408278 <_vfprintf_r+0xf1c>
  4075a8:	af40      	add	r7, sp, #256	; 0x100
  4075aa:	2330      	movs	r3, #48	; 0x30
  4075ac:	f807 3d41 	strb.w	r3, [r7, #-65]!
  4075b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4075b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4075b4:	4293      	cmp	r3, r2
  4075b6:	bfb8      	it	lt
  4075b8:	4613      	movlt	r3, r2
  4075ba:	9307      	str	r3, [sp, #28]
  4075bc:	2300      	movs	r3, #0
  4075be:	9310      	str	r3, [sp, #64]	; 0x40
  4075c0:	f1ba 0f00 	cmp.w	sl, #0
  4075c4:	d002      	beq.n	4075cc <_vfprintf_r+0x270>
  4075c6:	9b07      	ldr	r3, [sp, #28]
  4075c8:	3301      	adds	r3, #1
  4075ca:	9307      	str	r3, [sp, #28]
  4075cc:	9b06      	ldr	r3, [sp, #24]
  4075ce:	f013 0302 	ands.w	r3, r3, #2
  4075d2:	930f      	str	r3, [sp, #60]	; 0x3c
  4075d4:	d002      	beq.n	4075dc <_vfprintf_r+0x280>
  4075d6:	9b07      	ldr	r3, [sp, #28]
  4075d8:	3302      	adds	r3, #2
  4075da:	9307      	str	r3, [sp, #28]
  4075dc:	9b06      	ldr	r3, [sp, #24]
  4075de:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  4075e2:	f040 831b 	bne.w	407c1c <_vfprintf_r+0x8c0>
  4075e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4075e8:	9a07      	ldr	r2, [sp, #28]
  4075ea:	eba3 0b02 	sub.w	fp, r3, r2
  4075ee:	f1bb 0f00 	cmp.w	fp, #0
  4075f2:	f340 8313 	ble.w	407c1c <_vfprintf_r+0x8c0>
  4075f6:	f1bb 0f10 	cmp.w	fp, #16
  4075fa:	9925      	ldr	r1, [sp, #148]	; 0x94
  4075fc:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4075fe:	dd28      	ble.n	407652 <_vfprintf_r+0x2f6>
  407600:	4643      	mov	r3, r8
  407602:	2410      	movs	r4, #16
  407604:	46a8      	mov	r8, r5
  407606:	f8dd a020 	ldr.w	sl, [sp, #32]
  40760a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40760c:	e006      	b.n	40761c <_vfprintf_r+0x2c0>
  40760e:	f1ab 0b10 	sub.w	fp, fp, #16
  407612:	f1bb 0f10 	cmp.w	fp, #16
  407616:	f103 0308 	add.w	r3, r3, #8
  40761a:	dd18      	ble.n	40764e <_vfprintf_r+0x2f2>
  40761c:	3201      	adds	r2, #1
  40761e:	48b9      	ldr	r0, [pc, #740]	; (407904 <_vfprintf_r+0x5a8>)
  407620:	9224      	str	r2, [sp, #144]	; 0x90
  407622:	3110      	adds	r1, #16
  407624:	2a07      	cmp	r2, #7
  407626:	9125      	str	r1, [sp, #148]	; 0x94
  407628:	e883 0011 	stmia.w	r3, {r0, r4}
  40762c:	ddef      	ble.n	40760e <_vfprintf_r+0x2b2>
  40762e:	aa23      	add	r2, sp, #140	; 0x8c
  407630:	4629      	mov	r1, r5
  407632:	4650      	mov	r0, sl
  407634:	f003 fc3c 	bl	40aeb0 <__sprint_r>
  407638:	2800      	cmp	r0, #0
  40763a:	f040 836a 	bne.w	407d12 <_vfprintf_r+0x9b6>
  40763e:	f1ab 0b10 	sub.w	fp, fp, #16
  407642:	f1bb 0f10 	cmp.w	fp, #16
  407646:	9925      	ldr	r1, [sp, #148]	; 0x94
  407648:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40764a:	ab30      	add	r3, sp, #192	; 0xc0
  40764c:	dce6      	bgt.n	40761c <_vfprintf_r+0x2c0>
  40764e:	4645      	mov	r5, r8
  407650:	4698      	mov	r8, r3
  407652:	3201      	adds	r2, #1
  407654:	4bab      	ldr	r3, [pc, #684]	; (407904 <_vfprintf_r+0x5a8>)
  407656:	9224      	str	r2, [sp, #144]	; 0x90
  407658:	eb0b 0401 	add.w	r4, fp, r1
  40765c:	2a07      	cmp	r2, #7
  40765e:	9425      	str	r4, [sp, #148]	; 0x94
  407660:	e888 0808 	stmia.w	r8, {r3, fp}
  407664:	f300 84cd 	bgt.w	408002 <_vfprintf_r+0xca6>
  407668:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  40766c:	f108 0808 	add.w	r8, r8, #8
  407670:	f1ba 0f00 	cmp.w	sl, #0
  407674:	d00e      	beq.n	407694 <_vfprintf_r+0x338>
  407676:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407678:	3301      	adds	r3, #1
  40767a:	3401      	adds	r4, #1
  40767c:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  407680:	2201      	movs	r2, #1
  407682:	2b07      	cmp	r3, #7
  407684:	9425      	str	r4, [sp, #148]	; 0x94
  407686:	9324      	str	r3, [sp, #144]	; 0x90
  407688:	e888 0006 	stmia.w	r8, {r1, r2}
  40768c:	f300 840a 	bgt.w	407ea4 <_vfprintf_r+0xb48>
  407690:	f108 0808 	add.w	r8, r8, #8
  407694:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407696:	b16b      	cbz	r3, 4076b4 <_vfprintf_r+0x358>
  407698:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40769a:	3301      	adds	r3, #1
  40769c:	3402      	adds	r4, #2
  40769e:	a91c      	add	r1, sp, #112	; 0x70
  4076a0:	2202      	movs	r2, #2
  4076a2:	2b07      	cmp	r3, #7
  4076a4:	9425      	str	r4, [sp, #148]	; 0x94
  4076a6:	9324      	str	r3, [sp, #144]	; 0x90
  4076a8:	e888 0006 	stmia.w	r8, {r1, r2}
  4076ac:	f300 8406 	bgt.w	407ebc <_vfprintf_r+0xb60>
  4076b0:	f108 0808 	add.w	r8, r8, #8
  4076b4:	2d80      	cmp	r5, #128	; 0x80
  4076b6:	f000 832e 	beq.w	407d16 <_vfprintf_r+0x9ba>
  4076ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4076bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4076be:	eba3 0a02 	sub.w	sl, r3, r2
  4076c2:	f1ba 0f00 	cmp.w	sl, #0
  4076c6:	dd3b      	ble.n	407740 <_vfprintf_r+0x3e4>
  4076c8:	f1ba 0f10 	cmp.w	sl, #16
  4076cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4076ce:	4d8e      	ldr	r5, [pc, #568]	; (407908 <_vfprintf_r+0x5ac>)
  4076d0:	dd2b      	ble.n	40772a <_vfprintf_r+0x3ce>
  4076d2:	4642      	mov	r2, r8
  4076d4:	4621      	mov	r1, r4
  4076d6:	46b0      	mov	r8, r6
  4076d8:	f04f 0b10 	mov.w	fp, #16
  4076dc:	462e      	mov	r6, r5
  4076de:	9c08      	ldr	r4, [sp, #32]
  4076e0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4076e2:	e006      	b.n	4076f2 <_vfprintf_r+0x396>
  4076e4:	f1aa 0a10 	sub.w	sl, sl, #16
  4076e8:	f1ba 0f10 	cmp.w	sl, #16
  4076ec:	f102 0208 	add.w	r2, r2, #8
  4076f0:	dd17      	ble.n	407722 <_vfprintf_r+0x3c6>
  4076f2:	3301      	adds	r3, #1
  4076f4:	3110      	adds	r1, #16
  4076f6:	2b07      	cmp	r3, #7
  4076f8:	9125      	str	r1, [sp, #148]	; 0x94
  4076fa:	9324      	str	r3, [sp, #144]	; 0x90
  4076fc:	e882 0840 	stmia.w	r2, {r6, fp}
  407700:	ddf0      	ble.n	4076e4 <_vfprintf_r+0x388>
  407702:	aa23      	add	r2, sp, #140	; 0x8c
  407704:	4629      	mov	r1, r5
  407706:	4620      	mov	r0, r4
  407708:	f003 fbd2 	bl	40aeb0 <__sprint_r>
  40770c:	2800      	cmp	r0, #0
  40770e:	f040 8300 	bne.w	407d12 <_vfprintf_r+0x9b6>
  407712:	f1aa 0a10 	sub.w	sl, sl, #16
  407716:	f1ba 0f10 	cmp.w	sl, #16
  40771a:	9925      	ldr	r1, [sp, #148]	; 0x94
  40771c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40771e:	aa30      	add	r2, sp, #192	; 0xc0
  407720:	dce7      	bgt.n	4076f2 <_vfprintf_r+0x396>
  407722:	4635      	mov	r5, r6
  407724:	460c      	mov	r4, r1
  407726:	4646      	mov	r6, r8
  407728:	4690      	mov	r8, r2
  40772a:	3301      	adds	r3, #1
  40772c:	4454      	add	r4, sl
  40772e:	2b07      	cmp	r3, #7
  407730:	9425      	str	r4, [sp, #148]	; 0x94
  407732:	9324      	str	r3, [sp, #144]	; 0x90
  407734:	e888 0420 	stmia.w	r8, {r5, sl}
  407738:	f300 83a9 	bgt.w	407e8e <_vfprintf_r+0xb32>
  40773c:	f108 0808 	add.w	r8, r8, #8
  407740:	9b06      	ldr	r3, [sp, #24]
  407742:	05db      	lsls	r3, r3, #23
  407744:	f100 8285 	bmi.w	407c52 <_vfprintf_r+0x8f6>
  407748:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40774a:	990d      	ldr	r1, [sp, #52]	; 0x34
  40774c:	f8c8 7000 	str.w	r7, [r8]
  407750:	3301      	adds	r3, #1
  407752:	440c      	add	r4, r1
  407754:	2b07      	cmp	r3, #7
  407756:	9425      	str	r4, [sp, #148]	; 0x94
  407758:	f8c8 1004 	str.w	r1, [r8, #4]
  40775c:	9324      	str	r3, [sp, #144]	; 0x90
  40775e:	f300 8375 	bgt.w	407e4c <_vfprintf_r+0xaf0>
  407762:	f108 0808 	add.w	r8, r8, #8
  407766:	9b06      	ldr	r3, [sp, #24]
  407768:	0759      	lsls	r1, r3, #29
  40776a:	d53b      	bpl.n	4077e4 <_vfprintf_r+0x488>
  40776c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40776e:	9a07      	ldr	r2, [sp, #28]
  407770:	1a9d      	subs	r5, r3, r2
  407772:	2d00      	cmp	r5, #0
  407774:	dd36      	ble.n	4077e4 <_vfprintf_r+0x488>
  407776:	2d10      	cmp	r5, #16
  407778:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40777a:	dd21      	ble.n	4077c0 <_vfprintf_r+0x464>
  40777c:	2610      	movs	r6, #16
  40777e:	9f08      	ldr	r7, [sp, #32]
  407780:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  407784:	e004      	b.n	407790 <_vfprintf_r+0x434>
  407786:	3d10      	subs	r5, #16
  407788:	2d10      	cmp	r5, #16
  40778a:	f108 0808 	add.w	r8, r8, #8
  40778e:	dd17      	ble.n	4077c0 <_vfprintf_r+0x464>
  407790:	3301      	adds	r3, #1
  407792:	4a5c      	ldr	r2, [pc, #368]	; (407904 <_vfprintf_r+0x5a8>)
  407794:	9324      	str	r3, [sp, #144]	; 0x90
  407796:	3410      	adds	r4, #16
  407798:	2b07      	cmp	r3, #7
  40779a:	9425      	str	r4, [sp, #148]	; 0x94
  40779c:	e888 0044 	stmia.w	r8, {r2, r6}
  4077a0:	ddf1      	ble.n	407786 <_vfprintf_r+0x42a>
  4077a2:	aa23      	add	r2, sp, #140	; 0x8c
  4077a4:	4651      	mov	r1, sl
  4077a6:	4638      	mov	r0, r7
  4077a8:	f003 fb82 	bl	40aeb0 <__sprint_r>
  4077ac:	2800      	cmp	r0, #0
  4077ae:	f040 823f 	bne.w	407c30 <_vfprintf_r+0x8d4>
  4077b2:	3d10      	subs	r5, #16
  4077b4:	2d10      	cmp	r5, #16
  4077b6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4077b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4077ba:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4077be:	dce7      	bgt.n	407790 <_vfprintf_r+0x434>
  4077c0:	3301      	adds	r3, #1
  4077c2:	4a50      	ldr	r2, [pc, #320]	; (407904 <_vfprintf_r+0x5a8>)
  4077c4:	9324      	str	r3, [sp, #144]	; 0x90
  4077c6:	442c      	add	r4, r5
  4077c8:	2b07      	cmp	r3, #7
  4077ca:	9425      	str	r4, [sp, #148]	; 0x94
  4077cc:	e888 0024 	stmia.w	r8, {r2, r5}
  4077d0:	dd08      	ble.n	4077e4 <_vfprintf_r+0x488>
  4077d2:	aa23      	add	r2, sp, #140	; 0x8c
  4077d4:	990a      	ldr	r1, [sp, #40]	; 0x28
  4077d6:	9808      	ldr	r0, [sp, #32]
  4077d8:	f003 fb6a 	bl	40aeb0 <__sprint_r>
  4077dc:	2800      	cmp	r0, #0
  4077de:	f040 8347 	bne.w	407e70 <_vfprintf_r+0xb14>
  4077e2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4077e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4077e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4077e8:	9907      	ldr	r1, [sp, #28]
  4077ea:	428a      	cmp	r2, r1
  4077ec:	bfac      	ite	ge
  4077ee:	189b      	addge	r3, r3, r2
  4077f0:	185b      	addlt	r3, r3, r1
  4077f2:	930b      	str	r3, [sp, #44]	; 0x2c
  4077f4:	2c00      	cmp	r4, #0
  4077f6:	f040 8333 	bne.w	407e60 <_vfprintf_r+0xb04>
  4077fa:	2300      	movs	r3, #0
  4077fc:	9324      	str	r3, [sp, #144]	; 0x90
  4077fe:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407802:	e5f7      	b.n	4073f4 <_vfprintf_r+0x98>
  407804:	4651      	mov	r1, sl
  407806:	9808      	ldr	r0, [sp, #32]
  407808:	f001 f896 	bl	408938 <__swsetup_r>
  40780c:	2800      	cmp	r0, #0
  40780e:	d038      	beq.n	407882 <_vfprintf_r+0x526>
  407810:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  407814:	07dd      	lsls	r5, r3, #31
  407816:	d404      	bmi.n	407822 <_vfprintf_r+0x4c6>
  407818:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  40781c:	059c      	lsls	r4, r3, #22
  40781e:	f140 85ca 	bpl.w	4083b6 <_vfprintf_r+0x105a>
  407822:	f04f 33ff 	mov.w	r3, #4294967295
  407826:	930b      	str	r3, [sp, #44]	; 0x2c
  407828:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40782a:	b041      	add	sp, #260	; 0x104
  40782c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407830:	aa23      	add	r2, sp, #140	; 0x8c
  407832:	990a      	ldr	r1, [sp, #40]	; 0x28
  407834:	9808      	ldr	r0, [sp, #32]
  407836:	f003 fb3b 	bl	40aeb0 <__sprint_r>
  40783a:	2800      	cmp	r0, #0
  40783c:	f040 8318 	bne.w	407e70 <_vfprintf_r+0xb14>
  407840:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407844:	e5f5      	b.n	407432 <_vfprintf_r+0xd6>
  407846:	9808      	ldr	r0, [sp, #32]
  407848:	f002 f9a0 	bl	409b8c <__sinit>
  40784c:	e59c      	b.n	407388 <_vfprintf_r+0x2c>
  40784e:	f9ba 200e 	ldrsh.w	r2, [sl, #14]
  407852:	2a00      	cmp	r2, #0
  407854:	f6ff adbd 	blt.w	4073d2 <_vfprintf_r+0x76>
  407858:	f8da 2064 	ldr.w	r2, [sl, #100]	; 0x64
  40785c:	07d0      	lsls	r0, r2, #31
  40785e:	d405      	bmi.n	40786c <_vfprintf_r+0x510>
  407860:	0599      	lsls	r1, r3, #22
  407862:	d403      	bmi.n	40786c <_vfprintf_r+0x510>
  407864:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  407868:	f002 fcce 	bl	40a208 <__retarget_lock_release_recursive>
  40786c:	462b      	mov	r3, r5
  40786e:	464a      	mov	r2, r9
  407870:	4651      	mov	r1, sl
  407872:	9808      	ldr	r0, [sp, #32]
  407874:	f001 f81e 	bl	4088b4 <__sbprintf>
  407878:	900b      	str	r0, [sp, #44]	; 0x2c
  40787a:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40787c:	b041      	add	sp, #260	; 0x104
  40787e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407882:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  407886:	e59f      	b.n	4073c8 <_vfprintf_r+0x6c>
  407888:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  40788c:	f002 fcba 	bl	40a204 <__retarget_lock_acquire_recursive>
  407890:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
  407894:	b293      	uxth	r3, r2
  407896:	e582      	b.n	40739e <_vfprintf_r+0x42>
  407898:	980c      	ldr	r0, [sp, #48]	; 0x30
  40789a:	930e      	str	r3, [sp, #56]	; 0x38
  40789c:	4240      	negs	r0, r0
  40789e:	900c      	str	r0, [sp, #48]	; 0x30
  4078a0:	f04b 0b04 	orr.w	fp, fp, #4
  4078a4:	f899 6000 	ldrb.w	r6, [r9]
  4078a8:	e5d7      	b.n	40745a <_vfprintf_r+0xfe>
  4078aa:	2a00      	cmp	r2, #0
  4078ac:	f040 87df 	bne.w	40886e <_vfprintf_r+0x1512>
  4078b0:	4b16      	ldr	r3, [pc, #88]	; (40790c <_vfprintf_r+0x5b0>)
  4078b2:	9318      	str	r3, [sp, #96]	; 0x60
  4078b4:	f01b 0f20 	tst.w	fp, #32
  4078b8:	f040 84b9 	bne.w	40822e <_vfprintf_r+0xed2>
  4078bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4078be:	f01b 0f10 	tst.w	fp, #16
  4078c2:	4613      	mov	r3, r2
  4078c4:	f040 83dc 	bne.w	408080 <_vfprintf_r+0xd24>
  4078c8:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4078cc:	f000 83d8 	beq.w	408080 <_vfprintf_r+0xd24>
  4078d0:	3304      	adds	r3, #4
  4078d2:	8814      	ldrh	r4, [r2, #0]
  4078d4:	930e      	str	r3, [sp, #56]	; 0x38
  4078d6:	2500      	movs	r5, #0
  4078d8:	f01b 0f01 	tst.w	fp, #1
  4078dc:	f000 8322 	beq.w	407f24 <_vfprintf_r+0xbc8>
  4078e0:	ea54 0305 	orrs.w	r3, r4, r5
  4078e4:	f000 831e 	beq.w	407f24 <_vfprintf_r+0xbc8>
  4078e8:	2330      	movs	r3, #48	; 0x30
  4078ea:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  4078ee:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  4078f2:	f04b 0b02 	orr.w	fp, fp, #2
  4078f6:	2302      	movs	r3, #2
  4078f8:	e63c      	b.n	407574 <_vfprintf_r+0x218>
  4078fa:	f04b 0b20 	orr.w	fp, fp, #32
  4078fe:	f899 6000 	ldrb.w	r6, [r9]
  407902:	e5aa      	b.n	40745a <_vfprintf_r+0xfe>
  407904:	0040bd88 	.word	0x0040bd88
  407908:	0040bd98 	.word	0x0040bd98
  40790c:	0040bd68 	.word	0x0040bd68
  407910:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  407912:	6817      	ldr	r7, [r2, #0]
  407914:	2400      	movs	r4, #0
  407916:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  40791a:	1d15      	adds	r5, r2, #4
  40791c:	2f00      	cmp	r7, #0
  40791e:	f000 864e 	beq.w	4085be <_vfprintf_r+0x1262>
  407922:	9a09      	ldr	r2, [sp, #36]	; 0x24
  407924:	1c53      	adds	r3, r2, #1
  407926:	f000 85cc 	beq.w	4084c2 <_vfprintf_r+0x1166>
  40792a:	4621      	mov	r1, r4
  40792c:	4638      	mov	r0, r7
  40792e:	f002 fce7 	bl	40a300 <memchr>
  407932:	2800      	cmp	r0, #0
  407934:	f000 8697 	beq.w	408666 <_vfprintf_r+0x130a>
  407938:	1bc3      	subs	r3, r0, r7
  40793a:	930d      	str	r3, [sp, #52]	; 0x34
  40793c:	9409      	str	r4, [sp, #36]	; 0x24
  40793e:	950e      	str	r5, [sp, #56]	; 0x38
  407940:	f8cd b018 	str.w	fp, [sp, #24]
  407944:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407948:	9307      	str	r3, [sp, #28]
  40794a:	9410      	str	r4, [sp, #64]	; 0x40
  40794c:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  407950:	e636      	b.n	4075c0 <_vfprintf_r+0x264>
  407952:	2a00      	cmp	r2, #0
  407954:	f040 8796 	bne.w	408884 <_vfprintf_r+0x1528>
  407958:	f01b 0f20 	tst.w	fp, #32
  40795c:	f040 845a 	bne.w	408214 <_vfprintf_r+0xeb8>
  407960:	f01b 0f10 	tst.w	fp, #16
  407964:	f040 83a2 	bne.w	4080ac <_vfprintf_r+0xd50>
  407968:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40796c:	f000 839e 	beq.w	4080ac <_vfprintf_r+0xd50>
  407970:	990e      	ldr	r1, [sp, #56]	; 0x38
  407972:	f9b1 4000 	ldrsh.w	r4, [r1]
  407976:	3104      	adds	r1, #4
  407978:	17e5      	asrs	r5, r4, #31
  40797a:	4622      	mov	r2, r4
  40797c:	462b      	mov	r3, r5
  40797e:	910e      	str	r1, [sp, #56]	; 0x38
  407980:	2a00      	cmp	r2, #0
  407982:	f173 0300 	sbcs.w	r3, r3, #0
  407986:	f2c0 8487 	blt.w	408298 <_vfprintf_r+0xf3c>
  40798a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40798c:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  407990:	1c4a      	adds	r2, r1, #1
  407992:	f04f 0301 	mov.w	r3, #1
  407996:	f47f adf5 	bne.w	407584 <_vfprintf_r+0x228>
  40799a:	ea54 0205 	orrs.w	r2, r4, r5
  40799e:	f000 826c 	beq.w	407e7a <_vfprintf_r+0xb1e>
  4079a2:	f8cd b018 	str.w	fp, [sp, #24]
  4079a6:	2b01      	cmp	r3, #1
  4079a8:	f000 8308 	beq.w	407fbc <_vfprintf_r+0xc60>
  4079ac:	2b02      	cmp	r3, #2
  4079ae:	f040 8295 	bne.w	407edc <_vfprintf_r+0xb80>
  4079b2:	9818      	ldr	r0, [sp, #96]	; 0x60
  4079b4:	af30      	add	r7, sp, #192	; 0xc0
  4079b6:	0923      	lsrs	r3, r4, #4
  4079b8:	f004 010f 	and.w	r1, r4, #15
  4079bc:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  4079c0:	092a      	lsrs	r2, r5, #4
  4079c2:	461c      	mov	r4, r3
  4079c4:	4615      	mov	r5, r2
  4079c6:	5c43      	ldrb	r3, [r0, r1]
  4079c8:	f807 3d01 	strb.w	r3, [r7, #-1]!
  4079cc:	ea54 0305 	orrs.w	r3, r4, r5
  4079d0:	d1f1      	bne.n	4079b6 <_vfprintf_r+0x65a>
  4079d2:	ab30      	add	r3, sp, #192	; 0xc0
  4079d4:	1bdb      	subs	r3, r3, r7
  4079d6:	930d      	str	r3, [sp, #52]	; 0x34
  4079d8:	e5ea      	b.n	4075b0 <_vfprintf_r+0x254>
  4079da:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  4079de:	f899 6000 	ldrb.w	r6, [r9]
  4079e2:	e53a      	b.n	40745a <_vfprintf_r+0xfe>
  4079e4:	f899 6000 	ldrb.w	r6, [r9]
  4079e8:	2e6c      	cmp	r6, #108	; 0x6c
  4079ea:	bf03      	ittte	eq
  4079ec:	f899 6001 	ldrbeq.w	r6, [r9, #1]
  4079f0:	f04b 0b20 	orreq.w	fp, fp, #32
  4079f4:	f109 0901 	addeq.w	r9, r9, #1
  4079f8:	f04b 0b10 	orrne.w	fp, fp, #16
  4079fc:	e52d      	b.n	40745a <_vfprintf_r+0xfe>
  4079fe:	2a00      	cmp	r2, #0
  407a00:	f040 874c 	bne.w	40889c <_vfprintf_r+0x1540>
  407a04:	f01b 0f20 	tst.w	fp, #32
  407a08:	f040 853f 	bne.w	40848a <_vfprintf_r+0x112e>
  407a0c:	f01b 0f10 	tst.w	fp, #16
  407a10:	f040 80fc 	bne.w	407c0c <_vfprintf_r+0x8b0>
  407a14:	f01b 0f40 	tst.w	fp, #64	; 0x40
  407a18:	f000 80f8 	beq.w	407c0c <_vfprintf_r+0x8b0>
  407a1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  407a1e:	6813      	ldr	r3, [r2, #0]
  407a20:	3204      	adds	r2, #4
  407a22:	920e      	str	r2, [sp, #56]	; 0x38
  407a24:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  407a28:	801a      	strh	r2, [r3, #0]
  407a2a:	e4e3      	b.n	4073f4 <_vfprintf_r+0x98>
  407a2c:	f899 6000 	ldrb.w	r6, [r9]
  407a30:	2900      	cmp	r1, #0
  407a32:	f47f ad12 	bne.w	40745a <_vfprintf_r+0xfe>
  407a36:	2201      	movs	r2, #1
  407a38:	2120      	movs	r1, #32
  407a3a:	e50e      	b.n	40745a <_vfprintf_r+0xfe>
  407a3c:	f899 6000 	ldrb.w	r6, [r9]
  407a40:	2e2a      	cmp	r6, #42	; 0x2a
  407a42:	f109 0001 	add.w	r0, r9, #1
  407a46:	f000 86f1 	beq.w	40882c <_vfprintf_r+0x14d0>
  407a4a:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  407a4e:	2b09      	cmp	r3, #9
  407a50:	4681      	mov	r9, r0
  407a52:	bf98      	it	ls
  407a54:	2000      	movls	r0, #0
  407a56:	f200 863d 	bhi.w	4086d4 <_vfprintf_r+0x1378>
  407a5a:	f819 6b01 	ldrb.w	r6, [r9], #1
  407a5e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  407a62:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  407a66:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  407a6a:	2b09      	cmp	r3, #9
  407a6c:	d9f5      	bls.n	407a5a <_vfprintf_r+0x6fe>
  407a6e:	9009      	str	r0, [sp, #36]	; 0x24
  407a70:	e4f5      	b.n	40745e <_vfprintf_r+0x102>
  407a72:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  407a76:	f899 6000 	ldrb.w	r6, [r9]
  407a7a:	e4ee      	b.n	40745a <_vfprintf_r+0xfe>
  407a7c:	f899 6000 	ldrb.w	r6, [r9]
  407a80:	2201      	movs	r2, #1
  407a82:	212b      	movs	r1, #43	; 0x2b
  407a84:	e4e9      	b.n	40745a <_vfprintf_r+0xfe>
  407a86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  407a88:	4bae      	ldr	r3, [pc, #696]	; (407d44 <_vfprintf_r+0x9e8>)
  407a8a:	6814      	ldr	r4, [r2, #0]
  407a8c:	9318      	str	r3, [sp, #96]	; 0x60
  407a8e:	2678      	movs	r6, #120	; 0x78
  407a90:	2330      	movs	r3, #48	; 0x30
  407a92:	3204      	adds	r2, #4
  407a94:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  407a98:	f04b 0b02 	orr.w	fp, fp, #2
  407a9c:	920e      	str	r2, [sp, #56]	; 0x38
  407a9e:	2500      	movs	r5, #0
  407aa0:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  407aa4:	2302      	movs	r3, #2
  407aa6:	e565      	b.n	407574 <_vfprintf_r+0x218>
  407aa8:	2a00      	cmp	r2, #0
  407aaa:	f040 86e4 	bne.w	408876 <_vfprintf_r+0x151a>
  407aae:	4ba6      	ldr	r3, [pc, #664]	; (407d48 <_vfprintf_r+0x9ec>)
  407ab0:	9318      	str	r3, [sp, #96]	; 0x60
  407ab2:	e6ff      	b.n	4078b4 <_vfprintf_r+0x558>
  407ab4:	990e      	ldr	r1, [sp, #56]	; 0x38
  407ab6:	f8cd b018 	str.w	fp, [sp, #24]
  407aba:	680a      	ldr	r2, [r1, #0]
  407abc:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  407ac0:	2300      	movs	r3, #0
  407ac2:	460a      	mov	r2, r1
  407ac4:	469a      	mov	sl, r3
  407ac6:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  407aca:	3204      	adds	r2, #4
  407acc:	2301      	movs	r3, #1
  407ace:	9307      	str	r3, [sp, #28]
  407ad0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  407ad4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  407ad8:	920e      	str	r2, [sp, #56]	; 0x38
  407ada:	930d      	str	r3, [sp, #52]	; 0x34
  407adc:	af26      	add	r7, sp, #152	; 0x98
  407ade:	e575      	b.n	4075cc <_vfprintf_r+0x270>
  407ae0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  407ae4:	2000      	movs	r0, #0
  407ae6:	f819 6b01 	ldrb.w	r6, [r9], #1
  407aea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  407aee:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  407af2:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  407af6:	2b09      	cmp	r3, #9
  407af8:	d9f5      	bls.n	407ae6 <_vfprintf_r+0x78a>
  407afa:	900c      	str	r0, [sp, #48]	; 0x30
  407afc:	e4af      	b.n	40745e <_vfprintf_r+0x102>
  407afe:	2a00      	cmp	r2, #0
  407b00:	f040 86c8 	bne.w	408894 <_vfprintf_r+0x1538>
  407b04:	f04b 0b10 	orr.w	fp, fp, #16
  407b08:	e726      	b.n	407958 <_vfprintf_r+0x5fc>
  407b0a:	f04b 0b01 	orr.w	fp, fp, #1
  407b0e:	f899 6000 	ldrb.w	r6, [r9]
  407b12:	e4a2      	b.n	40745a <_vfprintf_r+0xfe>
  407b14:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  407b16:	6823      	ldr	r3, [r4, #0]
  407b18:	930c      	str	r3, [sp, #48]	; 0x30
  407b1a:	4618      	mov	r0, r3
  407b1c:	2800      	cmp	r0, #0
  407b1e:	4623      	mov	r3, r4
  407b20:	f103 0304 	add.w	r3, r3, #4
  407b24:	f6ff aeb8 	blt.w	407898 <_vfprintf_r+0x53c>
  407b28:	930e      	str	r3, [sp, #56]	; 0x38
  407b2a:	f899 6000 	ldrb.w	r6, [r9]
  407b2e:	e494      	b.n	40745a <_vfprintf_r+0xfe>
  407b30:	2a00      	cmp	r2, #0
  407b32:	f040 86b7 	bne.w	4088a4 <_vfprintf_r+0x1548>
  407b36:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  407b38:	3507      	adds	r5, #7
  407b3a:	f025 0307 	bic.w	r3, r5, #7
  407b3e:	f103 0208 	add.w	r2, r3, #8
  407b42:	920e      	str	r2, [sp, #56]	; 0x38
  407b44:	681a      	ldr	r2, [r3, #0]
  407b46:	9213      	str	r2, [sp, #76]	; 0x4c
  407b48:	685b      	ldr	r3, [r3, #4]
  407b4a:	9312      	str	r3, [sp, #72]	; 0x48
  407b4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407b4e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
  407b50:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  407b54:	4628      	mov	r0, r5
  407b56:	4621      	mov	r1, r4
  407b58:	f04f 32ff 	mov.w	r2, #4294967295
  407b5c:	4b7b      	ldr	r3, [pc, #492]	; (407d4c <_vfprintf_r+0x9f0>)
  407b5e:	f7fe fadb 	bl	406118 <__aeabi_dcmpun>
  407b62:	2800      	cmp	r0, #0
  407b64:	f040 83a2 	bne.w	4082ac <_vfprintf_r+0xf50>
  407b68:	4628      	mov	r0, r5
  407b6a:	4621      	mov	r1, r4
  407b6c:	f04f 32ff 	mov.w	r2, #4294967295
  407b70:	4b76      	ldr	r3, [pc, #472]	; (407d4c <_vfprintf_r+0x9f0>)
  407b72:	f7fe fab3 	bl	4060dc <__aeabi_dcmple>
  407b76:	2800      	cmp	r0, #0
  407b78:	f040 8398 	bne.w	4082ac <_vfprintf_r+0xf50>
  407b7c:	9a16      	ldr	r2, [sp, #88]	; 0x58
  407b7e:	9813      	ldr	r0, [sp, #76]	; 0x4c
  407b80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  407b82:	9912      	ldr	r1, [sp, #72]	; 0x48
  407b84:	f7fe faa0 	bl	4060c8 <__aeabi_dcmplt>
  407b88:	2800      	cmp	r0, #0
  407b8a:	f040 8435 	bne.w	4083f8 <_vfprintf_r+0x109c>
  407b8e:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  407b92:	4f6f      	ldr	r7, [pc, #444]	; (407d50 <_vfprintf_r+0x9f4>)
  407b94:	4b6f      	ldr	r3, [pc, #444]	; (407d54 <_vfprintf_r+0x9f8>)
  407b96:	2203      	movs	r2, #3
  407b98:	2100      	movs	r1, #0
  407b9a:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  407b9e:	9207      	str	r2, [sp, #28]
  407ba0:	9109      	str	r1, [sp, #36]	; 0x24
  407ba2:	9006      	str	r0, [sp, #24]
  407ba4:	2e47      	cmp	r6, #71	; 0x47
  407ba6:	bfd8      	it	le
  407ba8:	461f      	movle	r7, r3
  407baa:	920d      	str	r2, [sp, #52]	; 0x34
  407bac:	9110      	str	r1, [sp, #64]	; 0x40
  407bae:	e507      	b.n	4075c0 <_vfprintf_r+0x264>
  407bb0:	f04b 0b08 	orr.w	fp, fp, #8
  407bb4:	f899 6000 	ldrb.w	r6, [r9]
  407bb8:	e44f      	b.n	40745a <_vfprintf_r+0xfe>
  407bba:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  407bbc:	3507      	adds	r5, #7
  407bbe:	f025 0307 	bic.w	r3, r5, #7
  407bc2:	f103 0208 	add.w	r2, r3, #8
  407bc6:	e9d3 4500 	ldrd	r4, r5, [r3]
  407bca:	920e      	str	r2, [sp, #56]	; 0x38
  407bcc:	2300      	movs	r3, #0
  407bce:	e4d1      	b.n	407574 <_vfprintf_r+0x218>
  407bd0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  407bd2:	3507      	adds	r5, #7
  407bd4:	f025 0307 	bic.w	r3, r5, #7
  407bd8:	f103 0208 	add.w	r2, r3, #8
  407bdc:	e9d3 4500 	ldrd	r4, r5, [r3]
  407be0:	920e      	str	r2, [sp, #56]	; 0x38
  407be2:	2301      	movs	r3, #1
  407be4:	e4c6      	b.n	407574 <_vfprintf_r+0x218>
  407be6:	2a00      	cmp	r2, #0
  407be8:	f040 8650 	bne.w	40888c <_vfprintf_r+0x1530>
  407bec:	b1c6      	cbz	r6, 407c20 <_vfprintf_r+0x8c4>
  407bee:	2300      	movs	r3, #0
  407bf0:	2201      	movs	r2, #1
  407bf2:	469a      	mov	sl, r3
  407bf4:	9207      	str	r2, [sp, #28]
  407bf6:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
  407bfa:	f8cd b018 	str.w	fp, [sp, #24]
  407bfe:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  407c02:	9309      	str	r3, [sp, #36]	; 0x24
  407c04:	9310      	str	r3, [sp, #64]	; 0x40
  407c06:	920d      	str	r2, [sp, #52]	; 0x34
  407c08:	af26      	add	r7, sp, #152	; 0x98
  407c0a:	e4df      	b.n	4075cc <_vfprintf_r+0x270>
  407c0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  407c0e:	6813      	ldr	r3, [r2, #0]
  407c10:	3204      	adds	r2, #4
  407c12:	920e      	str	r2, [sp, #56]	; 0x38
  407c14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  407c16:	601a      	str	r2, [r3, #0]
  407c18:	f7ff bbec 	b.w	4073f4 <_vfprintf_r+0x98>
  407c1c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  407c1e:	e527      	b.n	407670 <_vfprintf_r+0x314>
  407c20:	9b25      	ldr	r3, [sp, #148]	; 0x94
  407c22:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  407c26:	2b00      	cmp	r3, #0
  407c28:	f040 8594 	bne.w	408754 <_vfprintf_r+0x13f8>
  407c2c:	2300      	movs	r3, #0
  407c2e:	9324      	str	r3, [sp, #144]	; 0x90
  407c30:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  407c34:	f013 0f01 	tst.w	r3, #1
  407c38:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  407c3c:	d102      	bne.n	407c44 <_vfprintf_r+0x8e8>
  407c3e:	059a      	lsls	r2, r3, #22
  407c40:	f140 8249 	bpl.w	4080d6 <_vfprintf_r+0xd7a>
  407c44:	065b      	lsls	r3, r3, #25
  407c46:	f53f adec 	bmi.w	407822 <_vfprintf_r+0x4c6>
  407c4a:	980b      	ldr	r0, [sp, #44]	; 0x2c
  407c4c:	b041      	add	sp, #260	; 0x104
  407c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407c52:	2e65      	cmp	r6, #101	; 0x65
  407c54:	f340 80b2 	ble.w	407dbc <_vfprintf_r+0xa60>
  407c58:	9a16      	ldr	r2, [sp, #88]	; 0x58
  407c5a:	9813      	ldr	r0, [sp, #76]	; 0x4c
  407c5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  407c5e:	9912      	ldr	r1, [sp, #72]	; 0x48
  407c60:	f7fe fa28 	bl	4060b4 <__aeabi_dcmpeq>
  407c64:	2800      	cmp	r0, #0
  407c66:	f000 8160 	beq.w	407f2a <_vfprintf_r+0xbce>
  407c6a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407c6c:	4a3a      	ldr	r2, [pc, #232]	; (407d58 <_vfprintf_r+0x9fc>)
  407c6e:	f8c8 2000 	str.w	r2, [r8]
  407c72:	3301      	adds	r3, #1
  407c74:	3401      	adds	r4, #1
  407c76:	2201      	movs	r2, #1
  407c78:	2b07      	cmp	r3, #7
  407c7a:	9425      	str	r4, [sp, #148]	; 0x94
  407c7c:	9324      	str	r3, [sp, #144]	; 0x90
  407c7e:	f8c8 2004 	str.w	r2, [r8, #4]
  407c82:	f300 83bf 	bgt.w	408404 <_vfprintf_r+0x10a8>
  407c86:	f108 0808 	add.w	r8, r8, #8
  407c8a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  407c8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407c8e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  407c90:	4293      	cmp	r3, r2
  407c92:	db03      	blt.n	407c9c <_vfprintf_r+0x940>
  407c94:	9b06      	ldr	r3, [sp, #24]
  407c96:	07df      	lsls	r7, r3, #31
  407c98:	f57f ad65 	bpl.w	407766 <_vfprintf_r+0x40a>
  407c9c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407c9e:	9914      	ldr	r1, [sp, #80]	; 0x50
  407ca0:	9a15      	ldr	r2, [sp, #84]	; 0x54
  407ca2:	f8c8 2000 	str.w	r2, [r8]
  407ca6:	3301      	adds	r3, #1
  407ca8:	440c      	add	r4, r1
  407caa:	2b07      	cmp	r3, #7
  407cac:	f8c8 1004 	str.w	r1, [r8, #4]
  407cb0:	9425      	str	r4, [sp, #148]	; 0x94
  407cb2:	9324      	str	r3, [sp, #144]	; 0x90
  407cb4:	f300 83f8 	bgt.w	4084a8 <_vfprintf_r+0x114c>
  407cb8:	f108 0808 	add.w	r8, r8, #8
  407cbc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407cbe:	1e5e      	subs	r6, r3, #1
  407cc0:	2e00      	cmp	r6, #0
  407cc2:	f77f ad50 	ble.w	407766 <_vfprintf_r+0x40a>
  407cc6:	2e10      	cmp	r6, #16
  407cc8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407cca:	4d24      	ldr	r5, [pc, #144]	; (407d5c <_vfprintf_r+0xa00>)
  407ccc:	f340 81dd 	ble.w	40808a <_vfprintf_r+0xd2e>
  407cd0:	2710      	movs	r7, #16
  407cd2:	f8dd a020 	ldr.w	sl, [sp, #32]
  407cd6:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  407cda:	e005      	b.n	407ce8 <_vfprintf_r+0x98c>
  407cdc:	f108 0808 	add.w	r8, r8, #8
  407ce0:	3e10      	subs	r6, #16
  407ce2:	2e10      	cmp	r6, #16
  407ce4:	f340 81d1 	ble.w	40808a <_vfprintf_r+0xd2e>
  407ce8:	3301      	adds	r3, #1
  407cea:	3410      	adds	r4, #16
  407cec:	2b07      	cmp	r3, #7
  407cee:	9425      	str	r4, [sp, #148]	; 0x94
  407cf0:	9324      	str	r3, [sp, #144]	; 0x90
  407cf2:	e888 00a0 	stmia.w	r8, {r5, r7}
  407cf6:	ddf1      	ble.n	407cdc <_vfprintf_r+0x980>
  407cf8:	aa23      	add	r2, sp, #140	; 0x8c
  407cfa:	4659      	mov	r1, fp
  407cfc:	4650      	mov	r0, sl
  407cfe:	f003 f8d7 	bl	40aeb0 <__sprint_r>
  407d02:	2800      	cmp	r0, #0
  407d04:	f040 83cd 	bne.w	4084a2 <_vfprintf_r+0x1146>
  407d08:	9c25      	ldr	r4, [sp, #148]	; 0x94
  407d0a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407d0c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407d10:	e7e6      	b.n	407ce0 <_vfprintf_r+0x984>
  407d12:	46aa      	mov	sl, r5
  407d14:	e78c      	b.n	407c30 <_vfprintf_r+0x8d4>
  407d16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407d18:	9a07      	ldr	r2, [sp, #28]
  407d1a:	eba3 0a02 	sub.w	sl, r3, r2
  407d1e:	f1ba 0f00 	cmp.w	sl, #0
  407d22:	f77f acca 	ble.w	4076ba <_vfprintf_r+0x35e>
  407d26:	f1ba 0f10 	cmp.w	sl, #16
  407d2a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407d2c:	4d0b      	ldr	r5, [pc, #44]	; (407d5c <_vfprintf_r+0xa00>)
  407d2e:	dd39      	ble.n	407da4 <_vfprintf_r+0xa48>
  407d30:	4642      	mov	r2, r8
  407d32:	4621      	mov	r1, r4
  407d34:	46b0      	mov	r8, r6
  407d36:	f04f 0b10 	mov.w	fp, #16
  407d3a:	462e      	mov	r6, r5
  407d3c:	9c08      	ldr	r4, [sp, #32]
  407d3e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  407d40:	e015      	b.n	407d6e <_vfprintf_r+0xa12>
  407d42:	bf00      	nop
  407d44:	0040bd68 	.word	0x0040bd68
  407d48:	0040bd54 	.word	0x0040bd54
  407d4c:	7fefffff 	.word	0x7fefffff
  407d50:	0040bd48 	.word	0x0040bd48
  407d54:	0040bd44 	.word	0x0040bd44
  407d58:	0040bd84 	.word	0x0040bd84
  407d5c:	0040bd98 	.word	0x0040bd98
  407d60:	f1aa 0a10 	sub.w	sl, sl, #16
  407d64:	f1ba 0f10 	cmp.w	sl, #16
  407d68:	f102 0208 	add.w	r2, r2, #8
  407d6c:	dd16      	ble.n	407d9c <_vfprintf_r+0xa40>
  407d6e:	3301      	adds	r3, #1
  407d70:	3110      	adds	r1, #16
  407d72:	2b07      	cmp	r3, #7
  407d74:	9125      	str	r1, [sp, #148]	; 0x94
  407d76:	9324      	str	r3, [sp, #144]	; 0x90
  407d78:	e882 0840 	stmia.w	r2, {r6, fp}
  407d7c:	ddf0      	ble.n	407d60 <_vfprintf_r+0xa04>
  407d7e:	aa23      	add	r2, sp, #140	; 0x8c
  407d80:	4629      	mov	r1, r5
  407d82:	4620      	mov	r0, r4
  407d84:	f003 f894 	bl	40aeb0 <__sprint_r>
  407d88:	2800      	cmp	r0, #0
  407d8a:	d1c2      	bne.n	407d12 <_vfprintf_r+0x9b6>
  407d8c:	f1aa 0a10 	sub.w	sl, sl, #16
  407d90:	f1ba 0f10 	cmp.w	sl, #16
  407d94:	9925      	ldr	r1, [sp, #148]	; 0x94
  407d96:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407d98:	aa30      	add	r2, sp, #192	; 0xc0
  407d9a:	dce8      	bgt.n	407d6e <_vfprintf_r+0xa12>
  407d9c:	4635      	mov	r5, r6
  407d9e:	460c      	mov	r4, r1
  407da0:	4646      	mov	r6, r8
  407da2:	4690      	mov	r8, r2
  407da4:	3301      	adds	r3, #1
  407da6:	4454      	add	r4, sl
  407da8:	2b07      	cmp	r3, #7
  407daa:	9425      	str	r4, [sp, #148]	; 0x94
  407dac:	9324      	str	r3, [sp, #144]	; 0x90
  407dae:	e888 0420 	stmia.w	r8, {r5, sl}
  407db2:	f300 8264 	bgt.w	40827e <_vfprintf_r+0xf22>
  407db6:	f108 0808 	add.w	r8, r8, #8
  407dba:	e47e      	b.n	4076ba <_vfprintf_r+0x35e>
  407dbc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407dbe:	9e24      	ldr	r6, [sp, #144]	; 0x90
  407dc0:	2b01      	cmp	r3, #1
  407dc2:	f340 81fd 	ble.w	4081c0 <_vfprintf_r+0xe64>
  407dc6:	3601      	adds	r6, #1
  407dc8:	3401      	adds	r4, #1
  407dca:	2301      	movs	r3, #1
  407dcc:	2e07      	cmp	r6, #7
  407dce:	9425      	str	r4, [sp, #148]	; 0x94
  407dd0:	9624      	str	r6, [sp, #144]	; 0x90
  407dd2:	f8c8 7000 	str.w	r7, [r8]
  407dd6:	f8c8 3004 	str.w	r3, [r8, #4]
  407dda:	f300 820e 	bgt.w	4081fa <_vfprintf_r+0xe9e>
  407dde:	f108 0808 	add.w	r8, r8, #8
  407de2:	9a14      	ldr	r2, [sp, #80]	; 0x50
  407de4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  407de6:	f8c8 3000 	str.w	r3, [r8]
  407dea:	3601      	adds	r6, #1
  407dec:	4414      	add	r4, r2
  407dee:	2e07      	cmp	r6, #7
  407df0:	9425      	str	r4, [sp, #148]	; 0x94
  407df2:	9624      	str	r6, [sp, #144]	; 0x90
  407df4:	f8c8 2004 	str.w	r2, [r8, #4]
  407df8:	f300 822e 	bgt.w	408258 <_vfprintf_r+0xefc>
  407dfc:	f108 0808 	add.w	r8, r8, #8
  407e00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  407e02:	9a16      	ldr	r2, [sp, #88]	; 0x58
  407e04:	9813      	ldr	r0, [sp, #76]	; 0x4c
  407e06:	9912      	ldr	r1, [sp, #72]	; 0x48
  407e08:	f7fe f954 	bl	4060b4 <__aeabi_dcmpeq>
  407e0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407e0e:	2800      	cmp	r0, #0
  407e10:	f040 8106 	bne.w	408020 <_vfprintf_r+0xcc4>
  407e14:	3b01      	subs	r3, #1
  407e16:	3601      	adds	r6, #1
  407e18:	3701      	adds	r7, #1
  407e1a:	441c      	add	r4, r3
  407e1c:	2e07      	cmp	r6, #7
  407e1e:	9624      	str	r6, [sp, #144]	; 0x90
  407e20:	9425      	str	r4, [sp, #148]	; 0x94
  407e22:	f8c8 7000 	str.w	r7, [r8]
  407e26:	f8c8 3004 	str.w	r3, [r8, #4]
  407e2a:	f300 81d9 	bgt.w	4081e0 <_vfprintf_r+0xe84>
  407e2e:	f108 0808 	add.w	r8, r8, #8
  407e32:	9a19      	ldr	r2, [sp, #100]	; 0x64
  407e34:	f8c8 2004 	str.w	r2, [r8, #4]
  407e38:	3601      	adds	r6, #1
  407e3a:	4414      	add	r4, r2
  407e3c:	ab1f      	add	r3, sp, #124	; 0x7c
  407e3e:	2e07      	cmp	r6, #7
  407e40:	9425      	str	r4, [sp, #148]	; 0x94
  407e42:	9624      	str	r6, [sp, #144]	; 0x90
  407e44:	f8c8 3000 	str.w	r3, [r8]
  407e48:	f77f ac8b 	ble.w	407762 <_vfprintf_r+0x406>
  407e4c:	aa23      	add	r2, sp, #140	; 0x8c
  407e4e:	990a      	ldr	r1, [sp, #40]	; 0x28
  407e50:	9808      	ldr	r0, [sp, #32]
  407e52:	f003 f82d 	bl	40aeb0 <__sprint_r>
  407e56:	b958      	cbnz	r0, 407e70 <_vfprintf_r+0xb14>
  407e58:	9c25      	ldr	r4, [sp, #148]	; 0x94
  407e5a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407e5e:	e482      	b.n	407766 <_vfprintf_r+0x40a>
  407e60:	aa23      	add	r2, sp, #140	; 0x8c
  407e62:	990a      	ldr	r1, [sp, #40]	; 0x28
  407e64:	9808      	ldr	r0, [sp, #32]
  407e66:	f003 f823 	bl	40aeb0 <__sprint_r>
  407e6a:	2800      	cmp	r0, #0
  407e6c:	f43f acc5 	beq.w	4077fa <_vfprintf_r+0x49e>
  407e70:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  407e74:	e6dc      	b.n	407c30 <_vfprintf_r+0x8d4>
  407e76:	f8dd b018 	ldr.w	fp, [sp, #24]
  407e7a:	2b01      	cmp	r3, #1
  407e7c:	f000 8121 	beq.w	4080c2 <_vfprintf_r+0xd66>
  407e80:	2b02      	cmp	r3, #2
  407e82:	d127      	bne.n	407ed4 <_vfprintf_r+0xb78>
  407e84:	f8cd b018 	str.w	fp, [sp, #24]
  407e88:	2400      	movs	r4, #0
  407e8a:	2500      	movs	r5, #0
  407e8c:	e591      	b.n	4079b2 <_vfprintf_r+0x656>
  407e8e:	aa23      	add	r2, sp, #140	; 0x8c
  407e90:	990a      	ldr	r1, [sp, #40]	; 0x28
  407e92:	9808      	ldr	r0, [sp, #32]
  407e94:	f003 f80c 	bl	40aeb0 <__sprint_r>
  407e98:	2800      	cmp	r0, #0
  407e9a:	d1e9      	bne.n	407e70 <_vfprintf_r+0xb14>
  407e9c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  407e9e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407ea2:	e44d      	b.n	407740 <_vfprintf_r+0x3e4>
  407ea4:	aa23      	add	r2, sp, #140	; 0x8c
  407ea6:	990a      	ldr	r1, [sp, #40]	; 0x28
  407ea8:	9808      	ldr	r0, [sp, #32]
  407eaa:	f003 f801 	bl	40aeb0 <__sprint_r>
  407eae:	2800      	cmp	r0, #0
  407eb0:	d1de      	bne.n	407e70 <_vfprintf_r+0xb14>
  407eb2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  407eb4:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407eb8:	f7ff bbec 	b.w	407694 <_vfprintf_r+0x338>
  407ebc:	aa23      	add	r2, sp, #140	; 0x8c
  407ebe:	990a      	ldr	r1, [sp, #40]	; 0x28
  407ec0:	9808      	ldr	r0, [sp, #32]
  407ec2:	f002 fff5 	bl	40aeb0 <__sprint_r>
  407ec6:	2800      	cmp	r0, #0
  407ec8:	d1d2      	bne.n	407e70 <_vfprintf_r+0xb14>
  407eca:	9c25      	ldr	r4, [sp, #148]	; 0x94
  407ecc:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407ed0:	f7ff bbf0 	b.w	4076b4 <_vfprintf_r+0x358>
  407ed4:	f8cd b018 	str.w	fp, [sp, #24]
  407ed8:	2400      	movs	r4, #0
  407eda:	2500      	movs	r5, #0
  407edc:	a930      	add	r1, sp, #192	; 0xc0
  407ede:	e000      	b.n	407ee2 <_vfprintf_r+0xb86>
  407ee0:	4639      	mov	r1, r7
  407ee2:	08e2      	lsrs	r2, r4, #3
  407ee4:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  407ee8:	08e8      	lsrs	r0, r5, #3
  407eea:	f004 0307 	and.w	r3, r4, #7
  407eee:	4605      	mov	r5, r0
  407ef0:	4614      	mov	r4, r2
  407ef2:	3330      	adds	r3, #48	; 0x30
  407ef4:	ea54 0205 	orrs.w	r2, r4, r5
  407ef8:	f801 3c01 	strb.w	r3, [r1, #-1]
  407efc:	f101 37ff 	add.w	r7, r1, #4294967295
  407f00:	d1ee      	bne.n	407ee0 <_vfprintf_r+0xb84>
  407f02:	9a06      	ldr	r2, [sp, #24]
  407f04:	07d2      	lsls	r2, r2, #31
  407f06:	f57f ad64 	bpl.w	4079d2 <_vfprintf_r+0x676>
  407f0a:	2b30      	cmp	r3, #48	; 0x30
  407f0c:	f43f ad61 	beq.w	4079d2 <_vfprintf_r+0x676>
  407f10:	2330      	movs	r3, #48	; 0x30
  407f12:	3902      	subs	r1, #2
  407f14:	f807 3c01 	strb.w	r3, [r7, #-1]
  407f18:	ab30      	add	r3, sp, #192	; 0xc0
  407f1a:	1a5b      	subs	r3, r3, r1
  407f1c:	930d      	str	r3, [sp, #52]	; 0x34
  407f1e:	460f      	mov	r7, r1
  407f20:	f7ff bb46 	b.w	4075b0 <_vfprintf_r+0x254>
  407f24:	2302      	movs	r3, #2
  407f26:	f7ff bb25 	b.w	407574 <_vfprintf_r+0x218>
  407f2a:	991d      	ldr	r1, [sp, #116]	; 0x74
  407f2c:	2900      	cmp	r1, #0
  407f2e:	f340 8274 	ble.w	40841a <_vfprintf_r+0x10be>
  407f32:	9b10      	ldr	r3, [sp, #64]	; 0x40
  407f34:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407f36:	4293      	cmp	r3, r2
  407f38:	bfa8      	it	ge
  407f3a:	4613      	movge	r3, r2
  407f3c:	2b00      	cmp	r3, #0
  407f3e:	461e      	mov	r6, r3
  407f40:	dd0d      	ble.n	407f5e <_vfprintf_r+0xc02>
  407f42:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407f44:	f8c8 7000 	str.w	r7, [r8]
  407f48:	3301      	adds	r3, #1
  407f4a:	4434      	add	r4, r6
  407f4c:	2b07      	cmp	r3, #7
  407f4e:	9425      	str	r4, [sp, #148]	; 0x94
  407f50:	f8c8 6004 	str.w	r6, [r8, #4]
  407f54:	9324      	str	r3, [sp, #144]	; 0x90
  407f56:	f300 8324 	bgt.w	4085a2 <_vfprintf_r+0x1246>
  407f5a:	f108 0808 	add.w	r8, r8, #8
  407f5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  407f60:	2e00      	cmp	r6, #0
  407f62:	bfa8      	it	ge
  407f64:	1b9b      	subge	r3, r3, r6
  407f66:	2b00      	cmp	r3, #0
  407f68:	461e      	mov	r6, r3
  407f6a:	f340 80d0 	ble.w	40810e <_vfprintf_r+0xdb2>
  407f6e:	2e10      	cmp	r6, #16
  407f70:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407f72:	4dc0      	ldr	r5, [pc, #768]	; (408274 <_vfprintf_r+0xf18>)
  407f74:	f340 80b7 	ble.w	4080e6 <_vfprintf_r+0xd8a>
  407f78:	4622      	mov	r2, r4
  407f7a:	f04f 0a10 	mov.w	sl, #16
  407f7e:	f8dd b020 	ldr.w	fp, [sp, #32]
  407f82:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  407f84:	e005      	b.n	407f92 <_vfprintf_r+0xc36>
  407f86:	f108 0808 	add.w	r8, r8, #8
  407f8a:	3e10      	subs	r6, #16
  407f8c:	2e10      	cmp	r6, #16
  407f8e:	f340 80a9 	ble.w	4080e4 <_vfprintf_r+0xd88>
  407f92:	3301      	adds	r3, #1
  407f94:	3210      	adds	r2, #16
  407f96:	2b07      	cmp	r3, #7
  407f98:	9225      	str	r2, [sp, #148]	; 0x94
  407f9a:	9324      	str	r3, [sp, #144]	; 0x90
  407f9c:	e888 0420 	stmia.w	r8, {r5, sl}
  407fa0:	ddf1      	ble.n	407f86 <_vfprintf_r+0xc2a>
  407fa2:	aa23      	add	r2, sp, #140	; 0x8c
  407fa4:	4621      	mov	r1, r4
  407fa6:	4658      	mov	r0, fp
  407fa8:	f002 ff82 	bl	40aeb0 <__sprint_r>
  407fac:	2800      	cmp	r0, #0
  407fae:	f040 8324 	bne.w	4085fa <_vfprintf_r+0x129e>
  407fb2:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407fb4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407fb6:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407fba:	e7e6      	b.n	407f8a <_vfprintf_r+0xc2e>
  407fbc:	2d00      	cmp	r5, #0
  407fbe:	bf08      	it	eq
  407fc0:	2c0a      	cmpeq	r4, #10
  407fc2:	d37c      	bcc.n	4080be <_vfprintf_r+0xd62>
  407fc4:	af30      	add	r7, sp, #192	; 0xc0
  407fc6:	4620      	mov	r0, r4
  407fc8:	4629      	mov	r1, r5
  407fca:	220a      	movs	r2, #10
  407fcc:	2300      	movs	r3, #0
  407fce:	f003 fa47 	bl	40b460 <__aeabi_uldivmod>
  407fd2:	3230      	adds	r2, #48	; 0x30
  407fd4:	f807 2d01 	strb.w	r2, [r7, #-1]!
  407fd8:	4620      	mov	r0, r4
  407fda:	4629      	mov	r1, r5
  407fdc:	2300      	movs	r3, #0
  407fde:	220a      	movs	r2, #10
  407fe0:	f003 fa3e 	bl	40b460 <__aeabi_uldivmod>
  407fe4:	4604      	mov	r4, r0
  407fe6:	460d      	mov	r5, r1
  407fe8:	ea54 0305 	orrs.w	r3, r4, r5
  407fec:	d1eb      	bne.n	407fc6 <_vfprintf_r+0xc6a>
  407fee:	ab30      	add	r3, sp, #192	; 0xc0
  407ff0:	1bdb      	subs	r3, r3, r7
  407ff2:	930d      	str	r3, [sp, #52]	; 0x34
  407ff4:	f7ff badc 	b.w	4075b0 <_vfprintf_r+0x254>
  407ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407ffa:	930d      	str	r3, [sp, #52]	; 0x34
  407ffc:	af30      	add	r7, sp, #192	; 0xc0
  407ffe:	f7ff bad7 	b.w	4075b0 <_vfprintf_r+0x254>
  408002:	aa23      	add	r2, sp, #140	; 0x8c
  408004:	990a      	ldr	r1, [sp, #40]	; 0x28
  408006:	9808      	ldr	r0, [sp, #32]
  408008:	f002 ff52 	bl	40aeb0 <__sprint_r>
  40800c:	2800      	cmp	r0, #0
  40800e:	f47f af2f 	bne.w	407e70 <_vfprintf_r+0xb14>
  408012:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  408016:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408018:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40801c:	f7ff bb28 	b.w	407670 <_vfprintf_r+0x314>
  408020:	1e5f      	subs	r7, r3, #1
  408022:	2f00      	cmp	r7, #0
  408024:	f77f af05 	ble.w	407e32 <_vfprintf_r+0xad6>
  408028:	2f10      	cmp	r7, #16
  40802a:	4d92      	ldr	r5, [pc, #584]	; (408274 <_vfprintf_r+0xf18>)
  40802c:	f340 810a 	ble.w	408244 <_vfprintf_r+0xee8>
  408030:	f04f 0a10 	mov.w	sl, #16
  408034:	f8dd b020 	ldr.w	fp, [sp, #32]
  408038:	e005      	b.n	408046 <_vfprintf_r+0xcea>
  40803a:	f108 0808 	add.w	r8, r8, #8
  40803e:	3f10      	subs	r7, #16
  408040:	2f10      	cmp	r7, #16
  408042:	f340 80ff 	ble.w	408244 <_vfprintf_r+0xee8>
  408046:	3601      	adds	r6, #1
  408048:	3410      	adds	r4, #16
  40804a:	2e07      	cmp	r6, #7
  40804c:	9425      	str	r4, [sp, #148]	; 0x94
  40804e:	9624      	str	r6, [sp, #144]	; 0x90
  408050:	e888 0420 	stmia.w	r8, {r5, sl}
  408054:	ddf1      	ble.n	40803a <_vfprintf_r+0xcde>
  408056:	aa23      	add	r2, sp, #140	; 0x8c
  408058:	990a      	ldr	r1, [sp, #40]	; 0x28
  40805a:	4658      	mov	r0, fp
  40805c:	f002 ff28 	bl	40aeb0 <__sprint_r>
  408060:	2800      	cmp	r0, #0
  408062:	f47f af05 	bne.w	407e70 <_vfprintf_r+0xb14>
  408066:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408068:	9e24      	ldr	r6, [sp, #144]	; 0x90
  40806a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40806e:	e7e6      	b.n	40803e <_vfprintf_r+0xce2>
  408070:	990e      	ldr	r1, [sp, #56]	; 0x38
  408072:	460a      	mov	r2, r1
  408074:	3204      	adds	r2, #4
  408076:	680c      	ldr	r4, [r1, #0]
  408078:	920e      	str	r2, [sp, #56]	; 0x38
  40807a:	2500      	movs	r5, #0
  40807c:	f7ff ba7a 	b.w	407574 <_vfprintf_r+0x218>
  408080:	681c      	ldr	r4, [r3, #0]
  408082:	3304      	adds	r3, #4
  408084:	930e      	str	r3, [sp, #56]	; 0x38
  408086:	2500      	movs	r5, #0
  408088:	e426      	b.n	4078d8 <_vfprintf_r+0x57c>
  40808a:	3301      	adds	r3, #1
  40808c:	4434      	add	r4, r6
  40808e:	2b07      	cmp	r3, #7
  408090:	9425      	str	r4, [sp, #148]	; 0x94
  408092:	9324      	str	r3, [sp, #144]	; 0x90
  408094:	e888 0060 	stmia.w	r8, {r5, r6}
  408098:	f77f ab63 	ble.w	407762 <_vfprintf_r+0x406>
  40809c:	e6d6      	b.n	407e4c <_vfprintf_r+0xaf0>
  40809e:	3204      	adds	r2, #4
  4080a0:	681c      	ldr	r4, [r3, #0]
  4080a2:	920e      	str	r2, [sp, #56]	; 0x38
  4080a4:	2301      	movs	r3, #1
  4080a6:	2500      	movs	r5, #0
  4080a8:	f7ff ba64 	b.w	407574 <_vfprintf_r+0x218>
  4080ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4080ae:	6814      	ldr	r4, [r2, #0]
  4080b0:	4613      	mov	r3, r2
  4080b2:	3304      	adds	r3, #4
  4080b4:	17e5      	asrs	r5, r4, #31
  4080b6:	930e      	str	r3, [sp, #56]	; 0x38
  4080b8:	4622      	mov	r2, r4
  4080ba:	462b      	mov	r3, r5
  4080bc:	e460      	b.n	407980 <_vfprintf_r+0x624>
  4080be:	f8dd b018 	ldr.w	fp, [sp, #24]
  4080c2:	f8cd b018 	str.w	fp, [sp, #24]
  4080c6:	af40      	add	r7, sp, #256	; 0x100
  4080c8:	3430      	adds	r4, #48	; 0x30
  4080ca:	2301      	movs	r3, #1
  4080cc:	f807 4d41 	strb.w	r4, [r7, #-65]!
  4080d0:	930d      	str	r3, [sp, #52]	; 0x34
  4080d2:	f7ff ba6d 	b.w	4075b0 <_vfprintf_r+0x254>
  4080d6:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  4080da:	f002 f895 	bl	40a208 <__retarget_lock_release_recursive>
  4080de:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  4080e2:	e5af      	b.n	407c44 <_vfprintf_r+0x8e8>
  4080e4:	4614      	mov	r4, r2
  4080e6:	3301      	adds	r3, #1
  4080e8:	4434      	add	r4, r6
  4080ea:	2b07      	cmp	r3, #7
  4080ec:	9425      	str	r4, [sp, #148]	; 0x94
  4080ee:	9324      	str	r3, [sp, #144]	; 0x90
  4080f0:	e888 0060 	stmia.w	r8, {r5, r6}
  4080f4:	f340 816d 	ble.w	4083d2 <_vfprintf_r+0x1076>
  4080f8:	aa23      	add	r2, sp, #140	; 0x8c
  4080fa:	990a      	ldr	r1, [sp, #40]	; 0x28
  4080fc:	9808      	ldr	r0, [sp, #32]
  4080fe:	f002 fed7 	bl	40aeb0 <__sprint_r>
  408102:	2800      	cmp	r0, #0
  408104:	f47f aeb4 	bne.w	407e70 <_vfprintf_r+0xb14>
  408108:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40810a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40810e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  408110:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408112:	4293      	cmp	r3, r2
  408114:	f280 8158 	bge.w	4083c8 <_vfprintf_r+0x106c>
  408118:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40811a:	9814      	ldr	r0, [sp, #80]	; 0x50
  40811c:	9915      	ldr	r1, [sp, #84]	; 0x54
  40811e:	f8c8 1000 	str.w	r1, [r8]
  408122:	3201      	adds	r2, #1
  408124:	4404      	add	r4, r0
  408126:	2a07      	cmp	r2, #7
  408128:	9425      	str	r4, [sp, #148]	; 0x94
  40812a:	f8c8 0004 	str.w	r0, [r8, #4]
  40812e:	9224      	str	r2, [sp, #144]	; 0x90
  408130:	f300 8152 	bgt.w	4083d8 <_vfprintf_r+0x107c>
  408134:	f108 0808 	add.w	r8, r8, #8
  408138:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40813a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40813c:	1ad3      	subs	r3, r2, r3
  40813e:	1a56      	subs	r6, r2, r1
  408140:	429e      	cmp	r6, r3
  408142:	bfa8      	it	ge
  408144:	461e      	movge	r6, r3
  408146:	2e00      	cmp	r6, #0
  408148:	dd0e      	ble.n	408168 <_vfprintf_r+0xe0c>
  40814a:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40814c:	f8c8 6004 	str.w	r6, [r8, #4]
  408150:	3201      	adds	r2, #1
  408152:	440f      	add	r7, r1
  408154:	4434      	add	r4, r6
  408156:	2a07      	cmp	r2, #7
  408158:	f8c8 7000 	str.w	r7, [r8]
  40815c:	9425      	str	r4, [sp, #148]	; 0x94
  40815e:	9224      	str	r2, [sp, #144]	; 0x90
  408160:	f300 823c 	bgt.w	4085dc <_vfprintf_r+0x1280>
  408164:	f108 0808 	add.w	r8, r8, #8
  408168:	2e00      	cmp	r6, #0
  40816a:	bfac      	ite	ge
  40816c:	1b9e      	subge	r6, r3, r6
  40816e:	461e      	movlt	r6, r3
  408170:	2e00      	cmp	r6, #0
  408172:	f77f aaf8 	ble.w	407766 <_vfprintf_r+0x40a>
  408176:	2e10      	cmp	r6, #16
  408178:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40817a:	4d3e      	ldr	r5, [pc, #248]	; (408274 <_vfprintf_r+0xf18>)
  40817c:	dd85      	ble.n	40808a <_vfprintf_r+0xd2e>
  40817e:	2710      	movs	r7, #16
  408180:	f8dd a020 	ldr.w	sl, [sp, #32]
  408184:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  408188:	e005      	b.n	408196 <_vfprintf_r+0xe3a>
  40818a:	f108 0808 	add.w	r8, r8, #8
  40818e:	3e10      	subs	r6, #16
  408190:	2e10      	cmp	r6, #16
  408192:	f77f af7a 	ble.w	40808a <_vfprintf_r+0xd2e>
  408196:	3301      	adds	r3, #1
  408198:	3410      	adds	r4, #16
  40819a:	2b07      	cmp	r3, #7
  40819c:	9425      	str	r4, [sp, #148]	; 0x94
  40819e:	9324      	str	r3, [sp, #144]	; 0x90
  4081a0:	e888 00a0 	stmia.w	r8, {r5, r7}
  4081a4:	ddf1      	ble.n	40818a <_vfprintf_r+0xe2e>
  4081a6:	aa23      	add	r2, sp, #140	; 0x8c
  4081a8:	4659      	mov	r1, fp
  4081aa:	4650      	mov	r0, sl
  4081ac:	f002 fe80 	bl	40aeb0 <__sprint_r>
  4081b0:	2800      	cmp	r0, #0
  4081b2:	f040 8176 	bne.w	4084a2 <_vfprintf_r+0x1146>
  4081b6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4081b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4081ba:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4081be:	e7e6      	b.n	40818e <_vfprintf_r+0xe32>
  4081c0:	9b06      	ldr	r3, [sp, #24]
  4081c2:	07d8      	lsls	r0, r3, #31
  4081c4:	f53f adff 	bmi.w	407dc6 <_vfprintf_r+0xa6a>
  4081c8:	3601      	adds	r6, #1
  4081ca:	3401      	adds	r4, #1
  4081cc:	2301      	movs	r3, #1
  4081ce:	2e07      	cmp	r6, #7
  4081d0:	9425      	str	r4, [sp, #148]	; 0x94
  4081d2:	9624      	str	r6, [sp, #144]	; 0x90
  4081d4:	f8c8 7000 	str.w	r7, [r8]
  4081d8:	f8c8 3004 	str.w	r3, [r8, #4]
  4081dc:	f77f ae27 	ble.w	407e2e <_vfprintf_r+0xad2>
  4081e0:	aa23      	add	r2, sp, #140	; 0x8c
  4081e2:	990a      	ldr	r1, [sp, #40]	; 0x28
  4081e4:	9808      	ldr	r0, [sp, #32]
  4081e6:	f002 fe63 	bl	40aeb0 <__sprint_r>
  4081ea:	2800      	cmp	r0, #0
  4081ec:	f47f ae40 	bne.w	407e70 <_vfprintf_r+0xb14>
  4081f0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4081f2:	9e24      	ldr	r6, [sp, #144]	; 0x90
  4081f4:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4081f8:	e61b      	b.n	407e32 <_vfprintf_r+0xad6>
  4081fa:	aa23      	add	r2, sp, #140	; 0x8c
  4081fc:	990a      	ldr	r1, [sp, #40]	; 0x28
  4081fe:	9808      	ldr	r0, [sp, #32]
  408200:	f002 fe56 	bl	40aeb0 <__sprint_r>
  408204:	2800      	cmp	r0, #0
  408206:	f47f ae33 	bne.w	407e70 <_vfprintf_r+0xb14>
  40820a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40820c:	9e24      	ldr	r6, [sp, #144]	; 0x90
  40820e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  408212:	e5e6      	b.n	407de2 <_vfprintf_r+0xa86>
  408214:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  408216:	3507      	adds	r5, #7
  408218:	f025 0507 	bic.w	r5, r5, #7
  40821c:	e9d5 2300 	ldrd	r2, r3, [r5]
  408220:	f105 0108 	add.w	r1, r5, #8
  408224:	910e      	str	r1, [sp, #56]	; 0x38
  408226:	4614      	mov	r4, r2
  408228:	461d      	mov	r5, r3
  40822a:	f7ff bba9 	b.w	407980 <_vfprintf_r+0x624>
  40822e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  408230:	3507      	adds	r5, #7
  408232:	f025 0307 	bic.w	r3, r5, #7
  408236:	f103 0208 	add.w	r2, r3, #8
  40823a:	920e      	str	r2, [sp, #56]	; 0x38
  40823c:	e9d3 4500 	ldrd	r4, r5, [r3]
  408240:	f7ff bb4a 	b.w	4078d8 <_vfprintf_r+0x57c>
  408244:	3601      	adds	r6, #1
  408246:	443c      	add	r4, r7
  408248:	2e07      	cmp	r6, #7
  40824a:	9425      	str	r4, [sp, #148]	; 0x94
  40824c:	9624      	str	r6, [sp, #144]	; 0x90
  40824e:	e888 00a0 	stmia.w	r8, {r5, r7}
  408252:	f77f adec 	ble.w	407e2e <_vfprintf_r+0xad2>
  408256:	e7c3      	b.n	4081e0 <_vfprintf_r+0xe84>
  408258:	aa23      	add	r2, sp, #140	; 0x8c
  40825a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40825c:	9808      	ldr	r0, [sp, #32]
  40825e:	f002 fe27 	bl	40aeb0 <__sprint_r>
  408262:	2800      	cmp	r0, #0
  408264:	f47f ae04 	bne.w	407e70 <_vfprintf_r+0xb14>
  408268:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40826a:	9e24      	ldr	r6, [sp, #144]	; 0x90
  40826c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  408270:	e5c6      	b.n	407e00 <_vfprintf_r+0xaa4>
  408272:	bf00      	nop
  408274:	0040bd98 	.word	0x0040bd98
  408278:	af30      	add	r7, sp, #192	; 0xc0
  40827a:	f7ff b999 	b.w	4075b0 <_vfprintf_r+0x254>
  40827e:	aa23      	add	r2, sp, #140	; 0x8c
  408280:	990a      	ldr	r1, [sp, #40]	; 0x28
  408282:	9808      	ldr	r0, [sp, #32]
  408284:	f002 fe14 	bl	40aeb0 <__sprint_r>
  408288:	2800      	cmp	r0, #0
  40828a:	f47f adf1 	bne.w	407e70 <_vfprintf_r+0xb14>
  40828e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408290:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  408294:	f7ff ba11 	b.w	4076ba <_vfprintf_r+0x35e>
  408298:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  40829c:	4264      	negs	r4, r4
  40829e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  4082a2:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  4082a6:	2301      	movs	r3, #1
  4082a8:	f7ff b968 	b.w	40757c <_vfprintf_r+0x220>
  4082ac:	9c13      	ldr	r4, [sp, #76]	; 0x4c
  4082ae:	4622      	mov	r2, r4
  4082b0:	4620      	mov	r0, r4
  4082b2:	9c12      	ldr	r4, [sp, #72]	; 0x48
  4082b4:	4623      	mov	r3, r4
  4082b6:	4621      	mov	r1, r4
  4082b8:	f7fd ff2e 	bl	406118 <__aeabi_dcmpun>
  4082bc:	2800      	cmp	r0, #0
  4082be:	f040 828c 	bne.w	4087da <_vfprintf_r+0x147e>
  4082c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4082c4:	3301      	adds	r3, #1
  4082c6:	f026 0320 	bic.w	r3, r6, #32
  4082ca:	930d      	str	r3, [sp, #52]	; 0x34
  4082cc:	f000 8091 	beq.w	4083f2 <_vfprintf_r+0x1096>
  4082d0:	2b47      	cmp	r3, #71	; 0x47
  4082d2:	d104      	bne.n	4082de <_vfprintf_r+0xf82>
  4082d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4082d6:	2b00      	cmp	r3, #0
  4082d8:	bf08      	it	eq
  4082da:	2301      	moveq	r3, #1
  4082dc:	9309      	str	r3, [sp, #36]	; 0x24
  4082de:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  4082e2:	9306      	str	r3, [sp, #24]
  4082e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4082e6:	f1b3 0a00 	subs.w	sl, r3, #0
  4082ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4082ec:	9307      	str	r3, [sp, #28]
  4082ee:	bfbb      	ittet	lt
  4082f0:	4653      	movlt	r3, sl
  4082f2:	f103 4a00 	addlt.w	sl, r3, #2147483648	; 0x80000000
  4082f6:	2300      	movge	r3, #0
  4082f8:	232d      	movlt	r3, #45	; 0x2d
  4082fa:	2e66      	cmp	r6, #102	; 0x66
  4082fc:	930f      	str	r3, [sp, #60]	; 0x3c
  4082fe:	f000 817f 	beq.w	408600 <_vfprintf_r+0x12a4>
  408302:	2e46      	cmp	r6, #70	; 0x46
  408304:	f000 81d4 	beq.w	4086b0 <_vfprintf_r+0x1354>
  408308:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40830a:	9a07      	ldr	r2, [sp, #28]
  40830c:	2b45      	cmp	r3, #69	; 0x45
  40830e:	bf0c      	ite	eq
  408310:	9b09      	ldreq	r3, [sp, #36]	; 0x24
  408312:	9d09      	ldrne	r5, [sp, #36]	; 0x24
  408314:	a821      	add	r0, sp, #132	; 0x84
  408316:	a91e      	add	r1, sp, #120	; 0x78
  408318:	bf08      	it	eq
  40831a:	1c5d      	addeq	r5, r3, #1
  40831c:	9004      	str	r0, [sp, #16]
  40831e:	9103      	str	r1, [sp, #12]
  408320:	a81d      	add	r0, sp, #116	; 0x74
  408322:	2102      	movs	r1, #2
  408324:	9002      	str	r0, [sp, #8]
  408326:	4653      	mov	r3, sl
  408328:	9501      	str	r5, [sp, #4]
  40832a:	9100      	str	r1, [sp, #0]
  40832c:	9808      	ldr	r0, [sp, #32]
  40832e:	f000 fc0b 	bl	408b48 <_dtoa_r>
  408332:	2e67      	cmp	r6, #103	; 0x67
  408334:	4607      	mov	r7, r0
  408336:	f040 81af 	bne.w	408698 <_vfprintf_r+0x133c>
  40833a:	f01b 0f01 	tst.w	fp, #1
  40833e:	f000 8213 	beq.w	408768 <_vfprintf_r+0x140c>
  408342:	197c      	adds	r4, r7, r5
  408344:	9a16      	ldr	r2, [sp, #88]	; 0x58
  408346:	9807      	ldr	r0, [sp, #28]
  408348:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40834a:	4651      	mov	r1, sl
  40834c:	f7fd feb2 	bl	4060b4 <__aeabi_dcmpeq>
  408350:	2800      	cmp	r0, #0
  408352:	f040 8132 	bne.w	4085ba <_vfprintf_r+0x125e>
  408356:	9b21      	ldr	r3, [sp, #132]	; 0x84
  408358:	42a3      	cmp	r3, r4
  40835a:	d206      	bcs.n	40836a <_vfprintf_r+0x100e>
  40835c:	2130      	movs	r1, #48	; 0x30
  40835e:	1c5a      	adds	r2, r3, #1
  408360:	9221      	str	r2, [sp, #132]	; 0x84
  408362:	7019      	strb	r1, [r3, #0]
  408364:	9b21      	ldr	r3, [sp, #132]	; 0x84
  408366:	429c      	cmp	r4, r3
  408368:	d8f9      	bhi.n	40835e <_vfprintf_r+0x1002>
  40836a:	1bdb      	subs	r3, r3, r7
  40836c:	9311      	str	r3, [sp, #68]	; 0x44
  40836e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408370:	2b47      	cmp	r3, #71	; 0x47
  408372:	f000 80b9 	beq.w	4084e8 <_vfprintf_r+0x118c>
  408376:	2e65      	cmp	r6, #101	; 0x65
  408378:	f340 8276 	ble.w	408868 <_vfprintf_r+0x150c>
  40837c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40837e:	9310      	str	r3, [sp, #64]	; 0x40
  408380:	2e66      	cmp	r6, #102	; 0x66
  408382:	f000 8162 	beq.w	40864a <_vfprintf_r+0x12ee>
  408386:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408388:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40838a:	4619      	mov	r1, r3
  40838c:	4291      	cmp	r1, r2
  40838e:	f300 814f 	bgt.w	408630 <_vfprintf_r+0x12d4>
  408392:	f01b 0f01 	tst.w	fp, #1
  408396:	f040 8209 	bne.w	4087ac <_vfprintf_r+0x1450>
  40839a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40839e:	9307      	str	r3, [sp, #28]
  4083a0:	920d      	str	r2, [sp, #52]	; 0x34
  4083a2:	2667      	movs	r6, #103	; 0x67
  4083a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4083a6:	2b00      	cmp	r3, #0
  4083a8:	f040 8096 	bne.w	4084d8 <_vfprintf_r+0x117c>
  4083ac:	9309      	str	r3, [sp, #36]	; 0x24
  4083ae:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  4083b2:	f7ff b905 	b.w	4075c0 <_vfprintf_r+0x264>
  4083b6:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  4083ba:	f001 ff25 	bl	40a208 <__retarget_lock_release_recursive>
  4083be:	f04f 33ff 	mov.w	r3, #4294967295
  4083c2:	930b      	str	r3, [sp, #44]	; 0x2c
  4083c4:	f7ff ba30 	b.w	407828 <_vfprintf_r+0x4cc>
  4083c8:	9a06      	ldr	r2, [sp, #24]
  4083ca:	07d5      	lsls	r5, r2, #31
  4083cc:	f57f aeb4 	bpl.w	408138 <_vfprintf_r+0xddc>
  4083d0:	e6a2      	b.n	408118 <_vfprintf_r+0xdbc>
  4083d2:	f108 0808 	add.w	r8, r8, #8
  4083d6:	e69a      	b.n	40810e <_vfprintf_r+0xdb2>
  4083d8:	aa23      	add	r2, sp, #140	; 0x8c
  4083da:	990a      	ldr	r1, [sp, #40]	; 0x28
  4083dc:	9808      	ldr	r0, [sp, #32]
  4083de:	f002 fd67 	bl	40aeb0 <__sprint_r>
  4083e2:	2800      	cmp	r0, #0
  4083e4:	f47f ad44 	bne.w	407e70 <_vfprintf_r+0xb14>
  4083e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4083ea:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4083ec:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4083f0:	e6a2      	b.n	408138 <_vfprintf_r+0xddc>
  4083f2:	2306      	movs	r3, #6
  4083f4:	9309      	str	r3, [sp, #36]	; 0x24
  4083f6:	e772      	b.n	4082de <_vfprintf_r+0xf82>
  4083f8:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  4083fc:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  408400:	f7ff bbc7 	b.w	407b92 <_vfprintf_r+0x836>
  408404:	aa23      	add	r2, sp, #140	; 0x8c
  408406:	990a      	ldr	r1, [sp, #40]	; 0x28
  408408:	9808      	ldr	r0, [sp, #32]
  40840a:	f002 fd51 	bl	40aeb0 <__sprint_r>
  40840e:	2800      	cmp	r0, #0
  408410:	f47f ad2e 	bne.w	407e70 <_vfprintf_r+0xb14>
  408414:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  408418:	e437      	b.n	407c8a <_vfprintf_r+0x92e>
  40841a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40841c:	4ab4      	ldr	r2, [pc, #720]	; (4086f0 <_vfprintf_r+0x1394>)
  40841e:	f8c8 2000 	str.w	r2, [r8]
  408422:	3301      	adds	r3, #1
  408424:	3401      	adds	r4, #1
  408426:	2201      	movs	r2, #1
  408428:	2b07      	cmp	r3, #7
  40842a:	9425      	str	r4, [sp, #148]	; 0x94
  40842c:	9324      	str	r3, [sp, #144]	; 0x90
  40842e:	f8c8 2004 	str.w	r2, [r8, #4]
  408432:	f300 8124 	bgt.w	40867e <_vfprintf_r+0x1322>
  408436:	f108 0808 	add.w	r8, r8, #8
  40843a:	b929      	cbnz	r1, 408448 <_vfprintf_r+0x10ec>
  40843c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40843e:	b91b      	cbnz	r3, 408448 <_vfprintf_r+0x10ec>
  408440:	9b06      	ldr	r3, [sp, #24]
  408442:	07de      	lsls	r6, r3, #31
  408444:	f57f a98f 	bpl.w	407766 <_vfprintf_r+0x40a>
  408448:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40844a:	9814      	ldr	r0, [sp, #80]	; 0x50
  40844c:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40844e:	f8c8 2000 	str.w	r2, [r8]
  408452:	3301      	adds	r3, #1
  408454:	4602      	mov	r2, r0
  408456:	4422      	add	r2, r4
  408458:	2b07      	cmp	r3, #7
  40845a:	9225      	str	r2, [sp, #148]	; 0x94
  40845c:	f8c8 0004 	str.w	r0, [r8, #4]
  408460:	9324      	str	r3, [sp, #144]	; 0x90
  408462:	f300 8169 	bgt.w	408738 <_vfprintf_r+0x13dc>
  408466:	f108 0808 	add.w	r8, r8, #8
  40846a:	2900      	cmp	r1, #0
  40846c:	f2c0 8136 	blt.w	4086dc <_vfprintf_r+0x1380>
  408470:	9911      	ldr	r1, [sp, #68]	; 0x44
  408472:	f8c8 7000 	str.w	r7, [r8]
  408476:	3301      	adds	r3, #1
  408478:	188c      	adds	r4, r1, r2
  40847a:	2b07      	cmp	r3, #7
  40847c:	9425      	str	r4, [sp, #148]	; 0x94
  40847e:	9324      	str	r3, [sp, #144]	; 0x90
  408480:	f8c8 1004 	str.w	r1, [r8, #4]
  408484:	f77f a96d 	ble.w	407762 <_vfprintf_r+0x406>
  408488:	e4e0      	b.n	407e4c <_vfprintf_r+0xaf0>
  40848a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40848c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40848e:	6813      	ldr	r3, [r2, #0]
  408490:	17cd      	asrs	r5, r1, #31
  408492:	4608      	mov	r0, r1
  408494:	3204      	adds	r2, #4
  408496:	4629      	mov	r1, r5
  408498:	920e      	str	r2, [sp, #56]	; 0x38
  40849a:	e9c3 0100 	strd	r0, r1, [r3]
  40849e:	f7fe bfa9 	b.w	4073f4 <_vfprintf_r+0x98>
  4084a2:	46da      	mov	sl, fp
  4084a4:	f7ff bbc4 	b.w	407c30 <_vfprintf_r+0x8d4>
  4084a8:	aa23      	add	r2, sp, #140	; 0x8c
  4084aa:	990a      	ldr	r1, [sp, #40]	; 0x28
  4084ac:	9808      	ldr	r0, [sp, #32]
  4084ae:	f002 fcff 	bl	40aeb0 <__sprint_r>
  4084b2:	2800      	cmp	r0, #0
  4084b4:	f47f acdc 	bne.w	407e70 <_vfprintf_r+0xb14>
  4084b8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4084ba:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4084be:	f7ff bbfd 	b.w	407cbc <_vfprintf_r+0x960>
  4084c2:	4638      	mov	r0, r7
  4084c4:	9409      	str	r4, [sp, #36]	; 0x24
  4084c6:	f7fe fedb 	bl	407280 <strlen>
  4084ca:	950e      	str	r5, [sp, #56]	; 0x38
  4084cc:	900d      	str	r0, [sp, #52]	; 0x34
  4084ce:	f8cd b018 	str.w	fp, [sp, #24]
  4084d2:	4603      	mov	r3, r0
  4084d4:	f7ff ba36 	b.w	407944 <_vfprintf_r+0x5e8>
  4084d8:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  4084dc:	2300      	movs	r3, #0
  4084de:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  4084e2:	9309      	str	r3, [sp, #36]	; 0x24
  4084e4:	f7ff b86f 	b.w	4075c6 <_vfprintf_r+0x26a>
  4084e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4084ea:	9310      	str	r3, [sp, #64]	; 0x40
  4084ec:	461a      	mov	r2, r3
  4084ee:	3303      	adds	r3, #3
  4084f0:	db04      	blt.n	4084fc <_vfprintf_r+0x11a0>
  4084f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4084f4:	4619      	mov	r1, r3
  4084f6:	4291      	cmp	r1, r2
  4084f8:	f6bf af45 	bge.w	408386 <_vfprintf_r+0x102a>
  4084fc:	3e02      	subs	r6, #2
  4084fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
  408500:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
  408504:	3b01      	subs	r3, #1
  408506:	2b00      	cmp	r3, #0
  408508:	931d      	str	r3, [sp, #116]	; 0x74
  40850a:	bfbd      	ittte	lt
  40850c:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
  40850e:	f1c3 0301 	rsblt	r3, r3, #1
  408512:	222d      	movlt	r2, #45	; 0x2d
  408514:	222b      	movge	r2, #43	; 0x2b
  408516:	2b09      	cmp	r3, #9
  408518:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  40851c:	f340 813e 	ble.w	40879c <_vfprintf_r+0x1440>
  408520:	f10d 048b 	add.w	r4, sp, #139	; 0x8b
  408524:	4620      	mov	r0, r4
  408526:	4d73      	ldr	r5, [pc, #460]	; (4086f4 <_vfprintf_r+0x1398>)
  408528:	e000      	b.n	40852c <_vfprintf_r+0x11d0>
  40852a:	4610      	mov	r0, r2
  40852c:	fb85 1203 	smull	r1, r2, r5, r3
  408530:	17d9      	asrs	r1, r3, #31
  408532:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  408536:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  40853a:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  40853e:	3230      	adds	r2, #48	; 0x30
  408540:	2909      	cmp	r1, #9
  408542:	f800 2c01 	strb.w	r2, [r0, #-1]
  408546:	460b      	mov	r3, r1
  408548:	f100 32ff 	add.w	r2, r0, #4294967295
  40854c:	dced      	bgt.n	40852a <_vfprintf_r+0x11ce>
  40854e:	3330      	adds	r3, #48	; 0x30
  408550:	3802      	subs	r0, #2
  408552:	b2d9      	uxtb	r1, r3
  408554:	4284      	cmp	r4, r0
  408556:	f802 1c01 	strb.w	r1, [r2, #-1]
  40855a:	f240 8190 	bls.w	40887e <_vfprintf_r+0x1522>
  40855e:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
  408562:	4613      	mov	r3, r2
  408564:	e001      	b.n	40856a <_vfprintf_r+0x120e>
  408566:	f813 1b01 	ldrb.w	r1, [r3], #1
  40856a:	f800 1b01 	strb.w	r1, [r0], #1
  40856e:	42a3      	cmp	r3, r4
  408570:	d1f9      	bne.n	408566 <_vfprintf_r+0x120a>
  408572:	3301      	adds	r3, #1
  408574:	1a9b      	subs	r3, r3, r2
  408576:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  40857a:	4413      	add	r3, r2
  40857c:	aa1f      	add	r2, sp, #124	; 0x7c
  40857e:	1a9b      	subs	r3, r3, r2
  408580:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408582:	9319      	str	r3, [sp, #100]	; 0x64
  408584:	2a01      	cmp	r2, #1
  408586:	4413      	add	r3, r2
  408588:	930d      	str	r3, [sp, #52]	; 0x34
  40858a:	f340 8145 	ble.w	408818 <_vfprintf_r+0x14bc>
  40858e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408590:	9a14      	ldr	r2, [sp, #80]	; 0x50
  408592:	4413      	add	r3, r2
  408594:	930d      	str	r3, [sp, #52]	; 0x34
  408596:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40859a:	9307      	str	r3, [sp, #28]
  40859c:	2300      	movs	r3, #0
  40859e:	9310      	str	r3, [sp, #64]	; 0x40
  4085a0:	e700      	b.n	4083a4 <_vfprintf_r+0x1048>
  4085a2:	aa23      	add	r2, sp, #140	; 0x8c
  4085a4:	990a      	ldr	r1, [sp, #40]	; 0x28
  4085a6:	9808      	ldr	r0, [sp, #32]
  4085a8:	f002 fc82 	bl	40aeb0 <__sprint_r>
  4085ac:	2800      	cmp	r0, #0
  4085ae:	f47f ac5f 	bne.w	407e70 <_vfprintf_r+0xb14>
  4085b2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4085b4:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4085b8:	e4d1      	b.n	407f5e <_vfprintf_r+0xc02>
  4085ba:	4623      	mov	r3, r4
  4085bc:	e6d5      	b.n	40836a <_vfprintf_r+0x100e>
  4085be:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4085c0:	9710      	str	r7, [sp, #64]	; 0x40
  4085c2:	2b06      	cmp	r3, #6
  4085c4:	bf28      	it	cs
  4085c6:	2306      	movcs	r3, #6
  4085c8:	9709      	str	r7, [sp, #36]	; 0x24
  4085ca:	46ba      	mov	sl, r7
  4085cc:	9307      	str	r3, [sp, #28]
  4085ce:	950e      	str	r5, [sp, #56]	; 0x38
  4085d0:	f8cd b018 	str.w	fp, [sp, #24]
  4085d4:	930d      	str	r3, [sp, #52]	; 0x34
  4085d6:	4f48      	ldr	r7, [pc, #288]	; (4086f8 <_vfprintf_r+0x139c>)
  4085d8:	f7fe bff2 	b.w	4075c0 <_vfprintf_r+0x264>
  4085dc:	aa23      	add	r2, sp, #140	; 0x8c
  4085de:	990a      	ldr	r1, [sp, #40]	; 0x28
  4085e0:	9808      	ldr	r0, [sp, #32]
  4085e2:	f002 fc65 	bl	40aeb0 <__sprint_r>
  4085e6:	2800      	cmp	r0, #0
  4085e8:	f47f ac42 	bne.w	407e70 <_vfprintf_r+0xb14>
  4085ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4085ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4085f0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4085f2:	1ad3      	subs	r3, r2, r3
  4085f4:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4085f8:	e5b6      	b.n	408168 <_vfprintf_r+0xe0c>
  4085fa:	46a2      	mov	sl, r4
  4085fc:	f7ff bb18 	b.w	407c30 <_vfprintf_r+0x8d4>
  408600:	a821      	add	r0, sp, #132	; 0x84
  408602:	a91e      	add	r1, sp, #120	; 0x78
  408604:	9d09      	ldr	r5, [sp, #36]	; 0x24
  408606:	9004      	str	r0, [sp, #16]
  408608:	9103      	str	r1, [sp, #12]
  40860a:	a81d      	add	r0, sp, #116	; 0x74
  40860c:	2103      	movs	r1, #3
  40860e:	9002      	str	r0, [sp, #8]
  408610:	9a07      	ldr	r2, [sp, #28]
  408612:	9501      	str	r5, [sp, #4]
  408614:	4653      	mov	r3, sl
  408616:	9100      	str	r1, [sp, #0]
  408618:	9808      	ldr	r0, [sp, #32]
  40861a:	f000 fa95 	bl	408b48 <_dtoa_r>
  40861e:	4607      	mov	r7, r0
  408620:	1944      	adds	r4, r0, r5
  408622:	783b      	ldrb	r3, [r7, #0]
  408624:	2b30      	cmp	r3, #48	; 0x30
  408626:	f000 80ca 	beq.w	4087be <_vfprintf_r+0x1462>
  40862a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  40862c:	442c      	add	r4, r5
  40862e:	e689      	b.n	408344 <_vfprintf_r+0xfe8>
  408630:	9a14      	ldr	r2, [sp, #80]	; 0x50
  408632:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408634:	4413      	add	r3, r2
  408636:	9a10      	ldr	r2, [sp, #64]	; 0x40
  408638:	930d      	str	r3, [sp, #52]	; 0x34
  40863a:	2a00      	cmp	r2, #0
  40863c:	f340 80e4 	ble.w	408808 <_vfprintf_r+0x14ac>
  408640:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  408644:	9307      	str	r3, [sp, #28]
  408646:	2667      	movs	r6, #103	; 0x67
  408648:	e6ac      	b.n	4083a4 <_vfprintf_r+0x1048>
  40864a:	2b00      	cmp	r3, #0
  40864c:	f340 80fb 	ble.w	408846 <_vfprintf_r+0x14ea>
  408650:	9a09      	ldr	r2, [sp, #36]	; 0x24
  408652:	2a00      	cmp	r2, #0
  408654:	f040 80ce 	bne.w	4087f4 <_vfprintf_r+0x1498>
  408658:	f01b 0f01 	tst.w	fp, #1
  40865c:	f040 80ca 	bne.w	4087f4 <_vfprintf_r+0x1498>
  408660:	9307      	str	r3, [sp, #28]
  408662:	930d      	str	r3, [sp, #52]	; 0x34
  408664:	e69e      	b.n	4083a4 <_vfprintf_r+0x1048>
  408666:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408668:	9307      	str	r3, [sp, #28]
  40866a:	930d      	str	r3, [sp, #52]	; 0x34
  40866c:	9009      	str	r0, [sp, #36]	; 0x24
  40866e:	950e      	str	r5, [sp, #56]	; 0x38
  408670:	f8cd b018 	str.w	fp, [sp, #24]
  408674:	9010      	str	r0, [sp, #64]	; 0x40
  408676:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  40867a:	f7fe bfa1 	b.w	4075c0 <_vfprintf_r+0x264>
  40867e:	aa23      	add	r2, sp, #140	; 0x8c
  408680:	990a      	ldr	r1, [sp, #40]	; 0x28
  408682:	9808      	ldr	r0, [sp, #32]
  408684:	f002 fc14 	bl	40aeb0 <__sprint_r>
  408688:	2800      	cmp	r0, #0
  40868a:	f47f abf1 	bne.w	407e70 <_vfprintf_r+0xb14>
  40868e:	991d      	ldr	r1, [sp, #116]	; 0x74
  408690:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408692:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  408696:	e6d0      	b.n	40843a <_vfprintf_r+0x10de>
  408698:	2e47      	cmp	r6, #71	; 0x47
  40869a:	f47f ae52 	bne.w	408342 <_vfprintf_r+0xfe6>
  40869e:	f01b 0f01 	tst.w	fp, #1
  4086a2:	f000 80da 	beq.w	40885a <_vfprintf_r+0x14fe>
  4086a6:	2e46      	cmp	r6, #70	; 0x46
  4086a8:	eb07 0405 	add.w	r4, r7, r5
  4086ac:	d0b9      	beq.n	408622 <_vfprintf_r+0x12c6>
  4086ae:	e649      	b.n	408344 <_vfprintf_r+0xfe8>
  4086b0:	a821      	add	r0, sp, #132	; 0x84
  4086b2:	a91e      	add	r1, sp, #120	; 0x78
  4086b4:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4086b6:	9004      	str	r0, [sp, #16]
  4086b8:	9103      	str	r1, [sp, #12]
  4086ba:	a81d      	add	r0, sp, #116	; 0x74
  4086bc:	2103      	movs	r1, #3
  4086be:	9002      	str	r0, [sp, #8]
  4086c0:	9a07      	ldr	r2, [sp, #28]
  4086c2:	9401      	str	r4, [sp, #4]
  4086c4:	4653      	mov	r3, sl
  4086c6:	9100      	str	r1, [sp, #0]
  4086c8:	9808      	ldr	r0, [sp, #32]
  4086ca:	f000 fa3d 	bl	408b48 <_dtoa_r>
  4086ce:	4625      	mov	r5, r4
  4086d0:	4607      	mov	r7, r0
  4086d2:	e7e8      	b.n	4086a6 <_vfprintf_r+0x134a>
  4086d4:	2300      	movs	r3, #0
  4086d6:	9309      	str	r3, [sp, #36]	; 0x24
  4086d8:	f7fe bec1 	b.w	40745e <_vfprintf_r+0x102>
  4086dc:	424e      	negs	r6, r1
  4086de:	3110      	adds	r1, #16
  4086e0:	4d06      	ldr	r5, [pc, #24]	; (4086fc <_vfprintf_r+0x13a0>)
  4086e2:	da43      	bge.n	40876c <_vfprintf_r+0x1410>
  4086e4:	2410      	movs	r4, #16
  4086e6:	f8dd a020 	ldr.w	sl, [sp, #32]
  4086ea:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4086ee:	e00c      	b.n	40870a <_vfprintf_r+0x13ae>
  4086f0:	0040bd84 	.word	0x0040bd84
  4086f4:	66666667 	.word	0x66666667
  4086f8:	0040bd7c 	.word	0x0040bd7c
  4086fc:	0040bd98 	.word	0x0040bd98
  408700:	f108 0808 	add.w	r8, r8, #8
  408704:	3e10      	subs	r6, #16
  408706:	2e10      	cmp	r6, #16
  408708:	dd30      	ble.n	40876c <_vfprintf_r+0x1410>
  40870a:	3301      	adds	r3, #1
  40870c:	3210      	adds	r2, #16
  40870e:	2b07      	cmp	r3, #7
  408710:	9225      	str	r2, [sp, #148]	; 0x94
  408712:	9324      	str	r3, [sp, #144]	; 0x90
  408714:	f8c8 5000 	str.w	r5, [r8]
  408718:	f8c8 4004 	str.w	r4, [r8, #4]
  40871c:	ddf0      	ble.n	408700 <_vfprintf_r+0x13a4>
  40871e:	aa23      	add	r2, sp, #140	; 0x8c
  408720:	4659      	mov	r1, fp
  408722:	4650      	mov	r0, sl
  408724:	f002 fbc4 	bl	40aeb0 <__sprint_r>
  408728:	2800      	cmp	r0, #0
  40872a:	f47f aeba 	bne.w	4084a2 <_vfprintf_r+0x1146>
  40872e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  408730:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408732:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  408736:	e7e5      	b.n	408704 <_vfprintf_r+0x13a8>
  408738:	aa23      	add	r2, sp, #140	; 0x8c
  40873a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40873c:	9808      	ldr	r0, [sp, #32]
  40873e:	f002 fbb7 	bl	40aeb0 <__sprint_r>
  408742:	2800      	cmp	r0, #0
  408744:	f47f ab94 	bne.w	407e70 <_vfprintf_r+0xb14>
  408748:	991d      	ldr	r1, [sp, #116]	; 0x74
  40874a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40874c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40874e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  408752:	e68a      	b.n	40846a <_vfprintf_r+0x110e>
  408754:	9808      	ldr	r0, [sp, #32]
  408756:	aa23      	add	r2, sp, #140	; 0x8c
  408758:	4651      	mov	r1, sl
  40875a:	f002 fba9 	bl	40aeb0 <__sprint_r>
  40875e:	2800      	cmp	r0, #0
  408760:	f43f aa64 	beq.w	407c2c <_vfprintf_r+0x8d0>
  408764:	f7ff ba64 	b.w	407c30 <_vfprintf_r+0x8d4>
  408768:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40876a:	e5fe      	b.n	40836a <_vfprintf_r+0x100e>
  40876c:	3301      	adds	r3, #1
  40876e:	4432      	add	r2, r6
  408770:	2b07      	cmp	r3, #7
  408772:	e888 0060 	stmia.w	r8, {r5, r6}
  408776:	9225      	str	r2, [sp, #148]	; 0x94
  408778:	9324      	str	r3, [sp, #144]	; 0x90
  40877a:	f108 0808 	add.w	r8, r8, #8
  40877e:	f77f ae77 	ble.w	408470 <_vfprintf_r+0x1114>
  408782:	aa23      	add	r2, sp, #140	; 0x8c
  408784:	990a      	ldr	r1, [sp, #40]	; 0x28
  408786:	9808      	ldr	r0, [sp, #32]
  408788:	f002 fb92 	bl	40aeb0 <__sprint_r>
  40878c:	2800      	cmp	r0, #0
  40878e:	f47f ab6f 	bne.w	407e70 <_vfprintf_r+0xb14>
  408792:	9a25      	ldr	r2, [sp, #148]	; 0x94
  408794:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408796:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40879a:	e669      	b.n	408470 <_vfprintf_r+0x1114>
  40879c:	3330      	adds	r3, #48	; 0x30
  40879e:	2230      	movs	r2, #48	; 0x30
  4087a0:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  4087a4:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  4087a8:	ab20      	add	r3, sp, #128	; 0x80
  4087aa:	e6e7      	b.n	40857c <_vfprintf_r+0x1220>
  4087ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4087ae:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4087b0:	4413      	add	r3, r2
  4087b2:	930d      	str	r3, [sp, #52]	; 0x34
  4087b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4087b8:	9307      	str	r3, [sp, #28]
  4087ba:	2667      	movs	r6, #103	; 0x67
  4087bc:	e5f2      	b.n	4083a4 <_vfprintf_r+0x1048>
  4087be:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4087c0:	9807      	ldr	r0, [sp, #28]
  4087c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4087c4:	4651      	mov	r1, sl
  4087c6:	f7fd fc75 	bl	4060b4 <__aeabi_dcmpeq>
  4087ca:	2800      	cmp	r0, #0
  4087cc:	f47f af2d 	bne.w	40862a <_vfprintf_r+0x12ce>
  4087d0:	f1c5 0501 	rsb	r5, r5, #1
  4087d4:	951d      	str	r5, [sp, #116]	; 0x74
  4087d6:	442c      	add	r4, r5
  4087d8:	e5b4      	b.n	408344 <_vfprintf_r+0xfe8>
  4087da:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4087dc:	4f33      	ldr	r7, [pc, #204]	; (4088ac <_vfprintf_r+0x1550>)
  4087de:	2b00      	cmp	r3, #0
  4087e0:	bfb6      	itet	lt
  4087e2:	f04f 0a2d 	movlt.w	sl, #45	; 0x2d
  4087e6:	f89d a06f 	ldrbge.w	sl, [sp, #111]	; 0x6f
  4087ea:	f88d a06f 	strblt.w	sl, [sp, #111]	; 0x6f
  4087ee:	4b30      	ldr	r3, [pc, #192]	; (4088b0 <_vfprintf_r+0x1554>)
  4087f0:	f7ff b9d1 	b.w	407b96 <_vfprintf_r+0x83a>
  4087f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4087f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4087f8:	4413      	add	r3, r2
  4087fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4087fc:	441a      	add	r2, r3
  4087fe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  408802:	920d      	str	r2, [sp, #52]	; 0x34
  408804:	9307      	str	r3, [sp, #28]
  408806:	e5cd      	b.n	4083a4 <_vfprintf_r+0x1048>
  408808:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40880a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40880c:	f1c3 0301 	rsb	r3, r3, #1
  408810:	441a      	add	r2, r3
  408812:	4613      	mov	r3, r2
  408814:	920d      	str	r2, [sp, #52]	; 0x34
  408816:	e713      	b.n	408640 <_vfprintf_r+0x12e4>
  408818:	f01b 0301 	ands.w	r3, fp, #1
  40881c:	9310      	str	r3, [sp, #64]	; 0x40
  40881e:	f47f aeb6 	bne.w	40858e <_vfprintf_r+0x1232>
  408822:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408824:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  408828:	9307      	str	r3, [sp, #28]
  40882a:	e5bb      	b.n	4083a4 <_vfprintf_r+0x1048>
  40882c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  40882e:	f899 6001 	ldrb.w	r6, [r9, #1]
  408832:	6823      	ldr	r3, [r4, #0]
  408834:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
  408838:	9309      	str	r3, [sp, #36]	; 0x24
  40883a:	4623      	mov	r3, r4
  40883c:	3304      	adds	r3, #4
  40883e:	4681      	mov	r9, r0
  408840:	930e      	str	r3, [sp, #56]	; 0x38
  408842:	f7fe be0a 	b.w	40745a <_vfprintf_r+0xfe>
  408846:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408848:	b913      	cbnz	r3, 408850 <_vfprintf_r+0x14f4>
  40884a:	f01b 0f01 	tst.w	fp, #1
  40884e:	d002      	beq.n	408856 <_vfprintf_r+0x14fa>
  408850:	9b14      	ldr	r3, [sp, #80]	; 0x50
  408852:	3301      	adds	r3, #1
  408854:	e7d1      	b.n	4087fa <_vfprintf_r+0x149e>
  408856:	2301      	movs	r3, #1
  408858:	e702      	b.n	408660 <_vfprintf_r+0x1304>
  40885a:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40885c:	1bdb      	subs	r3, r3, r7
  40885e:	9311      	str	r3, [sp, #68]	; 0x44
  408860:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408862:	2b47      	cmp	r3, #71	; 0x47
  408864:	f43f ae40 	beq.w	4084e8 <_vfprintf_r+0x118c>
  408868:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40886a:	9310      	str	r3, [sp, #64]	; 0x40
  40886c:	e647      	b.n	4084fe <_vfprintf_r+0x11a2>
  40886e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  408872:	f7ff b81d 	b.w	4078b0 <_vfprintf_r+0x554>
  408876:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40887a:	f7ff b918 	b.w	407aae <_vfprintf_r+0x752>
  40887e:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  408882:	e67b      	b.n	40857c <_vfprintf_r+0x1220>
  408884:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  408888:	f7ff b866 	b.w	407958 <_vfprintf_r+0x5fc>
  40888c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  408890:	f7ff b9ac 	b.w	407bec <_vfprintf_r+0x890>
  408894:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  408898:	f7ff b934 	b.w	407b04 <_vfprintf_r+0x7a8>
  40889c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4088a0:	f7ff b8b0 	b.w	407a04 <_vfprintf_r+0x6a8>
  4088a4:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4088a8:	f7ff b945 	b.w	407b36 <_vfprintf_r+0x7da>
  4088ac:	0040bd50 	.word	0x0040bd50
  4088b0:	0040bd4c 	.word	0x0040bd4c

004088b4 <__sbprintf>:
  4088b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4088b8:	460c      	mov	r4, r1
  4088ba:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  4088be:	8989      	ldrh	r1, [r1, #12]
  4088c0:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4088c2:	89e5      	ldrh	r5, [r4, #14]
  4088c4:	9619      	str	r6, [sp, #100]	; 0x64
  4088c6:	f021 0102 	bic.w	r1, r1, #2
  4088ca:	4606      	mov	r6, r0
  4088cc:	69e0      	ldr	r0, [r4, #28]
  4088ce:	f8ad 100c 	strh.w	r1, [sp, #12]
  4088d2:	4617      	mov	r7, r2
  4088d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4088d8:	6a62      	ldr	r2, [r4, #36]	; 0x24
  4088da:	f8ad 500e 	strh.w	r5, [sp, #14]
  4088de:	4698      	mov	r8, r3
  4088e0:	ad1a      	add	r5, sp, #104	; 0x68
  4088e2:	2300      	movs	r3, #0
  4088e4:	9007      	str	r0, [sp, #28]
  4088e6:	a816      	add	r0, sp, #88	; 0x58
  4088e8:	9209      	str	r2, [sp, #36]	; 0x24
  4088ea:	9306      	str	r3, [sp, #24]
  4088ec:	9500      	str	r5, [sp, #0]
  4088ee:	9504      	str	r5, [sp, #16]
  4088f0:	9102      	str	r1, [sp, #8]
  4088f2:	9105      	str	r1, [sp, #20]
  4088f4:	f001 fc82 	bl	40a1fc <__retarget_lock_init_recursive>
  4088f8:	4643      	mov	r3, r8
  4088fa:	463a      	mov	r2, r7
  4088fc:	4669      	mov	r1, sp
  4088fe:	4630      	mov	r0, r6
  408900:	f7fe fd2c 	bl	40735c <_vfprintf_r>
  408904:	1e05      	subs	r5, r0, #0
  408906:	db07      	blt.n	408918 <__sbprintf+0x64>
  408908:	4630      	mov	r0, r6
  40890a:	4669      	mov	r1, sp
  40890c:	f001 f8e6 	bl	409adc <_fflush_r>
  408910:	2800      	cmp	r0, #0
  408912:	bf18      	it	ne
  408914:	f04f 35ff 	movne.w	r5, #4294967295
  408918:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  40891c:	065b      	lsls	r3, r3, #25
  40891e:	d503      	bpl.n	408928 <__sbprintf+0x74>
  408920:	89a3      	ldrh	r3, [r4, #12]
  408922:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408926:	81a3      	strh	r3, [r4, #12]
  408928:	9816      	ldr	r0, [sp, #88]	; 0x58
  40892a:	f001 fc69 	bl	40a200 <__retarget_lock_close_recursive>
  40892e:	4628      	mov	r0, r5
  408930:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  408934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00408938 <__swsetup_r>:
  408938:	b538      	push	{r3, r4, r5, lr}
  40893a:	4b30      	ldr	r3, [pc, #192]	; (4089fc <__swsetup_r+0xc4>)
  40893c:	681b      	ldr	r3, [r3, #0]
  40893e:	4605      	mov	r5, r0
  408940:	460c      	mov	r4, r1
  408942:	b113      	cbz	r3, 40894a <__swsetup_r+0x12>
  408944:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  408946:	2a00      	cmp	r2, #0
  408948:	d038      	beq.n	4089bc <__swsetup_r+0x84>
  40894a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40894e:	b293      	uxth	r3, r2
  408950:	0718      	lsls	r0, r3, #28
  408952:	d50c      	bpl.n	40896e <__swsetup_r+0x36>
  408954:	6920      	ldr	r0, [r4, #16]
  408956:	b1a8      	cbz	r0, 408984 <__swsetup_r+0x4c>
  408958:	f013 0201 	ands.w	r2, r3, #1
  40895c:	d01e      	beq.n	40899c <__swsetup_r+0x64>
  40895e:	6963      	ldr	r3, [r4, #20]
  408960:	2200      	movs	r2, #0
  408962:	425b      	negs	r3, r3
  408964:	61a3      	str	r3, [r4, #24]
  408966:	60a2      	str	r2, [r4, #8]
  408968:	b1f0      	cbz	r0, 4089a8 <__swsetup_r+0x70>
  40896a:	2000      	movs	r0, #0
  40896c:	bd38      	pop	{r3, r4, r5, pc}
  40896e:	06d9      	lsls	r1, r3, #27
  408970:	d53c      	bpl.n	4089ec <__swsetup_r+0xb4>
  408972:	0758      	lsls	r0, r3, #29
  408974:	d426      	bmi.n	4089c4 <__swsetup_r+0x8c>
  408976:	6920      	ldr	r0, [r4, #16]
  408978:	f042 0308 	orr.w	r3, r2, #8
  40897c:	81a3      	strh	r3, [r4, #12]
  40897e:	b29b      	uxth	r3, r3
  408980:	2800      	cmp	r0, #0
  408982:	d1e9      	bne.n	408958 <__swsetup_r+0x20>
  408984:	f403 7220 	and.w	r2, r3, #640	; 0x280
  408988:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40898c:	d0e4      	beq.n	408958 <__swsetup_r+0x20>
  40898e:	4628      	mov	r0, r5
  408990:	4621      	mov	r1, r4
  408992:	f001 fc69 	bl	40a268 <__smakebuf_r>
  408996:	89a3      	ldrh	r3, [r4, #12]
  408998:	6920      	ldr	r0, [r4, #16]
  40899a:	e7dd      	b.n	408958 <__swsetup_r+0x20>
  40899c:	0799      	lsls	r1, r3, #30
  40899e:	bf58      	it	pl
  4089a0:	6962      	ldrpl	r2, [r4, #20]
  4089a2:	60a2      	str	r2, [r4, #8]
  4089a4:	2800      	cmp	r0, #0
  4089a6:	d1e0      	bne.n	40896a <__swsetup_r+0x32>
  4089a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4089ac:	061a      	lsls	r2, r3, #24
  4089ae:	d5dd      	bpl.n	40896c <__swsetup_r+0x34>
  4089b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4089b4:	81a3      	strh	r3, [r4, #12]
  4089b6:	f04f 30ff 	mov.w	r0, #4294967295
  4089ba:	bd38      	pop	{r3, r4, r5, pc}
  4089bc:	4618      	mov	r0, r3
  4089be:	f001 f8e5 	bl	409b8c <__sinit>
  4089c2:	e7c2      	b.n	40894a <__swsetup_r+0x12>
  4089c4:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4089c6:	b151      	cbz	r1, 4089de <__swsetup_r+0xa6>
  4089c8:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4089cc:	4299      	cmp	r1, r3
  4089ce:	d004      	beq.n	4089da <__swsetup_r+0xa2>
  4089d0:	4628      	mov	r0, r5
  4089d2:	f001 f97d 	bl	409cd0 <_free_r>
  4089d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4089da:	2300      	movs	r3, #0
  4089dc:	6323      	str	r3, [r4, #48]	; 0x30
  4089de:	2300      	movs	r3, #0
  4089e0:	6920      	ldr	r0, [r4, #16]
  4089e2:	6063      	str	r3, [r4, #4]
  4089e4:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4089e8:	6020      	str	r0, [r4, #0]
  4089ea:	e7c5      	b.n	408978 <__swsetup_r+0x40>
  4089ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4089f0:	2309      	movs	r3, #9
  4089f2:	602b      	str	r3, [r5, #0]
  4089f4:	f04f 30ff 	mov.w	r0, #4294967295
  4089f8:	81a2      	strh	r2, [r4, #12]
  4089fa:	bd38      	pop	{r3, r4, r5, pc}
  4089fc:	20400010 	.word	0x20400010

00408a00 <register_fini>:
  408a00:	4b02      	ldr	r3, [pc, #8]	; (408a0c <register_fini+0xc>)
  408a02:	b113      	cbz	r3, 408a0a <register_fini+0xa>
  408a04:	4802      	ldr	r0, [pc, #8]	; (408a10 <register_fini+0x10>)
  408a06:	f000 b805 	b.w	408a14 <atexit>
  408a0a:	4770      	bx	lr
  408a0c:	00000000 	.word	0x00000000
  408a10:	00409bfd 	.word	0x00409bfd

00408a14 <atexit>:
  408a14:	2300      	movs	r3, #0
  408a16:	4601      	mov	r1, r0
  408a18:	461a      	mov	r2, r3
  408a1a:	4618      	mov	r0, r3
  408a1c:	f002 ba68 	b.w	40aef0 <__register_exitproc>

00408a20 <quorem>:
  408a20:	6902      	ldr	r2, [r0, #16]
  408a22:	690b      	ldr	r3, [r1, #16]
  408a24:	4293      	cmp	r3, r2
  408a26:	f300 808d 	bgt.w	408b44 <quorem+0x124>
  408a2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408a2e:	f103 38ff 	add.w	r8, r3, #4294967295
  408a32:	f101 0714 	add.w	r7, r1, #20
  408a36:	f100 0b14 	add.w	fp, r0, #20
  408a3a:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  408a3e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  408a42:	ea4f 0488 	mov.w	r4, r8, lsl #2
  408a46:	b083      	sub	sp, #12
  408a48:	3201      	adds	r2, #1
  408a4a:	fbb3 f9f2 	udiv	r9, r3, r2
  408a4e:	eb0b 0304 	add.w	r3, fp, r4
  408a52:	9400      	str	r4, [sp, #0]
  408a54:	eb07 0a04 	add.w	sl, r7, r4
  408a58:	9301      	str	r3, [sp, #4]
  408a5a:	f1b9 0f00 	cmp.w	r9, #0
  408a5e:	d039      	beq.n	408ad4 <quorem+0xb4>
  408a60:	2500      	movs	r5, #0
  408a62:	462e      	mov	r6, r5
  408a64:	46bc      	mov	ip, r7
  408a66:	46de      	mov	lr, fp
  408a68:	f85c 4b04 	ldr.w	r4, [ip], #4
  408a6c:	f8de 3000 	ldr.w	r3, [lr]
  408a70:	b2a2      	uxth	r2, r4
  408a72:	fb09 5502 	mla	r5, r9, r2, r5
  408a76:	0c22      	lsrs	r2, r4, #16
  408a78:	0c2c      	lsrs	r4, r5, #16
  408a7a:	fb09 4202 	mla	r2, r9, r2, r4
  408a7e:	b2ad      	uxth	r5, r5
  408a80:	1b75      	subs	r5, r6, r5
  408a82:	b296      	uxth	r6, r2
  408a84:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  408a88:	fa15 f383 	uxtah	r3, r5, r3
  408a8c:	eb06 4623 	add.w	r6, r6, r3, asr #16
  408a90:	b29b      	uxth	r3, r3
  408a92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  408a96:	45e2      	cmp	sl, ip
  408a98:	ea4f 4512 	mov.w	r5, r2, lsr #16
  408a9c:	f84e 3b04 	str.w	r3, [lr], #4
  408aa0:	ea4f 4626 	mov.w	r6, r6, asr #16
  408aa4:	d2e0      	bcs.n	408a68 <quorem+0x48>
  408aa6:	9b00      	ldr	r3, [sp, #0]
  408aa8:	f85b 3003 	ldr.w	r3, [fp, r3]
  408aac:	b993      	cbnz	r3, 408ad4 <quorem+0xb4>
  408aae:	9c01      	ldr	r4, [sp, #4]
  408ab0:	1f23      	subs	r3, r4, #4
  408ab2:	459b      	cmp	fp, r3
  408ab4:	d20c      	bcs.n	408ad0 <quorem+0xb0>
  408ab6:	f854 3c04 	ldr.w	r3, [r4, #-4]
  408aba:	b94b      	cbnz	r3, 408ad0 <quorem+0xb0>
  408abc:	f1a4 0308 	sub.w	r3, r4, #8
  408ac0:	e002      	b.n	408ac8 <quorem+0xa8>
  408ac2:	681a      	ldr	r2, [r3, #0]
  408ac4:	3b04      	subs	r3, #4
  408ac6:	b91a      	cbnz	r2, 408ad0 <quorem+0xb0>
  408ac8:	459b      	cmp	fp, r3
  408aca:	f108 38ff 	add.w	r8, r8, #4294967295
  408ace:	d3f8      	bcc.n	408ac2 <quorem+0xa2>
  408ad0:	f8c0 8010 	str.w	r8, [r0, #16]
  408ad4:	4604      	mov	r4, r0
  408ad6:	f001 fec5 	bl	40a864 <__mcmp>
  408ada:	2800      	cmp	r0, #0
  408adc:	db2e      	blt.n	408b3c <quorem+0x11c>
  408ade:	f109 0901 	add.w	r9, r9, #1
  408ae2:	465d      	mov	r5, fp
  408ae4:	2300      	movs	r3, #0
  408ae6:	f857 1b04 	ldr.w	r1, [r7], #4
  408aea:	6828      	ldr	r0, [r5, #0]
  408aec:	b28a      	uxth	r2, r1
  408aee:	1a9a      	subs	r2, r3, r2
  408af0:	0c0b      	lsrs	r3, r1, #16
  408af2:	fa12 f280 	uxtah	r2, r2, r0
  408af6:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  408afa:	eb03 4322 	add.w	r3, r3, r2, asr #16
  408afe:	b292      	uxth	r2, r2
  408b00:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  408b04:	45ba      	cmp	sl, r7
  408b06:	f845 2b04 	str.w	r2, [r5], #4
  408b0a:	ea4f 4323 	mov.w	r3, r3, asr #16
  408b0e:	d2ea      	bcs.n	408ae6 <quorem+0xc6>
  408b10:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  408b14:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  408b18:	b982      	cbnz	r2, 408b3c <quorem+0x11c>
  408b1a:	1f1a      	subs	r2, r3, #4
  408b1c:	4593      	cmp	fp, r2
  408b1e:	d20b      	bcs.n	408b38 <quorem+0x118>
  408b20:	f853 2c04 	ldr.w	r2, [r3, #-4]
  408b24:	b942      	cbnz	r2, 408b38 <quorem+0x118>
  408b26:	3b08      	subs	r3, #8
  408b28:	e002      	b.n	408b30 <quorem+0x110>
  408b2a:	681a      	ldr	r2, [r3, #0]
  408b2c:	3b04      	subs	r3, #4
  408b2e:	b91a      	cbnz	r2, 408b38 <quorem+0x118>
  408b30:	459b      	cmp	fp, r3
  408b32:	f108 38ff 	add.w	r8, r8, #4294967295
  408b36:	d3f8      	bcc.n	408b2a <quorem+0x10a>
  408b38:	f8c4 8010 	str.w	r8, [r4, #16]
  408b3c:	4648      	mov	r0, r9
  408b3e:	b003      	add	sp, #12
  408b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408b44:	2000      	movs	r0, #0
  408b46:	4770      	bx	lr

00408b48 <_dtoa_r>:
  408b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408b4c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  408b4e:	b09b      	sub	sp, #108	; 0x6c
  408b50:	4604      	mov	r4, r0
  408b52:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  408b54:	4692      	mov	sl, r2
  408b56:	469b      	mov	fp, r3
  408b58:	b141      	cbz	r1, 408b6c <_dtoa_r+0x24>
  408b5a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  408b5c:	604a      	str	r2, [r1, #4]
  408b5e:	2301      	movs	r3, #1
  408b60:	4093      	lsls	r3, r2
  408b62:	608b      	str	r3, [r1, #8]
  408b64:	f001 fca6 	bl	40a4b4 <_Bfree>
  408b68:	2300      	movs	r3, #0
  408b6a:	6423      	str	r3, [r4, #64]	; 0x40
  408b6c:	f1bb 0f00 	cmp.w	fp, #0
  408b70:	465d      	mov	r5, fp
  408b72:	db35      	blt.n	408be0 <_dtoa_r+0x98>
  408b74:	2300      	movs	r3, #0
  408b76:	6033      	str	r3, [r6, #0]
  408b78:	4b9d      	ldr	r3, [pc, #628]	; (408df0 <_dtoa_r+0x2a8>)
  408b7a:	43ab      	bics	r3, r5
  408b7c:	d015      	beq.n	408baa <_dtoa_r+0x62>
  408b7e:	4650      	mov	r0, sl
  408b80:	4659      	mov	r1, fp
  408b82:	2200      	movs	r2, #0
  408b84:	2300      	movs	r3, #0
  408b86:	f7fd fa95 	bl	4060b4 <__aeabi_dcmpeq>
  408b8a:	4680      	mov	r8, r0
  408b8c:	2800      	cmp	r0, #0
  408b8e:	d02d      	beq.n	408bec <_dtoa_r+0xa4>
  408b90:	9a26      	ldr	r2, [sp, #152]	; 0x98
  408b92:	2301      	movs	r3, #1
  408b94:	6013      	str	r3, [r2, #0]
  408b96:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  408b98:	2b00      	cmp	r3, #0
  408b9a:	f000 80bd 	beq.w	408d18 <_dtoa_r+0x1d0>
  408b9e:	4895      	ldr	r0, [pc, #596]	; (408df4 <_dtoa_r+0x2ac>)
  408ba0:	6018      	str	r0, [r3, #0]
  408ba2:	3801      	subs	r0, #1
  408ba4:	b01b      	add	sp, #108	; 0x6c
  408ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408baa:	9a26      	ldr	r2, [sp, #152]	; 0x98
  408bac:	f242 730f 	movw	r3, #9999	; 0x270f
  408bb0:	6013      	str	r3, [r2, #0]
  408bb2:	f1ba 0f00 	cmp.w	sl, #0
  408bb6:	d10d      	bne.n	408bd4 <_dtoa_r+0x8c>
  408bb8:	f3c5 0513 	ubfx	r5, r5, #0, #20
  408bbc:	b955      	cbnz	r5, 408bd4 <_dtoa_r+0x8c>
  408bbe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  408bc0:	488d      	ldr	r0, [pc, #564]	; (408df8 <_dtoa_r+0x2b0>)
  408bc2:	2b00      	cmp	r3, #0
  408bc4:	d0ee      	beq.n	408ba4 <_dtoa_r+0x5c>
  408bc6:	f100 0308 	add.w	r3, r0, #8
  408bca:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  408bcc:	6013      	str	r3, [r2, #0]
  408bce:	b01b      	add	sp, #108	; 0x6c
  408bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408bd4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  408bd6:	4889      	ldr	r0, [pc, #548]	; (408dfc <_dtoa_r+0x2b4>)
  408bd8:	2b00      	cmp	r3, #0
  408bda:	d0e3      	beq.n	408ba4 <_dtoa_r+0x5c>
  408bdc:	1cc3      	adds	r3, r0, #3
  408bde:	e7f4      	b.n	408bca <_dtoa_r+0x82>
  408be0:	2301      	movs	r3, #1
  408be2:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  408be6:	6033      	str	r3, [r6, #0]
  408be8:	46ab      	mov	fp, r5
  408bea:	e7c5      	b.n	408b78 <_dtoa_r+0x30>
  408bec:	aa18      	add	r2, sp, #96	; 0x60
  408bee:	ab19      	add	r3, sp, #100	; 0x64
  408bf0:	9201      	str	r2, [sp, #4]
  408bf2:	9300      	str	r3, [sp, #0]
  408bf4:	4652      	mov	r2, sl
  408bf6:	465b      	mov	r3, fp
  408bf8:	4620      	mov	r0, r4
  408bfa:	f001 fed3 	bl	40a9a4 <__d2b>
  408bfe:	0d2b      	lsrs	r3, r5, #20
  408c00:	4681      	mov	r9, r0
  408c02:	d071      	beq.n	408ce8 <_dtoa_r+0x1a0>
  408c04:	f3cb 0213 	ubfx	r2, fp, #0, #20
  408c08:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  408c0c:	9f18      	ldr	r7, [sp, #96]	; 0x60
  408c0e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  408c12:	4650      	mov	r0, sl
  408c14:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  408c18:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  408c1c:	2200      	movs	r2, #0
  408c1e:	4b78      	ldr	r3, [pc, #480]	; (408e00 <_dtoa_r+0x2b8>)
  408c20:	f7fc fe2c 	bl	40587c <__aeabi_dsub>
  408c24:	a36c      	add	r3, pc, #432	; (adr r3, 408dd8 <_dtoa_r+0x290>)
  408c26:	e9d3 2300 	ldrd	r2, r3, [r3]
  408c2a:	f7fc ffdb 	bl	405be4 <__aeabi_dmul>
  408c2e:	a36c      	add	r3, pc, #432	; (adr r3, 408de0 <_dtoa_r+0x298>)
  408c30:	e9d3 2300 	ldrd	r2, r3, [r3]
  408c34:	f7fc fe24 	bl	405880 <__adddf3>
  408c38:	e9cd 0102 	strd	r0, r1, [sp, #8]
  408c3c:	4630      	mov	r0, r6
  408c3e:	f7fc ff6b 	bl	405b18 <__aeabi_i2d>
  408c42:	a369      	add	r3, pc, #420	; (adr r3, 408de8 <_dtoa_r+0x2a0>)
  408c44:	e9d3 2300 	ldrd	r2, r3, [r3]
  408c48:	f7fc ffcc 	bl	405be4 <__aeabi_dmul>
  408c4c:	4602      	mov	r2, r0
  408c4e:	460b      	mov	r3, r1
  408c50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  408c54:	f7fc fe14 	bl	405880 <__adddf3>
  408c58:	e9cd 0104 	strd	r0, r1, [sp, #16]
  408c5c:	f002 fbd8 	bl	40b410 <__aeabi_d2iz>
  408c60:	2200      	movs	r2, #0
  408c62:	9002      	str	r0, [sp, #8]
  408c64:	2300      	movs	r3, #0
  408c66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  408c6a:	f7fd fa2d 	bl	4060c8 <__aeabi_dcmplt>
  408c6e:	2800      	cmp	r0, #0
  408c70:	f040 8173 	bne.w	408f5a <_dtoa_r+0x412>
  408c74:	9d02      	ldr	r5, [sp, #8]
  408c76:	2d16      	cmp	r5, #22
  408c78:	f200 815d 	bhi.w	408f36 <_dtoa_r+0x3ee>
  408c7c:	4b61      	ldr	r3, [pc, #388]	; (408e04 <_dtoa_r+0x2bc>)
  408c7e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  408c82:	e9d3 0100 	ldrd	r0, r1, [r3]
  408c86:	4652      	mov	r2, sl
  408c88:	465b      	mov	r3, fp
  408c8a:	f7fd fa3b 	bl	406104 <__aeabi_dcmpgt>
  408c8e:	2800      	cmp	r0, #0
  408c90:	f000 81c5 	beq.w	40901e <_dtoa_r+0x4d6>
  408c94:	1e6b      	subs	r3, r5, #1
  408c96:	9302      	str	r3, [sp, #8]
  408c98:	2300      	movs	r3, #0
  408c9a:	930e      	str	r3, [sp, #56]	; 0x38
  408c9c:	1bbf      	subs	r7, r7, r6
  408c9e:	1e7b      	subs	r3, r7, #1
  408ca0:	9306      	str	r3, [sp, #24]
  408ca2:	f100 8154 	bmi.w	408f4e <_dtoa_r+0x406>
  408ca6:	2300      	movs	r3, #0
  408ca8:	9308      	str	r3, [sp, #32]
  408caa:	9b02      	ldr	r3, [sp, #8]
  408cac:	2b00      	cmp	r3, #0
  408cae:	f2c0 8145 	blt.w	408f3c <_dtoa_r+0x3f4>
  408cb2:	9a06      	ldr	r2, [sp, #24]
  408cb4:	930d      	str	r3, [sp, #52]	; 0x34
  408cb6:	4611      	mov	r1, r2
  408cb8:	4419      	add	r1, r3
  408cba:	2300      	movs	r3, #0
  408cbc:	9106      	str	r1, [sp, #24]
  408cbe:	930c      	str	r3, [sp, #48]	; 0x30
  408cc0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408cc2:	2b09      	cmp	r3, #9
  408cc4:	d82a      	bhi.n	408d1c <_dtoa_r+0x1d4>
  408cc6:	2b05      	cmp	r3, #5
  408cc8:	f340 865b 	ble.w	409982 <_dtoa_r+0xe3a>
  408ccc:	3b04      	subs	r3, #4
  408cce:	9324      	str	r3, [sp, #144]	; 0x90
  408cd0:	2500      	movs	r5, #0
  408cd2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408cd4:	3b02      	subs	r3, #2
  408cd6:	2b03      	cmp	r3, #3
  408cd8:	f200 8642 	bhi.w	409960 <_dtoa_r+0xe18>
  408cdc:	e8df f013 	tbh	[pc, r3, lsl #1]
  408ce0:	02c903d4 	.word	0x02c903d4
  408ce4:	046103df 	.word	0x046103df
  408ce8:	9f18      	ldr	r7, [sp, #96]	; 0x60
  408cea:	9e19      	ldr	r6, [sp, #100]	; 0x64
  408cec:	443e      	add	r6, r7
  408cee:	f206 4332 	addw	r3, r6, #1074	; 0x432
  408cf2:	2b20      	cmp	r3, #32
  408cf4:	f340 818e 	ble.w	409014 <_dtoa_r+0x4cc>
  408cf8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  408cfc:	f206 4012 	addw	r0, r6, #1042	; 0x412
  408d00:	409d      	lsls	r5, r3
  408d02:	fa2a f000 	lsr.w	r0, sl, r0
  408d06:	4328      	orrs	r0, r5
  408d08:	f7fc fef6 	bl	405af8 <__aeabi_ui2d>
  408d0c:	2301      	movs	r3, #1
  408d0e:	3e01      	subs	r6, #1
  408d10:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  408d14:	9314      	str	r3, [sp, #80]	; 0x50
  408d16:	e781      	b.n	408c1c <_dtoa_r+0xd4>
  408d18:	483b      	ldr	r0, [pc, #236]	; (408e08 <_dtoa_r+0x2c0>)
  408d1a:	e743      	b.n	408ba4 <_dtoa_r+0x5c>
  408d1c:	2100      	movs	r1, #0
  408d1e:	6461      	str	r1, [r4, #68]	; 0x44
  408d20:	4620      	mov	r0, r4
  408d22:	9125      	str	r1, [sp, #148]	; 0x94
  408d24:	f001 fba0 	bl	40a468 <_Balloc>
  408d28:	f04f 33ff 	mov.w	r3, #4294967295
  408d2c:	930a      	str	r3, [sp, #40]	; 0x28
  408d2e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  408d30:	930f      	str	r3, [sp, #60]	; 0x3c
  408d32:	2301      	movs	r3, #1
  408d34:	9004      	str	r0, [sp, #16]
  408d36:	6420      	str	r0, [r4, #64]	; 0x40
  408d38:	9224      	str	r2, [sp, #144]	; 0x90
  408d3a:	930b      	str	r3, [sp, #44]	; 0x2c
  408d3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
  408d3e:	2b00      	cmp	r3, #0
  408d40:	f2c0 80d9 	blt.w	408ef6 <_dtoa_r+0x3ae>
  408d44:	9a02      	ldr	r2, [sp, #8]
  408d46:	2a0e      	cmp	r2, #14
  408d48:	f300 80d5 	bgt.w	408ef6 <_dtoa_r+0x3ae>
  408d4c:	4b2d      	ldr	r3, [pc, #180]	; (408e04 <_dtoa_r+0x2bc>)
  408d4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  408d52:	e9d3 2300 	ldrd	r2, r3, [r3]
  408d56:	e9cd 2308 	strd	r2, r3, [sp, #32]
  408d5a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  408d5c:	2b00      	cmp	r3, #0
  408d5e:	f2c0 83ba 	blt.w	4094d6 <_dtoa_r+0x98e>
  408d62:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  408d66:	4650      	mov	r0, sl
  408d68:	462a      	mov	r2, r5
  408d6a:	4633      	mov	r3, r6
  408d6c:	4659      	mov	r1, fp
  408d6e:	f7fd f863 	bl	405e38 <__aeabi_ddiv>
  408d72:	f002 fb4d 	bl	40b410 <__aeabi_d2iz>
  408d76:	4680      	mov	r8, r0
  408d78:	f7fc fece 	bl	405b18 <__aeabi_i2d>
  408d7c:	462a      	mov	r2, r5
  408d7e:	4633      	mov	r3, r6
  408d80:	f7fc ff30 	bl	405be4 <__aeabi_dmul>
  408d84:	460b      	mov	r3, r1
  408d86:	4602      	mov	r2, r0
  408d88:	4659      	mov	r1, fp
  408d8a:	4650      	mov	r0, sl
  408d8c:	f7fc fd76 	bl	40587c <__aeabi_dsub>
  408d90:	9d04      	ldr	r5, [sp, #16]
  408d92:	f108 0330 	add.w	r3, r8, #48	; 0x30
  408d96:	702b      	strb	r3, [r5, #0]
  408d98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408d9a:	2b01      	cmp	r3, #1
  408d9c:	4606      	mov	r6, r0
  408d9e:	460f      	mov	r7, r1
  408da0:	f105 0501 	add.w	r5, r5, #1
  408da4:	d068      	beq.n	408e78 <_dtoa_r+0x330>
  408da6:	2200      	movs	r2, #0
  408da8:	4b18      	ldr	r3, [pc, #96]	; (408e0c <_dtoa_r+0x2c4>)
  408daa:	f7fc ff1b 	bl	405be4 <__aeabi_dmul>
  408dae:	2200      	movs	r2, #0
  408db0:	2300      	movs	r3, #0
  408db2:	4606      	mov	r6, r0
  408db4:	460f      	mov	r7, r1
  408db6:	f7fd f97d 	bl	4060b4 <__aeabi_dcmpeq>
  408dba:	2800      	cmp	r0, #0
  408dbc:	f040 8088 	bne.w	408ed0 <_dtoa_r+0x388>
  408dc0:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  408dc4:	f04f 0a00 	mov.w	sl, #0
  408dc8:	f8df b040 	ldr.w	fp, [pc, #64]	; 408e0c <_dtoa_r+0x2c4>
  408dcc:	940c      	str	r4, [sp, #48]	; 0x30
  408dce:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  408dd2:	e028      	b.n	408e26 <_dtoa_r+0x2de>
  408dd4:	f3af 8000 	nop.w
  408dd8:	636f4361 	.word	0x636f4361
  408ddc:	3fd287a7 	.word	0x3fd287a7
  408de0:	8b60c8b3 	.word	0x8b60c8b3
  408de4:	3fc68a28 	.word	0x3fc68a28
  408de8:	509f79fb 	.word	0x509f79fb
  408dec:	3fd34413 	.word	0x3fd34413
  408df0:	7ff00000 	.word	0x7ff00000
  408df4:	0040bd85 	.word	0x0040bd85
  408df8:	0040bda8 	.word	0x0040bda8
  408dfc:	0040bdb4 	.word	0x0040bdb4
  408e00:	3ff80000 	.word	0x3ff80000
  408e04:	0040bde0 	.word	0x0040bde0
  408e08:	0040bd84 	.word	0x0040bd84
  408e0c:	40240000 	.word	0x40240000
  408e10:	f7fc fee8 	bl	405be4 <__aeabi_dmul>
  408e14:	2200      	movs	r2, #0
  408e16:	2300      	movs	r3, #0
  408e18:	4606      	mov	r6, r0
  408e1a:	460f      	mov	r7, r1
  408e1c:	f7fd f94a 	bl	4060b4 <__aeabi_dcmpeq>
  408e20:	2800      	cmp	r0, #0
  408e22:	f040 83c1 	bne.w	4095a8 <_dtoa_r+0xa60>
  408e26:	4642      	mov	r2, r8
  408e28:	464b      	mov	r3, r9
  408e2a:	4630      	mov	r0, r6
  408e2c:	4639      	mov	r1, r7
  408e2e:	f7fd f803 	bl	405e38 <__aeabi_ddiv>
  408e32:	f002 faed 	bl	40b410 <__aeabi_d2iz>
  408e36:	4604      	mov	r4, r0
  408e38:	f7fc fe6e 	bl	405b18 <__aeabi_i2d>
  408e3c:	4642      	mov	r2, r8
  408e3e:	464b      	mov	r3, r9
  408e40:	f7fc fed0 	bl	405be4 <__aeabi_dmul>
  408e44:	4602      	mov	r2, r0
  408e46:	460b      	mov	r3, r1
  408e48:	4630      	mov	r0, r6
  408e4a:	4639      	mov	r1, r7
  408e4c:	f7fc fd16 	bl	40587c <__aeabi_dsub>
  408e50:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  408e54:	9e04      	ldr	r6, [sp, #16]
  408e56:	f805 eb01 	strb.w	lr, [r5], #1
  408e5a:	eba5 0e06 	sub.w	lr, r5, r6
  408e5e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  408e60:	45b6      	cmp	lr, r6
  408e62:	e9cd 0106 	strd	r0, r1, [sp, #24]
  408e66:	4652      	mov	r2, sl
  408e68:	465b      	mov	r3, fp
  408e6a:	d1d1      	bne.n	408e10 <_dtoa_r+0x2c8>
  408e6c:	46a0      	mov	r8, r4
  408e6e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  408e72:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  408e74:	4606      	mov	r6, r0
  408e76:	460f      	mov	r7, r1
  408e78:	4632      	mov	r2, r6
  408e7a:	463b      	mov	r3, r7
  408e7c:	4630      	mov	r0, r6
  408e7e:	4639      	mov	r1, r7
  408e80:	f7fc fcfe 	bl	405880 <__adddf3>
  408e84:	4606      	mov	r6, r0
  408e86:	460f      	mov	r7, r1
  408e88:	4602      	mov	r2, r0
  408e8a:	460b      	mov	r3, r1
  408e8c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  408e90:	f7fd f91a 	bl	4060c8 <__aeabi_dcmplt>
  408e94:	b948      	cbnz	r0, 408eaa <_dtoa_r+0x362>
  408e96:	4632      	mov	r2, r6
  408e98:	463b      	mov	r3, r7
  408e9a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  408e9e:	f7fd f909 	bl	4060b4 <__aeabi_dcmpeq>
  408ea2:	b1a8      	cbz	r0, 408ed0 <_dtoa_r+0x388>
  408ea4:	f018 0f01 	tst.w	r8, #1
  408ea8:	d012      	beq.n	408ed0 <_dtoa_r+0x388>
  408eaa:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  408eae:	9a04      	ldr	r2, [sp, #16]
  408eb0:	1e6b      	subs	r3, r5, #1
  408eb2:	e004      	b.n	408ebe <_dtoa_r+0x376>
  408eb4:	429a      	cmp	r2, r3
  408eb6:	f000 8401 	beq.w	4096bc <_dtoa_r+0xb74>
  408eba:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  408ebe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  408ec2:	f103 0501 	add.w	r5, r3, #1
  408ec6:	d0f5      	beq.n	408eb4 <_dtoa_r+0x36c>
  408ec8:	f108 0801 	add.w	r8, r8, #1
  408ecc:	f883 8000 	strb.w	r8, [r3]
  408ed0:	4649      	mov	r1, r9
  408ed2:	4620      	mov	r0, r4
  408ed4:	f001 faee 	bl	40a4b4 <_Bfree>
  408ed8:	2200      	movs	r2, #0
  408eda:	9b02      	ldr	r3, [sp, #8]
  408edc:	702a      	strb	r2, [r5, #0]
  408ede:	9a26      	ldr	r2, [sp, #152]	; 0x98
  408ee0:	3301      	adds	r3, #1
  408ee2:	6013      	str	r3, [r2, #0]
  408ee4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  408ee6:	2b00      	cmp	r3, #0
  408ee8:	f000 839e 	beq.w	409628 <_dtoa_r+0xae0>
  408eec:	9804      	ldr	r0, [sp, #16]
  408eee:	601d      	str	r5, [r3, #0]
  408ef0:	b01b      	add	sp, #108	; 0x6c
  408ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408ef6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  408ef8:	2a00      	cmp	r2, #0
  408efa:	d03e      	beq.n	408f7a <_dtoa_r+0x432>
  408efc:	9a24      	ldr	r2, [sp, #144]	; 0x90
  408efe:	2a01      	cmp	r2, #1
  408f00:	f340 8311 	ble.w	409526 <_dtoa_r+0x9de>
  408f04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408f06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  408f08:	1e5f      	subs	r7, r3, #1
  408f0a:	42ba      	cmp	r2, r7
  408f0c:	f2c0 838f 	blt.w	40962e <_dtoa_r+0xae6>
  408f10:	1bd7      	subs	r7, r2, r7
  408f12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408f14:	2b00      	cmp	r3, #0
  408f16:	f2c0 848b 	blt.w	409830 <_dtoa_r+0xce8>
  408f1a:	9d08      	ldr	r5, [sp, #32]
  408f1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408f1e:	9a08      	ldr	r2, [sp, #32]
  408f20:	441a      	add	r2, r3
  408f22:	9208      	str	r2, [sp, #32]
  408f24:	9a06      	ldr	r2, [sp, #24]
  408f26:	2101      	movs	r1, #1
  408f28:	441a      	add	r2, r3
  408f2a:	4620      	mov	r0, r4
  408f2c:	9206      	str	r2, [sp, #24]
  408f2e:	f001 fb5b 	bl	40a5e8 <__i2b>
  408f32:	4606      	mov	r6, r0
  408f34:	e024      	b.n	408f80 <_dtoa_r+0x438>
  408f36:	2301      	movs	r3, #1
  408f38:	930e      	str	r3, [sp, #56]	; 0x38
  408f3a:	e6af      	b.n	408c9c <_dtoa_r+0x154>
  408f3c:	9a08      	ldr	r2, [sp, #32]
  408f3e:	9b02      	ldr	r3, [sp, #8]
  408f40:	1ad2      	subs	r2, r2, r3
  408f42:	425b      	negs	r3, r3
  408f44:	930c      	str	r3, [sp, #48]	; 0x30
  408f46:	2300      	movs	r3, #0
  408f48:	9208      	str	r2, [sp, #32]
  408f4a:	930d      	str	r3, [sp, #52]	; 0x34
  408f4c:	e6b8      	b.n	408cc0 <_dtoa_r+0x178>
  408f4e:	f1c7 0301 	rsb	r3, r7, #1
  408f52:	9308      	str	r3, [sp, #32]
  408f54:	2300      	movs	r3, #0
  408f56:	9306      	str	r3, [sp, #24]
  408f58:	e6a7      	b.n	408caa <_dtoa_r+0x162>
  408f5a:	9d02      	ldr	r5, [sp, #8]
  408f5c:	4628      	mov	r0, r5
  408f5e:	f7fc fddb 	bl	405b18 <__aeabi_i2d>
  408f62:	4602      	mov	r2, r0
  408f64:	460b      	mov	r3, r1
  408f66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  408f6a:	f7fd f8a3 	bl	4060b4 <__aeabi_dcmpeq>
  408f6e:	2800      	cmp	r0, #0
  408f70:	f47f ae80 	bne.w	408c74 <_dtoa_r+0x12c>
  408f74:	1e6b      	subs	r3, r5, #1
  408f76:	9302      	str	r3, [sp, #8]
  408f78:	e67c      	b.n	408c74 <_dtoa_r+0x12c>
  408f7a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  408f7c:	9d08      	ldr	r5, [sp, #32]
  408f7e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  408f80:	2d00      	cmp	r5, #0
  408f82:	dd0c      	ble.n	408f9e <_dtoa_r+0x456>
  408f84:	9906      	ldr	r1, [sp, #24]
  408f86:	2900      	cmp	r1, #0
  408f88:	460b      	mov	r3, r1
  408f8a:	dd08      	ble.n	408f9e <_dtoa_r+0x456>
  408f8c:	42a9      	cmp	r1, r5
  408f8e:	9a08      	ldr	r2, [sp, #32]
  408f90:	bfa8      	it	ge
  408f92:	462b      	movge	r3, r5
  408f94:	1ad2      	subs	r2, r2, r3
  408f96:	1aed      	subs	r5, r5, r3
  408f98:	1acb      	subs	r3, r1, r3
  408f9a:	9208      	str	r2, [sp, #32]
  408f9c:	9306      	str	r3, [sp, #24]
  408f9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408fa0:	b1d3      	cbz	r3, 408fd8 <_dtoa_r+0x490>
  408fa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  408fa4:	2b00      	cmp	r3, #0
  408fa6:	f000 82b7 	beq.w	409518 <_dtoa_r+0x9d0>
  408faa:	2f00      	cmp	r7, #0
  408fac:	dd10      	ble.n	408fd0 <_dtoa_r+0x488>
  408fae:	4631      	mov	r1, r6
  408fb0:	463a      	mov	r2, r7
  408fb2:	4620      	mov	r0, r4
  408fb4:	f001 fbb4 	bl	40a720 <__pow5mult>
  408fb8:	464a      	mov	r2, r9
  408fba:	4601      	mov	r1, r0
  408fbc:	4606      	mov	r6, r0
  408fbe:	4620      	mov	r0, r4
  408fc0:	f001 fb1c 	bl	40a5fc <__multiply>
  408fc4:	4649      	mov	r1, r9
  408fc6:	4680      	mov	r8, r0
  408fc8:	4620      	mov	r0, r4
  408fca:	f001 fa73 	bl	40a4b4 <_Bfree>
  408fce:	46c1      	mov	r9, r8
  408fd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408fd2:	1bda      	subs	r2, r3, r7
  408fd4:	f040 82a1 	bne.w	40951a <_dtoa_r+0x9d2>
  408fd8:	2101      	movs	r1, #1
  408fda:	4620      	mov	r0, r4
  408fdc:	f001 fb04 	bl	40a5e8 <__i2b>
  408fe0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408fe2:	2b00      	cmp	r3, #0
  408fe4:	4680      	mov	r8, r0
  408fe6:	dd1c      	ble.n	409022 <_dtoa_r+0x4da>
  408fe8:	4601      	mov	r1, r0
  408fea:	461a      	mov	r2, r3
  408fec:	4620      	mov	r0, r4
  408fee:	f001 fb97 	bl	40a720 <__pow5mult>
  408ff2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408ff4:	2b01      	cmp	r3, #1
  408ff6:	4680      	mov	r8, r0
  408ff8:	f340 8254 	ble.w	4094a4 <_dtoa_r+0x95c>
  408ffc:	2300      	movs	r3, #0
  408ffe:	930c      	str	r3, [sp, #48]	; 0x30
  409000:	f8d8 3010 	ldr.w	r3, [r8, #16]
  409004:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  409008:	6918      	ldr	r0, [r3, #16]
  40900a:	f001 fa9d 	bl	40a548 <__hi0bits>
  40900e:	f1c0 0020 	rsb	r0, r0, #32
  409012:	e010      	b.n	409036 <_dtoa_r+0x4ee>
  409014:	f1c3 0520 	rsb	r5, r3, #32
  409018:	fa0a f005 	lsl.w	r0, sl, r5
  40901c:	e674      	b.n	408d08 <_dtoa_r+0x1c0>
  40901e:	900e      	str	r0, [sp, #56]	; 0x38
  409020:	e63c      	b.n	408c9c <_dtoa_r+0x154>
  409022:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409024:	2b01      	cmp	r3, #1
  409026:	f340 8287 	ble.w	409538 <_dtoa_r+0x9f0>
  40902a:	2300      	movs	r3, #0
  40902c:	930c      	str	r3, [sp, #48]	; 0x30
  40902e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  409030:	2001      	movs	r0, #1
  409032:	2b00      	cmp	r3, #0
  409034:	d1e4      	bne.n	409000 <_dtoa_r+0x4b8>
  409036:	9a06      	ldr	r2, [sp, #24]
  409038:	4410      	add	r0, r2
  40903a:	f010 001f 	ands.w	r0, r0, #31
  40903e:	f000 80a1 	beq.w	409184 <_dtoa_r+0x63c>
  409042:	f1c0 0320 	rsb	r3, r0, #32
  409046:	2b04      	cmp	r3, #4
  409048:	f340 849e 	ble.w	409988 <_dtoa_r+0xe40>
  40904c:	9b08      	ldr	r3, [sp, #32]
  40904e:	f1c0 001c 	rsb	r0, r0, #28
  409052:	4403      	add	r3, r0
  409054:	9308      	str	r3, [sp, #32]
  409056:	4613      	mov	r3, r2
  409058:	4403      	add	r3, r0
  40905a:	4405      	add	r5, r0
  40905c:	9306      	str	r3, [sp, #24]
  40905e:	9b08      	ldr	r3, [sp, #32]
  409060:	2b00      	cmp	r3, #0
  409062:	dd05      	ble.n	409070 <_dtoa_r+0x528>
  409064:	4649      	mov	r1, r9
  409066:	461a      	mov	r2, r3
  409068:	4620      	mov	r0, r4
  40906a:	f001 fba9 	bl	40a7c0 <__lshift>
  40906e:	4681      	mov	r9, r0
  409070:	9b06      	ldr	r3, [sp, #24]
  409072:	2b00      	cmp	r3, #0
  409074:	dd05      	ble.n	409082 <_dtoa_r+0x53a>
  409076:	4641      	mov	r1, r8
  409078:	461a      	mov	r2, r3
  40907a:	4620      	mov	r0, r4
  40907c:	f001 fba0 	bl	40a7c0 <__lshift>
  409080:	4680      	mov	r8, r0
  409082:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  409084:	2b00      	cmp	r3, #0
  409086:	f040 8086 	bne.w	409196 <_dtoa_r+0x64e>
  40908a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40908c:	2b00      	cmp	r3, #0
  40908e:	f340 8266 	ble.w	40955e <_dtoa_r+0xa16>
  409092:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  409094:	2b00      	cmp	r3, #0
  409096:	f000 8098 	beq.w	4091ca <_dtoa_r+0x682>
  40909a:	2d00      	cmp	r5, #0
  40909c:	dd05      	ble.n	4090aa <_dtoa_r+0x562>
  40909e:	4631      	mov	r1, r6
  4090a0:	462a      	mov	r2, r5
  4090a2:	4620      	mov	r0, r4
  4090a4:	f001 fb8c 	bl	40a7c0 <__lshift>
  4090a8:	4606      	mov	r6, r0
  4090aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4090ac:	2b00      	cmp	r3, #0
  4090ae:	f040 8337 	bne.w	409720 <_dtoa_r+0xbd8>
  4090b2:	9606      	str	r6, [sp, #24]
  4090b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4090b6:	9a04      	ldr	r2, [sp, #16]
  4090b8:	f8dd b018 	ldr.w	fp, [sp, #24]
  4090bc:	3b01      	subs	r3, #1
  4090be:	18d3      	adds	r3, r2, r3
  4090c0:	930b      	str	r3, [sp, #44]	; 0x2c
  4090c2:	f00a 0301 	and.w	r3, sl, #1
  4090c6:	930c      	str	r3, [sp, #48]	; 0x30
  4090c8:	4617      	mov	r7, r2
  4090ca:	46c2      	mov	sl, r8
  4090cc:	4651      	mov	r1, sl
  4090ce:	4648      	mov	r0, r9
  4090d0:	f7ff fca6 	bl	408a20 <quorem>
  4090d4:	4631      	mov	r1, r6
  4090d6:	4605      	mov	r5, r0
  4090d8:	4648      	mov	r0, r9
  4090da:	f001 fbc3 	bl	40a864 <__mcmp>
  4090de:	465a      	mov	r2, fp
  4090e0:	900a      	str	r0, [sp, #40]	; 0x28
  4090e2:	4651      	mov	r1, sl
  4090e4:	4620      	mov	r0, r4
  4090e6:	f001 fbd9 	bl	40a89c <__mdiff>
  4090ea:	68c2      	ldr	r2, [r0, #12]
  4090ec:	4680      	mov	r8, r0
  4090ee:	f105 0330 	add.w	r3, r5, #48	; 0x30
  4090f2:	2a00      	cmp	r2, #0
  4090f4:	f040 822b 	bne.w	40954e <_dtoa_r+0xa06>
  4090f8:	4601      	mov	r1, r0
  4090fa:	4648      	mov	r0, r9
  4090fc:	9308      	str	r3, [sp, #32]
  4090fe:	f001 fbb1 	bl	40a864 <__mcmp>
  409102:	4641      	mov	r1, r8
  409104:	9006      	str	r0, [sp, #24]
  409106:	4620      	mov	r0, r4
  409108:	f001 f9d4 	bl	40a4b4 <_Bfree>
  40910c:	9a06      	ldr	r2, [sp, #24]
  40910e:	9b08      	ldr	r3, [sp, #32]
  409110:	b932      	cbnz	r2, 409120 <_dtoa_r+0x5d8>
  409112:	9924      	ldr	r1, [sp, #144]	; 0x90
  409114:	b921      	cbnz	r1, 409120 <_dtoa_r+0x5d8>
  409116:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  409118:	2a00      	cmp	r2, #0
  40911a:	f000 83ef 	beq.w	4098fc <_dtoa_r+0xdb4>
  40911e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  409120:	990a      	ldr	r1, [sp, #40]	; 0x28
  409122:	2900      	cmp	r1, #0
  409124:	f2c0 829f 	blt.w	409666 <_dtoa_r+0xb1e>
  409128:	d105      	bne.n	409136 <_dtoa_r+0x5ee>
  40912a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40912c:	b919      	cbnz	r1, 409136 <_dtoa_r+0x5ee>
  40912e:	990c      	ldr	r1, [sp, #48]	; 0x30
  409130:	2900      	cmp	r1, #0
  409132:	f000 8298 	beq.w	409666 <_dtoa_r+0xb1e>
  409136:	2a00      	cmp	r2, #0
  409138:	f300 8306 	bgt.w	409748 <_dtoa_r+0xc00>
  40913c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40913e:	703b      	strb	r3, [r7, #0]
  409140:	f107 0801 	add.w	r8, r7, #1
  409144:	4297      	cmp	r7, r2
  409146:	4645      	mov	r5, r8
  409148:	f000 830c 	beq.w	409764 <_dtoa_r+0xc1c>
  40914c:	4649      	mov	r1, r9
  40914e:	2300      	movs	r3, #0
  409150:	220a      	movs	r2, #10
  409152:	4620      	mov	r0, r4
  409154:	f001 f9b8 	bl	40a4c8 <__multadd>
  409158:	455e      	cmp	r6, fp
  40915a:	4681      	mov	r9, r0
  40915c:	4631      	mov	r1, r6
  40915e:	f04f 0300 	mov.w	r3, #0
  409162:	f04f 020a 	mov.w	r2, #10
  409166:	4620      	mov	r0, r4
  409168:	f000 81eb 	beq.w	409542 <_dtoa_r+0x9fa>
  40916c:	f001 f9ac 	bl	40a4c8 <__multadd>
  409170:	4659      	mov	r1, fp
  409172:	4606      	mov	r6, r0
  409174:	2300      	movs	r3, #0
  409176:	220a      	movs	r2, #10
  409178:	4620      	mov	r0, r4
  40917a:	f001 f9a5 	bl	40a4c8 <__multadd>
  40917e:	4647      	mov	r7, r8
  409180:	4683      	mov	fp, r0
  409182:	e7a3      	b.n	4090cc <_dtoa_r+0x584>
  409184:	201c      	movs	r0, #28
  409186:	9b08      	ldr	r3, [sp, #32]
  409188:	4403      	add	r3, r0
  40918a:	9308      	str	r3, [sp, #32]
  40918c:	9b06      	ldr	r3, [sp, #24]
  40918e:	4403      	add	r3, r0
  409190:	4405      	add	r5, r0
  409192:	9306      	str	r3, [sp, #24]
  409194:	e763      	b.n	40905e <_dtoa_r+0x516>
  409196:	4641      	mov	r1, r8
  409198:	4648      	mov	r0, r9
  40919a:	f001 fb63 	bl	40a864 <__mcmp>
  40919e:	2800      	cmp	r0, #0
  4091a0:	f6bf af73 	bge.w	40908a <_dtoa_r+0x542>
  4091a4:	9f02      	ldr	r7, [sp, #8]
  4091a6:	4649      	mov	r1, r9
  4091a8:	2300      	movs	r3, #0
  4091aa:	220a      	movs	r2, #10
  4091ac:	4620      	mov	r0, r4
  4091ae:	3f01      	subs	r7, #1
  4091b0:	9702      	str	r7, [sp, #8]
  4091b2:	f001 f989 	bl	40a4c8 <__multadd>
  4091b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4091b8:	4681      	mov	r9, r0
  4091ba:	2b00      	cmp	r3, #0
  4091bc:	f040 83b6 	bne.w	40992c <_dtoa_r+0xde4>
  4091c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4091c2:	2b00      	cmp	r3, #0
  4091c4:	f340 83bf 	ble.w	409946 <_dtoa_r+0xdfe>
  4091c8:	930a      	str	r3, [sp, #40]	; 0x28
  4091ca:	f8dd b010 	ldr.w	fp, [sp, #16]
  4091ce:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4091d0:	465d      	mov	r5, fp
  4091d2:	e002      	b.n	4091da <_dtoa_r+0x692>
  4091d4:	f001 f978 	bl	40a4c8 <__multadd>
  4091d8:	4681      	mov	r9, r0
  4091da:	4641      	mov	r1, r8
  4091dc:	4648      	mov	r0, r9
  4091de:	f7ff fc1f 	bl	408a20 <quorem>
  4091e2:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  4091e6:	f805 ab01 	strb.w	sl, [r5], #1
  4091ea:	eba5 030b 	sub.w	r3, r5, fp
  4091ee:	42bb      	cmp	r3, r7
  4091f0:	f04f 020a 	mov.w	r2, #10
  4091f4:	f04f 0300 	mov.w	r3, #0
  4091f8:	4649      	mov	r1, r9
  4091fa:	4620      	mov	r0, r4
  4091fc:	dbea      	blt.n	4091d4 <_dtoa_r+0x68c>
  4091fe:	9b04      	ldr	r3, [sp, #16]
  409200:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  409202:	2a01      	cmp	r2, #1
  409204:	bfac      	ite	ge
  409206:	189b      	addge	r3, r3, r2
  409208:	3301      	addlt	r3, #1
  40920a:	461d      	mov	r5, r3
  40920c:	f04f 0b00 	mov.w	fp, #0
  409210:	4649      	mov	r1, r9
  409212:	2201      	movs	r2, #1
  409214:	4620      	mov	r0, r4
  409216:	f001 fad3 	bl	40a7c0 <__lshift>
  40921a:	4641      	mov	r1, r8
  40921c:	4681      	mov	r9, r0
  40921e:	f001 fb21 	bl	40a864 <__mcmp>
  409222:	2800      	cmp	r0, #0
  409224:	f340 823d 	ble.w	4096a2 <_dtoa_r+0xb5a>
  409228:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40922c:	9904      	ldr	r1, [sp, #16]
  40922e:	1e6b      	subs	r3, r5, #1
  409230:	e004      	b.n	40923c <_dtoa_r+0x6f4>
  409232:	428b      	cmp	r3, r1
  409234:	f000 81ae 	beq.w	409594 <_dtoa_r+0xa4c>
  409238:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40923c:	2a39      	cmp	r2, #57	; 0x39
  40923e:	f103 0501 	add.w	r5, r3, #1
  409242:	d0f6      	beq.n	409232 <_dtoa_r+0x6ea>
  409244:	3201      	adds	r2, #1
  409246:	701a      	strb	r2, [r3, #0]
  409248:	4641      	mov	r1, r8
  40924a:	4620      	mov	r0, r4
  40924c:	f001 f932 	bl	40a4b4 <_Bfree>
  409250:	2e00      	cmp	r6, #0
  409252:	f43f ae3d 	beq.w	408ed0 <_dtoa_r+0x388>
  409256:	f1bb 0f00 	cmp.w	fp, #0
  40925a:	d005      	beq.n	409268 <_dtoa_r+0x720>
  40925c:	45b3      	cmp	fp, r6
  40925e:	d003      	beq.n	409268 <_dtoa_r+0x720>
  409260:	4659      	mov	r1, fp
  409262:	4620      	mov	r0, r4
  409264:	f001 f926 	bl	40a4b4 <_Bfree>
  409268:	4631      	mov	r1, r6
  40926a:	4620      	mov	r0, r4
  40926c:	f001 f922 	bl	40a4b4 <_Bfree>
  409270:	e62e      	b.n	408ed0 <_dtoa_r+0x388>
  409272:	2300      	movs	r3, #0
  409274:	930b      	str	r3, [sp, #44]	; 0x2c
  409276:	9b02      	ldr	r3, [sp, #8]
  409278:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40927a:	4413      	add	r3, r2
  40927c:	930f      	str	r3, [sp, #60]	; 0x3c
  40927e:	3301      	adds	r3, #1
  409280:	2b01      	cmp	r3, #1
  409282:	461f      	mov	r7, r3
  409284:	461e      	mov	r6, r3
  409286:	930a      	str	r3, [sp, #40]	; 0x28
  409288:	bfb8      	it	lt
  40928a:	2701      	movlt	r7, #1
  40928c:	2100      	movs	r1, #0
  40928e:	2f17      	cmp	r7, #23
  409290:	6461      	str	r1, [r4, #68]	; 0x44
  409292:	d90a      	bls.n	4092aa <_dtoa_r+0x762>
  409294:	2201      	movs	r2, #1
  409296:	2304      	movs	r3, #4
  409298:	005b      	lsls	r3, r3, #1
  40929a:	f103 0014 	add.w	r0, r3, #20
  40929e:	4287      	cmp	r7, r0
  4092a0:	4611      	mov	r1, r2
  4092a2:	f102 0201 	add.w	r2, r2, #1
  4092a6:	d2f7      	bcs.n	409298 <_dtoa_r+0x750>
  4092a8:	6461      	str	r1, [r4, #68]	; 0x44
  4092aa:	4620      	mov	r0, r4
  4092ac:	f001 f8dc 	bl	40a468 <_Balloc>
  4092b0:	2e0e      	cmp	r6, #14
  4092b2:	9004      	str	r0, [sp, #16]
  4092b4:	6420      	str	r0, [r4, #64]	; 0x40
  4092b6:	f63f ad41 	bhi.w	408d3c <_dtoa_r+0x1f4>
  4092ba:	2d00      	cmp	r5, #0
  4092bc:	f43f ad3e 	beq.w	408d3c <_dtoa_r+0x1f4>
  4092c0:	9902      	ldr	r1, [sp, #8]
  4092c2:	2900      	cmp	r1, #0
  4092c4:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  4092c8:	f340 8202 	ble.w	4096d0 <_dtoa_r+0xb88>
  4092cc:	4bb8      	ldr	r3, [pc, #736]	; (4095b0 <_dtoa_r+0xa68>)
  4092ce:	f001 020f 	and.w	r2, r1, #15
  4092d2:	110d      	asrs	r5, r1, #4
  4092d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4092d8:	06e9      	lsls	r1, r5, #27
  4092da:	e9d3 6700 	ldrd	r6, r7, [r3]
  4092de:	f140 81ae 	bpl.w	40963e <_dtoa_r+0xaf6>
  4092e2:	4bb4      	ldr	r3, [pc, #720]	; (4095b4 <_dtoa_r+0xa6c>)
  4092e4:	4650      	mov	r0, sl
  4092e6:	4659      	mov	r1, fp
  4092e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  4092ec:	f7fc fda4 	bl	405e38 <__aeabi_ddiv>
  4092f0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  4092f4:	f005 050f 	and.w	r5, r5, #15
  4092f8:	f04f 0a03 	mov.w	sl, #3
  4092fc:	b18d      	cbz	r5, 409322 <_dtoa_r+0x7da>
  4092fe:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 4095b4 <_dtoa_r+0xa6c>
  409302:	07ea      	lsls	r2, r5, #31
  409304:	d509      	bpl.n	40931a <_dtoa_r+0x7d2>
  409306:	4630      	mov	r0, r6
  409308:	4639      	mov	r1, r7
  40930a:	e9d8 2300 	ldrd	r2, r3, [r8]
  40930e:	f7fc fc69 	bl	405be4 <__aeabi_dmul>
  409312:	f10a 0a01 	add.w	sl, sl, #1
  409316:	4606      	mov	r6, r0
  409318:	460f      	mov	r7, r1
  40931a:	106d      	asrs	r5, r5, #1
  40931c:	f108 0808 	add.w	r8, r8, #8
  409320:	d1ef      	bne.n	409302 <_dtoa_r+0x7ba>
  409322:	463b      	mov	r3, r7
  409324:	4632      	mov	r2, r6
  409326:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40932a:	f7fc fd85 	bl	405e38 <__aeabi_ddiv>
  40932e:	4607      	mov	r7, r0
  409330:	4688      	mov	r8, r1
  409332:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  409334:	b143      	cbz	r3, 409348 <_dtoa_r+0x800>
  409336:	2200      	movs	r2, #0
  409338:	4b9f      	ldr	r3, [pc, #636]	; (4095b8 <_dtoa_r+0xa70>)
  40933a:	4638      	mov	r0, r7
  40933c:	4641      	mov	r1, r8
  40933e:	f7fc fec3 	bl	4060c8 <__aeabi_dcmplt>
  409342:	2800      	cmp	r0, #0
  409344:	f040 8286 	bne.w	409854 <_dtoa_r+0xd0c>
  409348:	4650      	mov	r0, sl
  40934a:	f7fc fbe5 	bl	405b18 <__aeabi_i2d>
  40934e:	463a      	mov	r2, r7
  409350:	4643      	mov	r3, r8
  409352:	f7fc fc47 	bl	405be4 <__aeabi_dmul>
  409356:	4b99      	ldr	r3, [pc, #612]	; (4095bc <_dtoa_r+0xa74>)
  409358:	2200      	movs	r2, #0
  40935a:	f7fc fa91 	bl	405880 <__adddf3>
  40935e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409360:	4605      	mov	r5, r0
  409362:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  409366:	2b00      	cmp	r3, #0
  409368:	f000 813e 	beq.w	4095e8 <_dtoa_r+0xaa0>
  40936c:	9b02      	ldr	r3, [sp, #8]
  40936e:	9315      	str	r3, [sp, #84]	; 0x54
  409370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409372:	9312      	str	r3, [sp, #72]	; 0x48
  409374:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  409376:	2b00      	cmp	r3, #0
  409378:	f000 81fa 	beq.w	409770 <_dtoa_r+0xc28>
  40937c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40937e:	4b8c      	ldr	r3, [pc, #560]	; (4095b0 <_dtoa_r+0xa68>)
  409380:	498f      	ldr	r1, [pc, #572]	; (4095c0 <_dtoa_r+0xa78>)
  409382:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  409386:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40938a:	2000      	movs	r0, #0
  40938c:	f7fc fd54 	bl	405e38 <__aeabi_ddiv>
  409390:	462a      	mov	r2, r5
  409392:	4633      	mov	r3, r6
  409394:	f7fc fa72 	bl	40587c <__aeabi_dsub>
  409398:	4682      	mov	sl, r0
  40939a:	468b      	mov	fp, r1
  40939c:	4638      	mov	r0, r7
  40939e:	4641      	mov	r1, r8
  4093a0:	f002 f836 	bl	40b410 <__aeabi_d2iz>
  4093a4:	4605      	mov	r5, r0
  4093a6:	f7fc fbb7 	bl	405b18 <__aeabi_i2d>
  4093aa:	4602      	mov	r2, r0
  4093ac:	460b      	mov	r3, r1
  4093ae:	4638      	mov	r0, r7
  4093b0:	4641      	mov	r1, r8
  4093b2:	f7fc fa63 	bl	40587c <__aeabi_dsub>
  4093b6:	3530      	adds	r5, #48	; 0x30
  4093b8:	fa5f f885 	uxtb.w	r8, r5
  4093bc:	9d04      	ldr	r5, [sp, #16]
  4093be:	4606      	mov	r6, r0
  4093c0:	460f      	mov	r7, r1
  4093c2:	f885 8000 	strb.w	r8, [r5]
  4093c6:	4602      	mov	r2, r0
  4093c8:	460b      	mov	r3, r1
  4093ca:	4650      	mov	r0, sl
  4093cc:	4659      	mov	r1, fp
  4093ce:	3501      	adds	r5, #1
  4093d0:	f7fc fe98 	bl	406104 <__aeabi_dcmpgt>
  4093d4:	2800      	cmp	r0, #0
  4093d6:	d154      	bne.n	409482 <_dtoa_r+0x93a>
  4093d8:	4632      	mov	r2, r6
  4093da:	463b      	mov	r3, r7
  4093dc:	2000      	movs	r0, #0
  4093de:	4976      	ldr	r1, [pc, #472]	; (4095b8 <_dtoa_r+0xa70>)
  4093e0:	f7fc fa4c 	bl	40587c <__aeabi_dsub>
  4093e4:	4602      	mov	r2, r0
  4093e6:	460b      	mov	r3, r1
  4093e8:	4650      	mov	r0, sl
  4093ea:	4659      	mov	r1, fp
  4093ec:	f7fc fe8a 	bl	406104 <__aeabi_dcmpgt>
  4093f0:	2800      	cmp	r0, #0
  4093f2:	f040 8270 	bne.w	4098d6 <_dtoa_r+0xd8e>
  4093f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4093f8:	2a01      	cmp	r2, #1
  4093fa:	f000 8111 	beq.w	409620 <_dtoa_r+0xad8>
  4093fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409400:	9a04      	ldr	r2, [sp, #16]
  409402:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  409406:	4413      	add	r3, r2
  409408:	4699      	mov	r9, r3
  40940a:	e00d      	b.n	409428 <_dtoa_r+0x8e0>
  40940c:	2000      	movs	r0, #0
  40940e:	496a      	ldr	r1, [pc, #424]	; (4095b8 <_dtoa_r+0xa70>)
  409410:	f7fc fa34 	bl	40587c <__aeabi_dsub>
  409414:	4652      	mov	r2, sl
  409416:	465b      	mov	r3, fp
  409418:	f7fc fe56 	bl	4060c8 <__aeabi_dcmplt>
  40941c:	2800      	cmp	r0, #0
  40941e:	f040 8258 	bne.w	4098d2 <_dtoa_r+0xd8a>
  409422:	454d      	cmp	r5, r9
  409424:	f000 80fa 	beq.w	40961c <_dtoa_r+0xad4>
  409428:	4650      	mov	r0, sl
  40942a:	4659      	mov	r1, fp
  40942c:	2200      	movs	r2, #0
  40942e:	4b65      	ldr	r3, [pc, #404]	; (4095c4 <_dtoa_r+0xa7c>)
  409430:	f7fc fbd8 	bl	405be4 <__aeabi_dmul>
  409434:	2200      	movs	r2, #0
  409436:	4b63      	ldr	r3, [pc, #396]	; (4095c4 <_dtoa_r+0xa7c>)
  409438:	4682      	mov	sl, r0
  40943a:	468b      	mov	fp, r1
  40943c:	4630      	mov	r0, r6
  40943e:	4639      	mov	r1, r7
  409440:	f7fc fbd0 	bl	405be4 <__aeabi_dmul>
  409444:	460f      	mov	r7, r1
  409446:	4606      	mov	r6, r0
  409448:	f001 ffe2 	bl	40b410 <__aeabi_d2iz>
  40944c:	4680      	mov	r8, r0
  40944e:	f7fc fb63 	bl	405b18 <__aeabi_i2d>
  409452:	4602      	mov	r2, r0
  409454:	460b      	mov	r3, r1
  409456:	4630      	mov	r0, r6
  409458:	4639      	mov	r1, r7
  40945a:	f7fc fa0f 	bl	40587c <__aeabi_dsub>
  40945e:	f108 0830 	add.w	r8, r8, #48	; 0x30
  409462:	fa5f f888 	uxtb.w	r8, r8
  409466:	4652      	mov	r2, sl
  409468:	465b      	mov	r3, fp
  40946a:	f805 8b01 	strb.w	r8, [r5], #1
  40946e:	4606      	mov	r6, r0
  409470:	460f      	mov	r7, r1
  409472:	f7fc fe29 	bl	4060c8 <__aeabi_dcmplt>
  409476:	4632      	mov	r2, r6
  409478:	463b      	mov	r3, r7
  40947a:	2800      	cmp	r0, #0
  40947c:	d0c6      	beq.n	40940c <_dtoa_r+0x8c4>
  40947e:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  409482:	9b15      	ldr	r3, [sp, #84]	; 0x54
  409484:	9302      	str	r3, [sp, #8]
  409486:	e523      	b.n	408ed0 <_dtoa_r+0x388>
  409488:	2300      	movs	r3, #0
  40948a:	930b      	str	r3, [sp, #44]	; 0x2c
  40948c:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40948e:	2b00      	cmp	r3, #0
  409490:	f340 80dc 	ble.w	40964c <_dtoa_r+0xb04>
  409494:	461f      	mov	r7, r3
  409496:	461e      	mov	r6, r3
  409498:	930f      	str	r3, [sp, #60]	; 0x3c
  40949a:	930a      	str	r3, [sp, #40]	; 0x28
  40949c:	e6f6      	b.n	40928c <_dtoa_r+0x744>
  40949e:	2301      	movs	r3, #1
  4094a0:	930b      	str	r3, [sp, #44]	; 0x2c
  4094a2:	e7f3      	b.n	40948c <_dtoa_r+0x944>
  4094a4:	f1ba 0f00 	cmp.w	sl, #0
  4094a8:	f47f ada8 	bne.w	408ffc <_dtoa_r+0x4b4>
  4094ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
  4094b0:	2b00      	cmp	r3, #0
  4094b2:	f47f adba 	bne.w	40902a <_dtoa_r+0x4e2>
  4094b6:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  4094ba:	0d3f      	lsrs	r7, r7, #20
  4094bc:	053f      	lsls	r7, r7, #20
  4094be:	2f00      	cmp	r7, #0
  4094c0:	f000 820d 	beq.w	4098de <_dtoa_r+0xd96>
  4094c4:	9b08      	ldr	r3, [sp, #32]
  4094c6:	3301      	adds	r3, #1
  4094c8:	9308      	str	r3, [sp, #32]
  4094ca:	9b06      	ldr	r3, [sp, #24]
  4094cc:	3301      	adds	r3, #1
  4094ce:	9306      	str	r3, [sp, #24]
  4094d0:	2301      	movs	r3, #1
  4094d2:	930c      	str	r3, [sp, #48]	; 0x30
  4094d4:	e5ab      	b.n	40902e <_dtoa_r+0x4e6>
  4094d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4094d8:	2b00      	cmp	r3, #0
  4094da:	f73f ac42 	bgt.w	408d62 <_dtoa_r+0x21a>
  4094de:	f040 8221 	bne.w	409924 <_dtoa_r+0xddc>
  4094e2:	2200      	movs	r2, #0
  4094e4:	4b38      	ldr	r3, [pc, #224]	; (4095c8 <_dtoa_r+0xa80>)
  4094e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4094ea:	f7fc fb7b 	bl	405be4 <__aeabi_dmul>
  4094ee:	4652      	mov	r2, sl
  4094f0:	465b      	mov	r3, fp
  4094f2:	f7fc fdfd 	bl	4060f0 <__aeabi_dcmpge>
  4094f6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  4094fa:	4646      	mov	r6, r8
  4094fc:	2800      	cmp	r0, #0
  4094fe:	d041      	beq.n	409584 <_dtoa_r+0xa3c>
  409500:	9b25      	ldr	r3, [sp, #148]	; 0x94
  409502:	9d04      	ldr	r5, [sp, #16]
  409504:	43db      	mvns	r3, r3
  409506:	9302      	str	r3, [sp, #8]
  409508:	4641      	mov	r1, r8
  40950a:	4620      	mov	r0, r4
  40950c:	f000 ffd2 	bl	40a4b4 <_Bfree>
  409510:	2e00      	cmp	r6, #0
  409512:	f43f acdd 	beq.w	408ed0 <_dtoa_r+0x388>
  409516:	e6a7      	b.n	409268 <_dtoa_r+0x720>
  409518:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40951a:	4649      	mov	r1, r9
  40951c:	4620      	mov	r0, r4
  40951e:	f001 f8ff 	bl	40a720 <__pow5mult>
  409522:	4681      	mov	r9, r0
  409524:	e558      	b.n	408fd8 <_dtoa_r+0x490>
  409526:	9a14      	ldr	r2, [sp, #80]	; 0x50
  409528:	2a00      	cmp	r2, #0
  40952a:	f000 8187 	beq.w	40983c <_dtoa_r+0xcf4>
  40952e:	f203 4333 	addw	r3, r3, #1075	; 0x433
  409532:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  409534:	9d08      	ldr	r5, [sp, #32]
  409536:	e4f2      	b.n	408f1e <_dtoa_r+0x3d6>
  409538:	f1ba 0f00 	cmp.w	sl, #0
  40953c:	f47f ad75 	bne.w	40902a <_dtoa_r+0x4e2>
  409540:	e7b4      	b.n	4094ac <_dtoa_r+0x964>
  409542:	f000 ffc1 	bl	40a4c8 <__multadd>
  409546:	4647      	mov	r7, r8
  409548:	4606      	mov	r6, r0
  40954a:	4683      	mov	fp, r0
  40954c:	e5be      	b.n	4090cc <_dtoa_r+0x584>
  40954e:	4601      	mov	r1, r0
  409550:	4620      	mov	r0, r4
  409552:	9306      	str	r3, [sp, #24]
  409554:	f000 ffae 	bl	40a4b4 <_Bfree>
  409558:	2201      	movs	r2, #1
  40955a:	9b06      	ldr	r3, [sp, #24]
  40955c:	e5e0      	b.n	409120 <_dtoa_r+0x5d8>
  40955e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409560:	2b02      	cmp	r3, #2
  409562:	f77f ad96 	ble.w	409092 <_dtoa_r+0x54a>
  409566:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409568:	2b00      	cmp	r3, #0
  40956a:	d1c9      	bne.n	409500 <_dtoa_r+0x9b8>
  40956c:	4641      	mov	r1, r8
  40956e:	2205      	movs	r2, #5
  409570:	4620      	mov	r0, r4
  409572:	f000 ffa9 	bl	40a4c8 <__multadd>
  409576:	4601      	mov	r1, r0
  409578:	4680      	mov	r8, r0
  40957a:	4648      	mov	r0, r9
  40957c:	f001 f972 	bl	40a864 <__mcmp>
  409580:	2800      	cmp	r0, #0
  409582:	ddbd      	ble.n	409500 <_dtoa_r+0x9b8>
  409584:	9a02      	ldr	r2, [sp, #8]
  409586:	9904      	ldr	r1, [sp, #16]
  409588:	2331      	movs	r3, #49	; 0x31
  40958a:	3201      	adds	r2, #1
  40958c:	9202      	str	r2, [sp, #8]
  40958e:	700b      	strb	r3, [r1, #0]
  409590:	1c4d      	adds	r5, r1, #1
  409592:	e7b9      	b.n	409508 <_dtoa_r+0x9c0>
  409594:	9a02      	ldr	r2, [sp, #8]
  409596:	3201      	adds	r2, #1
  409598:	9202      	str	r2, [sp, #8]
  40959a:	9a04      	ldr	r2, [sp, #16]
  40959c:	2331      	movs	r3, #49	; 0x31
  40959e:	7013      	strb	r3, [r2, #0]
  4095a0:	e652      	b.n	409248 <_dtoa_r+0x700>
  4095a2:	2301      	movs	r3, #1
  4095a4:	930b      	str	r3, [sp, #44]	; 0x2c
  4095a6:	e666      	b.n	409276 <_dtoa_r+0x72e>
  4095a8:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  4095ac:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4095ae:	e48f      	b.n	408ed0 <_dtoa_r+0x388>
  4095b0:	0040bde0 	.word	0x0040bde0
  4095b4:	0040bdb8 	.word	0x0040bdb8
  4095b8:	3ff00000 	.word	0x3ff00000
  4095bc:	401c0000 	.word	0x401c0000
  4095c0:	3fe00000 	.word	0x3fe00000
  4095c4:	40240000 	.word	0x40240000
  4095c8:	40140000 	.word	0x40140000
  4095cc:	4650      	mov	r0, sl
  4095ce:	f7fc faa3 	bl	405b18 <__aeabi_i2d>
  4095d2:	463a      	mov	r2, r7
  4095d4:	4643      	mov	r3, r8
  4095d6:	f7fc fb05 	bl	405be4 <__aeabi_dmul>
  4095da:	2200      	movs	r2, #0
  4095dc:	4bc1      	ldr	r3, [pc, #772]	; (4098e4 <_dtoa_r+0xd9c>)
  4095de:	f7fc f94f 	bl	405880 <__adddf3>
  4095e2:	4605      	mov	r5, r0
  4095e4:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4095e8:	4641      	mov	r1, r8
  4095ea:	2200      	movs	r2, #0
  4095ec:	4bbe      	ldr	r3, [pc, #760]	; (4098e8 <_dtoa_r+0xda0>)
  4095ee:	4638      	mov	r0, r7
  4095f0:	f7fc f944 	bl	40587c <__aeabi_dsub>
  4095f4:	462a      	mov	r2, r5
  4095f6:	4633      	mov	r3, r6
  4095f8:	4682      	mov	sl, r0
  4095fa:	468b      	mov	fp, r1
  4095fc:	f7fc fd82 	bl	406104 <__aeabi_dcmpgt>
  409600:	4680      	mov	r8, r0
  409602:	2800      	cmp	r0, #0
  409604:	f040 8110 	bne.w	409828 <_dtoa_r+0xce0>
  409608:	462a      	mov	r2, r5
  40960a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  40960e:	4650      	mov	r0, sl
  409610:	4659      	mov	r1, fp
  409612:	f7fc fd59 	bl	4060c8 <__aeabi_dcmplt>
  409616:	b118      	cbz	r0, 409620 <_dtoa_r+0xad8>
  409618:	4646      	mov	r6, r8
  40961a:	e771      	b.n	409500 <_dtoa_r+0x9b8>
  40961c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  409620:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  409624:	f7ff bb8a 	b.w	408d3c <_dtoa_r+0x1f4>
  409628:	9804      	ldr	r0, [sp, #16]
  40962a:	f7ff babb 	b.w	408ba4 <_dtoa_r+0x5c>
  40962e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  409630:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  409632:	970c      	str	r7, [sp, #48]	; 0x30
  409634:	1afb      	subs	r3, r7, r3
  409636:	441a      	add	r2, r3
  409638:	920d      	str	r2, [sp, #52]	; 0x34
  40963a:	2700      	movs	r7, #0
  40963c:	e469      	b.n	408f12 <_dtoa_r+0x3ca>
  40963e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  409642:	f04f 0a02 	mov.w	sl, #2
  409646:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  40964a:	e657      	b.n	4092fc <_dtoa_r+0x7b4>
  40964c:	2100      	movs	r1, #0
  40964e:	2301      	movs	r3, #1
  409650:	6461      	str	r1, [r4, #68]	; 0x44
  409652:	4620      	mov	r0, r4
  409654:	9325      	str	r3, [sp, #148]	; 0x94
  409656:	f000 ff07 	bl	40a468 <_Balloc>
  40965a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40965c:	9004      	str	r0, [sp, #16]
  40965e:	6420      	str	r0, [r4, #64]	; 0x40
  409660:	930a      	str	r3, [sp, #40]	; 0x28
  409662:	930f      	str	r3, [sp, #60]	; 0x3c
  409664:	e629      	b.n	4092ba <_dtoa_r+0x772>
  409666:	2a00      	cmp	r2, #0
  409668:	46d0      	mov	r8, sl
  40966a:	f8cd b018 	str.w	fp, [sp, #24]
  40966e:	469a      	mov	sl, r3
  409670:	dd11      	ble.n	409696 <_dtoa_r+0xb4e>
  409672:	4649      	mov	r1, r9
  409674:	2201      	movs	r2, #1
  409676:	4620      	mov	r0, r4
  409678:	f001 f8a2 	bl	40a7c0 <__lshift>
  40967c:	4641      	mov	r1, r8
  40967e:	4681      	mov	r9, r0
  409680:	f001 f8f0 	bl	40a864 <__mcmp>
  409684:	2800      	cmp	r0, #0
  409686:	f340 8146 	ble.w	409916 <_dtoa_r+0xdce>
  40968a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40968e:	f000 8106 	beq.w	40989e <_dtoa_r+0xd56>
  409692:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  409696:	46b3      	mov	fp, r6
  409698:	f887 a000 	strb.w	sl, [r7]
  40969c:	1c7d      	adds	r5, r7, #1
  40969e:	9e06      	ldr	r6, [sp, #24]
  4096a0:	e5d2      	b.n	409248 <_dtoa_r+0x700>
  4096a2:	d104      	bne.n	4096ae <_dtoa_r+0xb66>
  4096a4:	f01a 0f01 	tst.w	sl, #1
  4096a8:	d001      	beq.n	4096ae <_dtoa_r+0xb66>
  4096aa:	e5bd      	b.n	409228 <_dtoa_r+0x6e0>
  4096ac:	4615      	mov	r5, r2
  4096ae:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4096b2:	2b30      	cmp	r3, #48	; 0x30
  4096b4:	f105 32ff 	add.w	r2, r5, #4294967295
  4096b8:	d0f8      	beq.n	4096ac <_dtoa_r+0xb64>
  4096ba:	e5c5      	b.n	409248 <_dtoa_r+0x700>
  4096bc:	9904      	ldr	r1, [sp, #16]
  4096be:	2230      	movs	r2, #48	; 0x30
  4096c0:	700a      	strb	r2, [r1, #0]
  4096c2:	9a02      	ldr	r2, [sp, #8]
  4096c4:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4096c8:	3201      	adds	r2, #1
  4096ca:	9202      	str	r2, [sp, #8]
  4096cc:	f7ff bbfc 	b.w	408ec8 <_dtoa_r+0x380>
  4096d0:	f000 80bb 	beq.w	40984a <_dtoa_r+0xd02>
  4096d4:	9b02      	ldr	r3, [sp, #8]
  4096d6:	425d      	negs	r5, r3
  4096d8:	4b84      	ldr	r3, [pc, #528]	; (4098ec <_dtoa_r+0xda4>)
  4096da:	f005 020f 	and.w	r2, r5, #15
  4096de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4096e2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4096e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  4096ea:	f7fc fa7b 	bl	405be4 <__aeabi_dmul>
  4096ee:	112d      	asrs	r5, r5, #4
  4096f0:	4607      	mov	r7, r0
  4096f2:	4688      	mov	r8, r1
  4096f4:	f000 812c 	beq.w	409950 <_dtoa_r+0xe08>
  4096f8:	4e7d      	ldr	r6, [pc, #500]	; (4098f0 <_dtoa_r+0xda8>)
  4096fa:	f04f 0a02 	mov.w	sl, #2
  4096fe:	07eb      	lsls	r3, r5, #31
  409700:	d509      	bpl.n	409716 <_dtoa_r+0xbce>
  409702:	4638      	mov	r0, r7
  409704:	4641      	mov	r1, r8
  409706:	e9d6 2300 	ldrd	r2, r3, [r6]
  40970a:	f7fc fa6b 	bl	405be4 <__aeabi_dmul>
  40970e:	f10a 0a01 	add.w	sl, sl, #1
  409712:	4607      	mov	r7, r0
  409714:	4688      	mov	r8, r1
  409716:	106d      	asrs	r5, r5, #1
  409718:	f106 0608 	add.w	r6, r6, #8
  40971c:	d1ef      	bne.n	4096fe <_dtoa_r+0xbb6>
  40971e:	e608      	b.n	409332 <_dtoa_r+0x7ea>
  409720:	6871      	ldr	r1, [r6, #4]
  409722:	4620      	mov	r0, r4
  409724:	f000 fea0 	bl	40a468 <_Balloc>
  409728:	6933      	ldr	r3, [r6, #16]
  40972a:	3302      	adds	r3, #2
  40972c:	009a      	lsls	r2, r3, #2
  40972e:	4605      	mov	r5, r0
  409730:	f106 010c 	add.w	r1, r6, #12
  409734:	300c      	adds	r0, #12
  409736:	f7fd fb53 	bl	406de0 <memcpy>
  40973a:	4629      	mov	r1, r5
  40973c:	2201      	movs	r2, #1
  40973e:	4620      	mov	r0, r4
  409740:	f001 f83e 	bl	40a7c0 <__lshift>
  409744:	9006      	str	r0, [sp, #24]
  409746:	e4b5      	b.n	4090b4 <_dtoa_r+0x56c>
  409748:	2b39      	cmp	r3, #57	; 0x39
  40974a:	f8cd b018 	str.w	fp, [sp, #24]
  40974e:	46d0      	mov	r8, sl
  409750:	f000 80a5 	beq.w	40989e <_dtoa_r+0xd56>
  409754:	f103 0a01 	add.w	sl, r3, #1
  409758:	46b3      	mov	fp, r6
  40975a:	f887 a000 	strb.w	sl, [r7]
  40975e:	1c7d      	adds	r5, r7, #1
  409760:	9e06      	ldr	r6, [sp, #24]
  409762:	e571      	b.n	409248 <_dtoa_r+0x700>
  409764:	465a      	mov	r2, fp
  409766:	46d0      	mov	r8, sl
  409768:	46b3      	mov	fp, r6
  40976a:	469a      	mov	sl, r3
  40976c:	4616      	mov	r6, r2
  40976e:	e54f      	b.n	409210 <_dtoa_r+0x6c8>
  409770:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409772:	495e      	ldr	r1, [pc, #376]	; (4098ec <_dtoa_r+0xda4>)
  409774:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  409778:	462a      	mov	r2, r5
  40977a:	4633      	mov	r3, r6
  40977c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  409780:	f7fc fa30 	bl	405be4 <__aeabi_dmul>
  409784:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  409788:	4638      	mov	r0, r7
  40978a:	4641      	mov	r1, r8
  40978c:	f001 fe40 	bl	40b410 <__aeabi_d2iz>
  409790:	4605      	mov	r5, r0
  409792:	f7fc f9c1 	bl	405b18 <__aeabi_i2d>
  409796:	460b      	mov	r3, r1
  409798:	4602      	mov	r2, r0
  40979a:	4641      	mov	r1, r8
  40979c:	4638      	mov	r0, r7
  40979e:	f7fc f86d 	bl	40587c <__aeabi_dsub>
  4097a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4097a4:	460f      	mov	r7, r1
  4097a6:	9904      	ldr	r1, [sp, #16]
  4097a8:	3530      	adds	r5, #48	; 0x30
  4097aa:	2b01      	cmp	r3, #1
  4097ac:	700d      	strb	r5, [r1, #0]
  4097ae:	4606      	mov	r6, r0
  4097b0:	f101 0501 	add.w	r5, r1, #1
  4097b4:	d026      	beq.n	409804 <_dtoa_r+0xcbc>
  4097b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4097b8:	9a04      	ldr	r2, [sp, #16]
  4097ba:	f8df b13c 	ldr.w	fp, [pc, #316]	; 4098f8 <_dtoa_r+0xdb0>
  4097be:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  4097c2:	4413      	add	r3, r2
  4097c4:	f04f 0a00 	mov.w	sl, #0
  4097c8:	4699      	mov	r9, r3
  4097ca:	4652      	mov	r2, sl
  4097cc:	465b      	mov	r3, fp
  4097ce:	4630      	mov	r0, r6
  4097d0:	4639      	mov	r1, r7
  4097d2:	f7fc fa07 	bl	405be4 <__aeabi_dmul>
  4097d6:	460f      	mov	r7, r1
  4097d8:	4606      	mov	r6, r0
  4097da:	f001 fe19 	bl	40b410 <__aeabi_d2iz>
  4097de:	4680      	mov	r8, r0
  4097e0:	f7fc f99a 	bl	405b18 <__aeabi_i2d>
  4097e4:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4097e8:	4602      	mov	r2, r0
  4097ea:	460b      	mov	r3, r1
  4097ec:	4630      	mov	r0, r6
  4097ee:	4639      	mov	r1, r7
  4097f0:	f7fc f844 	bl	40587c <__aeabi_dsub>
  4097f4:	f805 8b01 	strb.w	r8, [r5], #1
  4097f8:	454d      	cmp	r5, r9
  4097fa:	4606      	mov	r6, r0
  4097fc:	460f      	mov	r7, r1
  4097fe:	d1e4      	bne.n	4097ca <_dtoa_r+0xc82>
  409800:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  409804:	4b3b      	ldr	r3, [pc, #236]	; (4098f4 <_dtoa_r+0xdac>)
  409806:	2200      	movs	r2, #0
  409808:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40980c:	f7fc f838 	bl	405880 <__adddf3>
  409810:	4632      	mov	r2, r6
  409812:	463b      	mov	r3, r7
  409814:	f7fc fc58 	bl	4060c8 <__aeabi_dcmplt>
  409818:	2800      	cmp	r0, #0
  40981a:	d046      	beq.n	4098aa <_dtoa_r+0xd62>
  40981c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40981e:	9302      	str	r3, [sp, #8]
  409820:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  409824:	f7ff bb43 	b.w	408eae <_dtoa_r+0x366>
  409828:	f04f 0800 	mov.w	r8, #0
  40982c:	4646      	mov	r6, r8
  40982e:	e6a9      	b.n	409584 <_dtoa_r+0xa3c>
  409830:	9b08      	ldr	r3, [sp, #32]
  409832:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  409834:	1a9d      	subs	r5, r3, r2
  409836:	2300      	movs	r3, #0
  409838:	f7ff bb71 	b.w	408f1e <_dtoa_r+0x3d6>
  40983c:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40983e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  409840:	9d08      	ldr	r5, [sp, #32]
  409842:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  409846:	f7ff bb6a 	b.w	408f1e <_dtoa_r+0x3d6>
  40984a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  40984e:	f04f 0a02 	mov.w	sl, #2
  409852:	e56e      	b.n	409332 <_dtoa_r+0x7ea>
  409854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409856:	2b00      	cmp	r3, #0
  409858:	f43f aeb8 	beq.w	4095cc <_dtoa_r+0xa84>
  40985c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40985e:	2b00      	cmp	r3, #0
  409860:	f77f aede 	ble.w	409620 <_dtoa_r+0xad8>
  409864:	2200      	movs	r2, #0
  409866:	4b24      	ldr	r3, [pc, #144]	; (4098f8 <_dtoa_r+0xdb0>)
  409868:	4638      	mov	r0, r7
  40986a:	4641      	mov	r1, r8
  40986c:	f7fc f9ba 	bl	405be4 <__aeabi_dmul>
  409870:	4607      	mov	r7, r0
  409872:	4688      	mov	r8, r1
  409874:	f10a 0001 	add.w	r0, sl, #1
  409878:	f7fc f94e 	bl	405b18 <__aeabi_i2d>
  40987c:	463a      	mov	r2, r7
  40987e:	4643      	mov	r3, r8
  409880:	f7fc f9b0 	bl	405be4 <__aeabi_dmul>
  409884:	2200      	movs	r2, #0
  409886:	4b17      	ldr	r3, [pc, #92]	; (4098e4 <_dtoa_r+0xd9c>)
  409888:	f7fb fffa 	bl	405880 <__adddf3>
  40988c:	9a02      	ldr	r2, [sp, #8]
  40988e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409890:	9312      	str	r3, [sp, #72]	; 0x48
  409892:	3a01      	subs	r2, #1
  409894:	4605      	mov	r5, r0
  409896:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40989a:	9215      	str	r2, [sp, #84]	; 0x54
  40989c:	e56a      	b.n	409374 <_dtoa_r+0x82c>
  40989e:	2239      	movs	r2, #57	; 0x39
  4098a0:	46b3      	mov	fp, r6
  4098a2:	703a      	strb	r2, [r7, #0]
  4098a4:	9e06      	ldr	r6, [sp, #24]
  4098a6:	1c7d      	adds	r5, r7, #1
  4098a8:	e4c0      	b.n	40922c <_dtoa_r+0x6e4>
  4098aa:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  4098ae:	2000      	movs	r0, #0
  4098b0:	4910      	ldr	r1, [pc, #64]	; (4098f4 <_dtoa_r+0xdac>)
  4098b2:	f7fb ffe3 	bl	40587c <__aeabi_dsub>
  4098b6:	4632      	mov	r2, r6
  4098b8:	463b      	mov	r3, r7
  4098ba:	f7fc fc23 	bl	406104 <__aeabi_dcmpgt>
  4098be:	b908      	cbnz	r0, 4098c4 <_dtoa_r+0xd7c>
  4098c0:	e6ae      	b.n	409620 <_dtoa_r+0xad8>
  4098c2:	4615      	mov	r5, r2
  4098c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4098c8:	2b30      	cmp	r3, #48	; 0x30
  4098ca:	f105 32ff 	add.w	r2, r5, #4294967295
  4098ce:	d0f8      	beq.n	4098c2 <_dtoa_r+0xd7a>
  4098d0:	e5d7      	b.n	409482 <_dtoa_r+0x93a>
  4098d2:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4098d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4098d8:	9302      	str	r3, [sp, #8]
  4098da:	f7ff bae8 	b.w	408eae <_dtoa_r+0x366>
  4098de:	970c      	str	r7, [sp, #48]	; 0x30
  4098e0:	f7ff bba5 	b.w	40902e <_dtoa_r+0x4e6>
  4098e4:	401c0000 	.word	0x401c0000
  4098e8:	40140000 	.word	0x40140000
  4098ec:	0040bde0 	.word	0x0040bde0
  4098f0:	0040bdb8 	.word	0x0040bdb8
  4098f4:	3fe00000 	.word	0x3fe00000
  4098f8:	40240000 	.word	0x40240000
  4098fc:	2b39      	cmp	r3, #57	; 0x39
  4098fe:	f8cd b018 	str.w	fp, [sp, #24]
  409902:	46d0      	mov	r8, sl
  409904:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  409908:	469a      	mov	sl, r3
  40990a:	d0c8      	beq.n	40989e <_dtoa_r+0xd56>
  40990c:	f1bb 0f00 	cmp.w	fp, #0
  409910:	f73f aebf 	bgt.w	409692 <_dtoa_r+0xb4a>
  409914:	e6bf      	b.n	409696 <_dtoa_r+0xb4e>
  409916:	f47f aebe 	bne.w	409696 <_dtoa_r+0xb4e>
  40991a:	f01a 0f01 	tst.w	sl, #1
  40991e:	f43f aeba 	beq.w	409696 <_dtoa_r+0xb4e>
  409922:	e6b2      	b.n	40968a <_dtoa_r+0xb42>
  409924:	f04f 0800 	mov.w	r8, #0
  409928:	4646      	mov	r6, r8
  40992a:	e5e9      	b.n	409500 <_dtoa_r+0x9b8>
  40992c:	4631      	mov	r1, r6
  40992e:	2300      	movs	r3, #0
  409930:	220a      	movs	r2, #10
  409932:	4620      	mov	r0, r4
  409934:	f000 fdc8 	bl	40a4c8 <__multadd>
  409938:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40993a:	2b00      	cmp	r3, #0
  40993c:	4606      	mov	r6, r0
  40993e:	dd0a      	ble.n	409956 <_dtoa_r+0xe0e>
  409940:	930a      	str	r3, [sp, #40]	; 0x28
  409942:	f7ff bbaa 	b.w	40909a <_dtoa_r+0x552>
  409946:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409948:	2b02      	cmp	r3, #2
  40994a:	dc23      	bgt.n	409994 <_dtoa_r+0xe4c>
  40994c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40994e:	e43b      	b.n	4091c8 <_dtoa_r+0x680>
  409950:	f04f 0a02 	mov.w	sl, #2
  409954:	e4ed      	b.n	409332 <_dtoa_r+0x7ea>
  409956:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409958:	2b02      	cmp	r3, #2
  40995a:	dc1b      	bgt.n	409994 <_dtoa_r+0xe4c>
  40995c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40995e:	e7ef      	b.n	409940 <_dtoa_r+0xdf8>
  409960:	2500      	movs	r5, #0
  409962:	6465      	str	r5, [r4, #68]	; 0x44
  409964:	4629      	mov	r1, r5
  409966:	4620      	mov	r0, r4
  409968:	f000 fd7e 	bl	40a468 <_Balloc>
  40996c:	f04f 33ff 	mov.w	r3, #4294967295
  409970:	930a      	str	r3, [sp, #40]	; 0x28
  409972:	930f      	str	r3, [sp, #60]	; 0x3c
  409974:	2301      	movs	r3, #1
  409976:	9004      	str	r0, [sp, #16]
  409978:	9525      	str	r5, [sp, #148]	; 0x94
  40997a:	6420      	str	r0, [r4, #64]	; 0x40
  40997c:	930b      	str	r3, [sp, #44]	; 0x2c
  40997e:	f7ff b9dd 	b.w	408d3c <_dtoa_r+0x1f4>
  409982:	2501      	movs	r5, #1
  409984:	f7ff b9a5 	b.w	408cd2 <_dtoa_r+0x18a>
  409988:	f43f ab69 	beq.w	40905e <_dtoa_r+0x516>
  40998c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  409990:	f7ff bbf9 	b.w	409186 <_dtoa_r+0x63e>
  409994:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409996:	930a      	str	r3, [sp, #40]	; 0x28
  409998:	e5e5      	b.n	409566 <_dtoa_r+0xa1e>
  40999a:	bf00      	nop

0040999c <__sflush_r>:
  40999c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4099a0:	b29a      	uxth	r2, r3
  4099a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4099a6:	460d      	mov	r5, r1
  4099a8:	0711      	lsls	r1, r2, #28
  4099aa:	4680      	mov	r8, r0
  4099ac:	d43a      	bmi.n	409a24 <__sflush_r+0x88>
  4099ae:	686a      	ldr	r2, [r5, #4]
  4099b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4099b4:	2a00      	cmp	r2, #0
  4099b6:	81ab      	strh	r3, [r5, #12]
  4099b8:	dd6f      	ble.n	409a9a <__sflush_r+0xfe>
  4099ba:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4099bc:	2c00      	cmp	r4, #0
  4099be:	d049      	beq.n	409a54 <__sflush_r+0xb8>
  4099c0:	2200      	movs	r2, #0
  4099c2:	b29b      	uxth	r3, r3
  4099c4:	f8d8 6000 	ldr.w	r6, [r8]
  4099c8:	f8c8 2000 	str.w	r2, [r8]
  4099cc:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  4099d0:	d067      	beq.n	409aa2 <__sflush_r+0x106>
  4099d2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4099d4:	075f      	lsls	r7, r3, #29
  4099d6:	d505      	bpl.n	4099e4 <__sflush_r+0x48>
  4099d8:	6869      	ldr	r1, [r5, #4]
  4099da:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4099dc:	1a52      	subs	r2, r2, r1
  4099de:	b10b      	cbz	r3, 4099e4 <__sflush_r+0x48>
  4099e0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4099e2:	1ad2      	subs	r2, r2, r3
  4099e4:	2300      	movs	r3, #0
  4099e6:	69e9      	ldr	r1, [r5, #28]
  4099e8:	4640      	mov	r0, r8
  4099ea:	47a0      	blx	r4
  4099ec:	1c44      	adds	r4, r0, #1
  4099ee:	d03c      	beq.n	409a6a <__sflush_r+0xce>
  4099f0:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4099f4:	692a      	ldr	r2, [r5, #16]
  4099f6:	602a      	str	r2, [r5, #0]
  4099f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4099fc:	2200      	movs	r2, #0
  4099fe:	81ab      	strh	r3, [r5, #12]
  409a00:	04db      	lsls	r3, r3, #19
  409a02:	606a      	str	r2, [r5, #4]
  409a04:	d447      	bmi.n	409a96 <__sflush_r+0xfa>
  409a06:	6b29      	ldr	r1, [r5, #48]	; 0x30
  409a08:	f8c8 6000 	str.w	r6, [r8]
  409a0c:	b311      	cbz	r1, 409a54 <__sflush_r+0xb8>
  409a0e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  409a12:	4299      	cmp	r1, r3
  409a14:	d002      	beq.n	409a1c <__sflush_r+0x80>
  409a16:	4640      	mov	r0, r8
  409a18:	f000 f95a 	bl	409cd0 <_free_r>
  409a1c:	2000      	movs	r0, #0
  409a1e:	6328      	str	r0, [r5, #48]	; 0x30
  409a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409a24:	692e      	ldr	r6, [r5, #16]
  409a26:	b1ae      	cbz	r6, 409a54 <__sflush_r+0xb8>
  409a28:	682c      	ldr	r4, [r5, #0]
  409a2a:	602e      	str	r6, [r5, #0]
  409a2c:	0791      	lsls	r1, r2, #30
  409a2e:	bf0c      	ite	eq
  409a30:	696b      	ldreq	r3, [r5, #20]
  409a32:	2300      	movne	r3, #0
  409a34:	1ba4      	subs	r4, r4, r6
  409a36:	60ab      	str	r3, [r5, #8]
  409a38:	e00a      	b.n	409a50 <__sflush_r+0xb4>
  409a3a:	4623      	mov	r3, r4
  409a3c:	4632      	mov	r2, r6
  409a3e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  409a40:	69e9      	ldr	r1, [r5, #28]
  409a42:	4640      	mov	r0, r8
  409a44:	47b8      	blx	r7
  409a46:	2800      	cmp	r0, #0
  409a48:	eba4 0400 	sub.w	r4, r4, r0
  409a4c:	4406      	add	r6, r0
  409a4e:	dd04      	ble.n	409a5a <__sflush_r+0xbe>
  409a50:	2c00      	cmp	r4, #0
  409a52:	dcf2      	bgt.n	409a3a <__sflush_r+0x9e>
  409a54:	2000      	movs	r0, #0
  409a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409a5a:	89ab      	ldrh	r3, [r5, #12]
  409a5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409a60:	81ab      	strh	r3, [r5, #12]
  409a62:	f04f 30ff 	mov.w	r0, #4294967295
  409a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409a6a:	f8d8 4000 	ldr.w	r4, [r8]
  409a6e:	2c1d      	cmp	r4, #29
  409a70:	d8f3      	bhi.n	409a5a <__sflush_r+0xbe>
  409a72:	4b19      	ldr	r3, [pc, #100]	; (409ad8 <__sflush_r+0x13c>)
  409a74:	40e3      	lsrs	r3, r4
  409a76:	43db      	mvns	r3, r3
  409a78:	f013 0301 	ands.w	r3, r3, #1
  409a7c:	d1ed      	bne.n	409a5a <__sflush_r+0xbe>
  409a7e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  409a82:	606b      	str	r3, [r5, #4]
  409a84:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  409a88:	6929      	ldr	r1, [r5, #16]
  409a8a:	81ab      	strh	r3, [r5, #12]
  409a8c:	04da      	lsls	r2, r3, #19
  409a8e:	6029      	str	r1, [r5, #0]
  409a90:	d5b9      	bpl.n	409a06 <__sflush_r+0x6a>
  409a92:	2c00      	cmp	r4, #0
  409a94:	d1b7      	bne.n	409a06 <__sflush_r+0x6a>
  409a96:	6528      	str	r0, [r5, #80]	; 0x50
  409a98:	e7b5      	b.n	409a06 <__sflush_r+0x6a>
  409a9a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  409a9c:	2a00      	cmp	r2, #0
  409a9e:	dc8c      	bgt.n	4099ba <__sflush_r+0x1e>
  409aa0:	e7d8      	b.n	409a54 <__sflush_r+0xb8>
  409aa2:	2301      	movs	r3, #1
  409aa4:	69e9      	ldr	r1, [r5, #28]
  409aa6:	4640      	mov	r0, r8
  409aa8:	47a0      	blx	r4
  409aaa:	1c43      	adds	r3, r0, #1
  409aac:	4602      	mov	r2, r0
  409aae:	d002      	beq.n	409ab6 <__sflush_r+0x11a>
  409ab0:	89ab      	ldrh	r3, [r5, #12]
  409ab2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  409ab4:	e78e      	b.n	4099d4 <__sflush_r+0x38>
  409ab6:	f8d8 3000 	ldr.w	r3, [r8]
  409aba:	2b00      	cmp	r3, #0
  409abc:	d0f8      	beq.n	409ab0 <__sflush_r+0x114>
  409abe:	2b1d      	cmp	r3, #29
  409ac0:	d001      	beq.n	409ac6 <__sflush_r+0x12a>
  409ac2:	2b16      	cmp	r3, #22
  409ac4:	d102      	bne.n	409acc <__sflush_r+0x130>
  409ac6:	f8c8 6000 	str.w	r6, [r8]
  409aca:	e7c3      	b.n	409a54 <__sflush_r+0xb8>
  409acc:	89ab      	ldrh	r3, [r5, #12]
  409ace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409ad2:	81ab      	strh	r3, [r5, #12]
  409ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409ad8:	20400001 	.word	0x20400001

00409adc <_fflush_r>:
  409adc:	b538      	push	{r3, r4, r5, lr}
  409ade:	460d      	mov	r5, r1
  409ae0:	4604      	mov	r4, r0
  409ae2:	b108      	cbz	r0, 409ae8 <_fflush_r+0xc>
  409ae4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  409ae6:	b1bb      	cbz	r3, 409b18 <_fflush_r+0x3c>
  409ae8:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  409aec:	b188      	cbz	r0, 409b12 <_fflush_r+0x36>
  409aee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  409af0:	07db      	lsls	r3, r3, #31
  409af2:	d401      	bmi.n	409af8 <_fflush_r+0x1c>
  409af4:	0581      	lsls	r1, r0, #22
  409af6:	d517      	bpl.n	409b28 <_fflush_r+0x4c>
  409af8:	4620      	mov	r0, r4
  409afa:	4629      	mov	r1, r5
  409afc:	f7ff ff4e 	bl	40999c <__sflush_r>
  409b00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  409b02:	07da      	lsls	r2, r3, #31
  409b04:	4604      	mov	r4, r0
  409b06:	d402      	bmi.n	409b0e <_fflush_r+0x32>
  409b08:	89ab      	ldrh	r3, [r5, #12]
  409b0a:	059b      	lsls	r3, r3, #22
  409b0c:	d507      	bpl.n	409b1e <_fflush_r+0x42>
  409b0e:	4620      	mov	r0, r4
  409b10:	bd38      	pop	{r3, r4, r5, pc}
  409b12:	4604      	mov	r4, r0
  409b14:	4620      	mov	r0, r4
  409b16:	bd38      	pop	{r3, r4, r5, pc}
  409b18:	f000 f838 	bl	409b8c <__sinit>
  409b1c:	e7e4      	b.n	409ae8 <_fflush_r+0xc>
  409b1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
  409b20:	f000 fb72 	bl	40a208 <__retarget_lock_release_recursive>
  409b24:	4620      	mov	r0, r4
  409b26:	bd38      	pop	{r3, r4, r5, pc}
  409b28:	6da8      	ldr	r0, [r5, #88]	; 0x58
  409b2a:	f000 fb6b 	bl	40a204 <__retarget_lock_acquire_recursive>
  409b2e:	e7e3      	b.n	409af8 <_fflush_r+0x1c>

00409b30 <_cleanup_r>:
  409b30:	4901      	ldr	r1, [pc, #4]	; (409b38 <_cleanup_r+0x8>)
  409b32:	f000 bb2b 	b.w	40a18c <_fwalk_reent>
  409b36:	bf00      	nop
  409b38:	0040b039 	.word	0x0040b039

00409b3c <std.isra.0>:
  409b3c:	b510      	push	{r4, lr}
  409b3e:	2300      	movs	r3, #0
  409b40:	4604      	mov	r4, r0
  409b42:	8181      	strh	r1, [r0, #12]
  409b44:	81c2      	strh	r2, [r0, #14]
  409b46:	6003      	str	r3, [r0, #0]
  409b48:	6043      	str	r3, [r0, #4]
  409b4a:	6083      	str	r3, [r0, #8]
  409b4c:	6643      	str	r3, [r0, #100]	; 0x64
  409b4e:	6103      	str	r3, [r0, #16]
  409b50:	6143      	str	r3, [r0, #20]
  409b52:	6183      	str	r3, [r0, #24]
  409b54:	4619      	mov	r1, r3
  409b56:	2208      	movs	r2, #8
  409b58:	305c      	adds	r0, #92	; 0x5c
  409b5a:	f7fd f9db 	bl	406f14 <memset>
  409b5e:	4807      	ldr	r0, [pc, #28]	; (409b7c <std.isra.0+0x40>)
  409b60:	4907      	ldr	r1, [pc, #28]	; (409b80 <std.isra.0+0x44>)
  409b62:	4a08      	ldr	r2, [pc, #32]	; (409b84 <std.isra.0+0x48>)
  409b64:	4b08      	ldr	r3, [pc, #32]	; (409b88 <std.isra.0+0x4c>)
  409b66:	6220      	str	r0, [r4, #32]
  409b68:	61e4      	str	r4, [r4, #28]
  409b6a:	6261      	str	r1, [r4, #36]	; 0x24
  409b6c:	62a2      	str	r2, [r4, #40]	; 0x28
  409b6e:	62e3      	str	r3, [r4, #44]	; 0x2c
  409b70:	f104 0058 	add.w	r0, r4, #88	; 0x58
  409b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  409b78:	f000 bb40 	b.w	40a1fc <__retarget_lock_init_recursive>
  409b7c:	0040ada9 	.word	0x0040ada9
  409b80:	0040adcd 	.word	0x0040adcd
  409b84:	0040ae09 	.word	0x0040ae09
  409b88:	0040ae29 	.word	0x0040ae29

00409b8c <__sinit>:
  409b8c:	b510      	push	{r4, lr}
  409b8e:	4604      	mov	r4, r0
  409b90:	4812      	ldr	r0, [pc, #72]	; (409bdc <__sinit+0x50>)
  409b92:	f000 fb37 	bl	40a204 <__retarget_lock_acquire_recursive>
  409b96:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  409b98:	b9d2      	cbnz	r2, 409bd0 <__sinit+0x44>
  409b9a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  409b9e:	4810      	ldr	r0, [pc, #64]	; (409be0 <__sinit+0x54>)
  409ba0:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  409ba4:	2103      	movs	r1, #3
  409ba6:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  409baa:	63e0      	str	r0, [r4, #60]	; 0x3c
  409bac:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  409bb0:	6860      	ldr	r0, [r4, #4]
  409bb2:	2104      	movs	r1, #4
  409bb4:	f7ff ffc2 	bl	409b3c <std.isra.0>
  409bb8:	2201      	movs	r2, #1
  409bba:	2109      	movs	r1, #9
  409bbc:	68a0      	ldr	r0, [r4, #8]
  409bbe:	f7ff ffbd 	bl	409b3c <std.isra.0>
  409bc2:	2202      	movs	r2, #2
  409bc4:	2112      	movs	r1, #18
  409bc6:	68e0      	ldr	r0, [r4, #12]
  409bc8:	f7ff ffb8 	bl	409b3c <std.isra.0>
  409bcc:	2301      	movs	r3, #1
  409bce:	63a3      	str	r3, [r4, #56]	; 0x38
  409bd0:	4802      	ldr	r0, [pc, #8]	; (409bdc <__sinit+0x50>)
  409bd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  409bd6:	f000 bb17 	b.w	40a208 <__retarget_lock_release_recursive>
  409bda:	bf00      	nop
  409bdc:	20400c30 	.word	0x20400c30
  409be0:	00409b31 	.word	0x00409b31

00409be4 <__sfp_lock_acquire>:
  409be4:	4801      	ldr	r0, [pc, #4]	; (409bec <__sfp_lock_acquire+0x8>)
  409be6:	f000 bb0d 	b.w	40a204 <__retarget_lock_acquire_recursive>
  409bea:	bf00      	nop
  409bec:	20400c44 	.word	0x20400c44

00409bf0 <__sfp_lock_release>:
  409bf0:	4801      	ldr	r0, [pc, #4]	; (409bf8 <__sfp_lock_release+0x8>)
  409bf2:	f000 bb09 	b.w	40a208 <__retarget_lock_release_recursive>
  409bf6:	bf00      	nop
  409bf8:	20400c44 	.word	0x20400c44

00409bfc <__libc_fini_array>:
  409bfc:	b538      	push	{r3, r4, r5, lr}
  409bfe:	4c0a      	ldr	r4, [pc, #40]	; (409c28 <__libc_fini_array+0x2c>)
  409c00:	4d0a      	ldr	r5, [pc, #40]	; (409c2c <__libc_fini_array+0x30>)
  409c02:	1b64      	subs	r4, r4, r5
  409c04:	10a4      	asrs	r4, r4, #2
  409c06:	d00a      	beq.n	409c1e <__libc_fini_array+0x22>
  409c08:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  409c0c:	3b01      	subs	r3, #1
  409c0e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  409c12:	3c01      	subs	r4, #1
  409c14:	f855 3904 	ldr.w	r3, [r5], #-4
  409c18:	4798      	blx	r3
  409c1a:	2c00      	cmp	r4, #0
  409c1c:	d1f9      	bne.n	409c12 <__libc_fini_array+0x16>
  409c1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  409c22:	f002 b9db 	b.w	40bfdc <_fini>
  409c26:	bf00      	nop
  409c28:	0040bfec 	.word	0x0040bfec
  409c2c:	0040bfe8 	.word	0x0040bfe8

00409c30 <_malloc_trim_r>:
  409c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409c32:	4f24      	ldr	r7, [pc, #144]	; (409cc4 <_malloc_trim_r+0x94>)
  409c34:	460c      	mov	r4, r1
  409c36:	4606      	mov	r6, r0
  409c38:	f7fd f9ba 	bl	406fb0 <__malloc_lock>
  409c3c:	68bb      	ldr	r3, [r7, #8]
  409c3e:	685d      	ldr	r5, [r3, #4]
  409c40:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  409c44:	310f      	adds	r1, #15
  409c46:	f025 0503 	bic.w	r5, r5, #3
  409c4a:	4429      	add	r1, r5
  409c4c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  409c50:	f021 010f 	bic.w	r1, r1, #15
  409c54:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  409c58:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  409c5c:	db07      	blt.n	409c6e <_malloc_trim_r+0x3e>
  409c5e:	2100      	movs	r1, #0
  409c60:	4630      	mov	r0, r6
  409c62:	f7fd fa1b 	bl	40709c <_sbrk_r>
  409c66:	68bb      	ldr	r3, [r7, #8]
  409c68:	442b      	add	r3, r5
  409c6a:	4298      	cmp	r0, r3
  409c6c:	d004      	beq.n	409c78 <_malloc_trim_r+0x48>
  409c6e:	4630      	mov	r0, r6
  409c70:	f7fd f9a4 	bl	406fbc <__malloc_unlock>
  409c74:	2000      	movs	r0, #0
  409c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409c78:	4261      	negs	r1, r4
  409c7a:	4630      	mov	r0, r6
  409c7c:	f7fd fa0e 	bl	40709c <_sbrk_r>
  409c80:	3001      	adds	r0, #1
  409c82:	d00d      	beq.n	409ca0 <_malloc_trim_r+0x70>
  409c84:	4b10      	ldr	r3, [pc, #64]	; (409cc8 <_malloc_trim_r+0x98>)
  409c86:	68ba      	ldr	r2, [r7, #8]
  409c88:	6819      	ldr	r1, [r3, #0]
  409c8a:	1b2d      	subs	r5, r5, r4
  409c8c:	f045 0501 	orr.w	r5, r5, #1
  409c90:	4630      	mov	r0, r6
  409c92:	1b09      	subs	r1, r1, r4
  409c94:	6055      	str	r5, [r2, #4]
  409c96:	6019      	str	r1, [r3, #0]
  409c98:	f7fd f990 	bl	406fbc <__malloc_unlock>
  409c9c:	2001      	movs	r0, #1
  409c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409ca0:	2100      	movs	r1, #0
  409ca2:	4630      	mov	r0, r6
  409ca4:	f7fd f9fa 	bl	40709c <_sbrk_r>
  409ca8:	68ba      	ldr	r2, [r7, #8]
  409caa:	1a83      	subs	r3, r0, r2
  409cac:	2b0f      	cmp	r3, #15
  409cae:	ddde      	ble.n	409c6e <_malloc_trim_r+0x3e>
  409cb0:	4c06      	ldr	r4, [pc, #24]	; (409ccc <_malloc_trim_r+0x9c>)
  409cb2:	4905      	ldr	r1, [pc, #20]	; (409cc8 <_malloc_trim_r+0x98>)
  409cb4:	6824      	ldr	r4, [r4, #0]
  409cb6:	f043 0301 	orr.w	r3, r3, #1
  409cba:	1b00      	subs	r0, r0, r4
  409cbc:	6053      	str	r3, [r2, #4]
  409cbe:	6008      	str	r0, [r1, #0]
  409cc0:	e7d5      	b.n	409c6e <_malloc_trim_r+0x3e>
  409cc2:	bf00      	nop
  409cc4:	20400440 	.word	0x20400440
  409cc8:	20400b9c 	.word	0x20400b9c
  409ccc:	20400848 	.word	0x20400848

00409cd0 <_free_r>:
  409cd0:	2900      	cmp	r1, #0
  409cd2:	d044      	beq.n	409d5e <_free_r+0x8e>
  409cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409cd8:	460d      	mov	r5, r1
  409cda:	4680      	mov	r8, r0
  409cdc:	f7fd f968 	bl	406fb0 <__malloc_lock>
  409ce0:	f855 7c04 	ldr.w	r7, [r5, #-4]
  409ce4:	4969      	ldr	r1, [pc, #420]	; (409e8c <_free_r+0x1bc>)
  409ce6:	f027 0301 	bic.w	r3, r7, #1
  409cea:	f1a5 0408 	sub.w	r4, r5, #8
  409cee:	18e2      	adds	r2, r4, r3
  409cf0:	688e      	ldr	r6, [r1, #8]
  409cf2:	6850      	ldr	r0, [r2, #4]
  409cf4:	42b2      	cmp	r2, r6
  409cf6:	f020 0003 	bic.w	r0, r0, #3
  409cfa:	d05e      	beq.n	409dba <_free_r+0xea>
  409cfc:	07fe      	lsls	r6, r7, #31
  409cfe:	6050      	str	r0, [r2, #4]
  409d00:	d40b      	bmi.n	409d1a <_free_r+0x4a>
  409d02:	f855 7c08 	ldr.w	r7, [r5, #-8]
  409d06:	1be4      	subs	r4, r4, r7
  409d08:	f101 0e08 	add.w	lr, r1, #8
  409d0c:	68a5      	ldr	r5, [r4, #8]
  409d0e:	4575      	cmp	r5, lr
  409d10:	443b      	add	r3, r7
  409d12:	d06d      	beq.n	409df0 <_free_r+0x120>
  409d14:	68e7      	ldr	r7, [r4, #12]
  409d16:	60ef      	str	r7, [r5, #12]
  409d18:	60bd      	str	r5, [r7, #8]
  409d1a:	1815      	adds	r5, r2, r0
  409d1c:	686d      	ldr	r5, [r5, #4]
  409d1e:	07ed      	lsls	r5, r5, #31
  409d20:	d53e      	bpl.n	409da0 <_free_r+0xd0>
  409d22:	f043 0201 	orr.w	r2, r3, #1
  409d26:	6062      	str	r2, [r4, #4]
  409d28:	50e3      	str	r3, [r4, r3]
  409d2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  409d2e:	d217      	bcs.n	409d60 <_free_r+0x90>
  409d30:	08db      	lsrs	r3, r3, #3
  409d32:	1c58      	adds	r0, r3, #1
  409d34:	109a      	asrs	r2, r3, #2
  409d36:	684d      	ldr	r5, [r1, #4]
  409d38:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  409d3c:	60a7      	str	r7, [r4, #8]
  409d3e:	2301      	movs	r3, #1
  409d40:	4093      	lsls	r3, r2
  409d42:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  409d46:	432b      	orrs	r3, r5
  409d48:	3a08      	subs	r2, #8
  409d4a:	60e2      	str	r2, [r4, #12]
  409d4c:	604b      	str	r3, [r1, #4]
  409d4e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  409d52:	60fc      	str	r4, [r7, #12]
  409d54:	4640      	mov	r0, r8
  409d56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  409d5a:	f7fd b92f 	b.w	406fbc <__malloc_unlock>
  409d5e:	4770      	bx	lr
  409d60:	0a5a      	lsrs	r2, r3, #9
  409d62:	2a04      	cmp	r2, #4
  409d64:	d852      	bhi.n	409e0c <_free_r+0x13c>
  409d66:	099a      	lsrs	r2, r3, #6
  409d68:	f102 0739 	add.w	r7, r2, #57	; 0x39
  409d6c:	00ff      	lsls	r7, r7, #3
  409d6e:	f102 0538 	add.w	r5, r2, #56	; 0x38
  409d72:	19c8      	adds	r0, r1, r7
  409d74:	59ca      	ldr	r2, [r1, r7]
  409d76:	3808      	subs	r0, #8
  409d78:	4290      	cmp	r0, r2
  409d7a:	d04f      	beq.n	409e1c <_free_r+0x14c>
  409d7c:	6851      	ldr	r1, [r2, #4]
  409d7e:	f021 0103 	bic.w	r1, r1, #3
  409d82:	428b      	cmp	r3, r1
  409d84:	d232      	bcs.n	409dec <_free_r+0x11c>
  409d86:	6892      	ldr	r2, [r2, #8]
  409d88:	4290      	cmp	r0, r2
  409d8a:	d1f7      	bne.n	409d7c <_free_r+0xac>
  409d8c:	68c3      	ldr	r3, [r0, #12]
  409d8e:	60a0      	str	r0, [r4, #8]
  409d90:	60e3      	str	r3, [r4, #12]
  409d92:	609c      	str	r4, [r3, #8]
  409d94:	60c4      	str	r4, [r0, #12]
  409d96:	4640      	mov	r0, r8
  409d98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  409d9c:	f7fd b90e 	b.w	406fbc <__malloc_unlock>
  409da0:	6895      	ldr	r5, [r2, #8]
  409da2:	4f3b      	ldr	r7, [pc, #236]	; (409e90 <_free_r+0x1c0>)
  409da4:	42bd      	cmp	r5, r7
  409da6:	4403      	add	r3, r0
  409da8:	d040      	beq.n	409e2c <_free_r+0x15c>
  409daa:	68d0      	ldr	r0, [r2, #12]
  409dac:	60e8      	str	r0, [r5, #12]
  409dae:	f043 0201 	orr.w	r2, r3, #1
  409db2:	6085      	str	r5, [r0, #8]
  409db4:	6062      	str	r2, [r4, #4]
  409db6:	50e3      	str	r3, [r4, r3]
  409db8:	e7b7      	b.n	409d2a <_free_r+0x5a>
  409dba:	07ff      	lsls	r7, r7, #31
  409dbc:	4403      	add	r3, r0
  409dbe:	d407      	bmi.n	409dd0 <_free_r+0x100>
  409dc0:	f855 2c08 	ldr.w	r2, [r5, #-8]
  409dc4:	1aa4      	subs	r4, r4, r2
  409dc6:	4413      	add	r3, r2
  409dc8:	68a0      	ldr	r0, [r4, #8]
  409dca:	68e2      	ldr	r2, [r4, #12]
  409dcc:	60c2      	str	r2, [r0, #12]
  409dce:	6090      	str	r0, [r2, #8]
  409dd0:	4a30      	ldr	r2, [pc, #192]	; (409e94 <_free_r+0x1c4>)
  409dd2:	6812      	ldr	r2, [r2, #0]
  409dd4:	f043 0001 	orr.w	r0, r3, #1
  409dd8:	4293      	cmp	r3, r2
  409dda:	6060      	str	r0, [r4, #4]
  409ddc:	608c      	str	r4, [r1, #8]
  409dde:	d3b9      	bcc.n	409d54 <_free_r+0x84>
  409de0:	4b2d      	ldr	r3, [pc, #180]	; (409e98 <_free_r+0x1c8>)
  409de2:	4640      	mov	r0, r8
  409de4:	6819      	ldr	r1, [r3, #0]
  409de6:	f7ff ff23 	bl	409c30 <_malloc_trim_r>
  409dea:	e7b3      	b.n	409d54 <_free_r+0x84>
  409dec:	4610      	mov	r0, r2
  409dee:	e7cd      	b.n	409d8c <_free_r+0xbc>
  409df0:	1811      	adds	r1, r2, r0
  409df2:	6849      	ldr	r1, [r1, #4]
  409df4:	07c9      	lsls	r1, r1, #31
  409df6:	d444      	bmi.n	409e82 <_free_r+0x1b2>
  409df8:	6891      	ldr	r1, [r2, #8]
  409dfa:	68d2      	ldr	r2, [r2, #12]
  409dfc:	60ca      	str	r2, [r1, #12]
  409dfe:	4403      	add	r3, r0
  409e00:	f043 0001 	orr.w	r0, r3, #1
  409e04:	6091      	str	r1, [r2, #8]
  409e06:	6060      	str	r0, [r4, #4]
  409e08:	50e3      	str	r3, [r4, r3]
  409e0a:	e7a3      	b.n	409d54 <_free_r+0x84>
  409e0c:	2a14      	cmp	r2, #20
  409e0e:	d816      	bhi.n	409e3e <_free_r+0x16e>
  409e10:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  409e14:	00ff      	lsls	r7, r7, #3
  409e16:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  409e1a:	e7aa      	b.n	409d72 <_free_r+0xa2>
  409e1c:	10aa      	asrs	r2, r5, #2
  409e1e:	2301      	movs	r3, #1
  409e20:	684d      	ldr	r5, [r1, #4]
  409e22:	4093      	lsls	r3, r2
  409e24:	432b      	orrs	r3, r5
  409e26:	604b      	str	r3, [r1, #4]
  409e28:	4603      	mov	r3, r0
  409e2a:	e7b0      	b.n	409d8e <_free_r+0xbe>
  409e2c:	f043 0201 	orr.w	r2, r3, #1
  409e30:	614c      	str	r4, [r1, #20]
  409e32:	610c      	str	r4, [r1, #16]
  409e34:	60e5      	str	r5, [r4, #12]
  409e36:	60a5      	str	r5, [r4, #8]
  409e38:	6062      	str	r2, [r4, #4]
  409e3a:	50e3      	str	r3, [r4, r3]
  409e3c:	e78a      	b.n	409d54 <_free_r+0x84>
  409e3e:	2a54      	cmp	r2, #84	; 0x54
  409e40:	d806      	bhi.n	409e50 <_free_r+0x180>
  409e42:	0b1a      	lsrs	r2, r3, #12
  409e44:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  409e48:	00ff      	lsls	r7, r7, #3
  409e4a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  409e4e:	e790      	b.n	409d72 <_free_r+0xa2>
  409e50:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  409e54:	d806      	bhi.n	409e64 <_free_r+0x194>
  409e56:	0bda      	lsrs	r2, r3, #15
  409e58:	f102 0778 	add.w	r7, r2, #120	; 0x78
  409e5c:	00ff      	lsls	r7, r7, #3
  409e5e:	f102 0577 	add.w	r5, r2, #119	; 0x77
  409e62:	e786      	b.n	409d72 <_free_r+0xa2>
  409e64:	f240 5054 	movw	r0, #1364	; 0x554
  409e68:	4282      	cmp	r2, r0
  409e6a:	d806      	bhi.n	409e7a <_free_r+0x1aa>
  409e6c:	0c9a      	lsrs	r2, r3, #18
  409e6e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  409e72:	00ff      	lsls	r7, r7, #3
  409e74:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  409e78:	e77b      	b.n	409d72 <_free_r+0xa2>
  409e7a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  409e7e:	257e      	movs	r5, #126	; 0x7e
  409e80:	e777      	b.n	409d72 <_free_r+0xa2>
  409e82:	f043 0101 	orr.w	r1, r3, #1
  409e86:	6061      	str	r1, [r4, #4]
  409e88:	6013      	str	r3, [r2, #0]
  409e8a:	e763      	b.n	409d54 <_free_r+0x84>
  409e8c:	20400440 	.word	0x20400440
  409e90:	20400448 	.word	0x20400448
  409e94:	2040084c 	.word	0x2040084c
  409e98:	20400bcc 	.word	0x20400bcc

00409e9c <__sfvwrite_r>:
  409e9c:	6893      	ldr	r3, [r2, #8]
  409e9e:	2b00      	cmp	r3, #0
  409ea0:	d073      	beq.n	409f8a <__sfvwrite_r+0xee>
  409ea2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409ea6:	898b      	ldrh	r3, [r1, #12]
  409ea8:	b083      	sub	sp, #12
  409eaa:	460c      	mov	r4, r1
  409eac:	0719      	lsls	r1, r3, #28
  409eae:	9000      	str	r0, [sp, #0]
  409eb0:	4616      	mov	r6, r2
  409eb2:	d526      	bpl.n	409f02 <__sfvwrite_r+0x66>
  409eb4:	6922      	ldr	r2, [r4, #16]
  409eb6:	b322      	cbz	r2, 409f02 <__sfvwrite_r+0x66>
  409eb8:	f013 0002 	ands.w	r0, r3, #2
  409ebc:	6835      	ldr	r5, [r6, #0]
  409ebe:	d02c      	beq.n	409f1a <__sfvwrite_r+0x7e>
  409ec0:	f04f 0900 	mov.w	r9, #0
  409ec4:	4fb0      	ldr	r7, [pc, #704]	; (40a188 <__sfvwrite_r+0x2ec>)
  409ec6:	46c8      	mov	r8, r9
  409ec8:	46b2      	mov	sl, r6
  409eca:	45b8      	cmp	r8, r7
  409ecc:	4643      	mov	r3, r8
  409ece:	464a      	mov	r2, r9
  409ed0:	bf28      	it	cs
  409ed2:	463b      	movcs	r3, r7
  409ed4:	9800      	ldr	r0, [sp, #0]
  409ed6:	f1b8 0f00 	cmp.w	r8, #0
  409eda:	d050      	beq.n	409f7e <__sfvwrite_r+0xe2>
  409edc:	69e1      	ldr	r1, [r4, #28]
  409ede:	6a66      	ldr	r6, [r4, #36]	; 0x24
  409ee0:	47b0      	blx	r6
  409ee2:	2800      	cmp	r0, #0
  409ee4:	dd58      	ble.n	409f98 <__sfvwrite_r+0xfc>
  409ee6:	f8da 3008 	ldr.w	r3, [sl, #8]
  409eea:	1a1b      	subs	r3, r3, r0
  409eec:	4481      	add	r9, r0
  409eee:	eba8 0800 	sub.w	r8, r8, r0
  409ef2:	f8ca 3008 	str.w	r3, [sl, #8]
  409ef6:	2b00      	cmp	r3, #0
  409ef8:	d1e7      	bne.n	409eca <__sfvwrite_r+0x2e>
  409efa:	2000      	movs	r0, #0
  409efc:	b003      	add	sp, #12
  409efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409f02:	4621      	mov	r1, r4
  409f04:	9800      	ldr	r0, [sp, #0]
  409f06:	f7fe fd17 	bl	408938 <__swsetup_r>
  409f0a:	2800      	cmp	r0, #0
  409f0c:	f040 8133 	bne.w	40a176 <__sfvwrite_r+0x2da>
  409f10:	89a3      	ldrh	r3, [r4, #12]
  409f12:	6835      	ldr	r5, [r6, #0]
  409f14:	f013 0002 	ands.w	r0, r3, #2
  409f18:	d1d2      	bne.n	409ec0 <__sfvwrite_r+0x24>
  409f1a:	f013 0901 	ands.w	r9, r3, #1
  409f1e:	d145      	bne.n	409fac <__sfvwrite_r+0x110>
  409f20:	464f      	mov	r7, r9
  409f22:	9601      	str	r6, [sp, #4]
  409f24:	b337      	cbz	r7, 409f74 <__sfvwrite_r+0xd8>
  409f26:	059a      	lsls	r2, r3, #22
  409f28:	f8d4 8008 	ldr.w	r8, [r4, #8]
  409f2c:	f140 8083 	bpl.w	40a036 <__sfvwrite_r+0x19a>
  409f30:	4547      	cmp	r7, r8
  409f32:	46c3      	mov	fp, r8
  409f34:	f0c0 80ab 	bcc.w	40a08e <__sfvwrite_r+0x1f2>
  409f38:	f413 6f90 	tst.w	r3, #1152	; 0x480
  409f3c:	f040 80ac 	bne.w	40a098 <__sfvwrite_r+0x1fc>
  409f40:	6820      	ldr	r0, [r4, #0]
  409f42:	46ba      	mov	sl, r7
  409f44:	465a      	mov	r2, fp
  409f46:	4649      	mov	r1, r9
  409f48:	f000 fa2a 	bl	40a3a0 <memmove>
  409f4c:	68a2      	ldr	r2, [r4, #8]
  409f4e:	6823      	ldr	r3, [r4, #0]
  409f50:	eba2 0208 	sub.w	r2, r2, r8
  409f54:	445b      	add	r3, fp
  409f56:	60a2      	str	r2, [r4, #8]
  409f58:	6023      	str	r3, [r4, #0]
  409f5a:	9a01      	ldr	r2, [sp, #4]
  409f5c:	6893      	ldr	r3, [r2, #8]
  409f5e:	eba3 030a 	sub.w	r3, r3, sl
  409f62:	44d1      	add	r9, sl
  409f64:	eba7 070a 	sub.w	r7, r7, sl
  409f68:	6093      	str	r3, [r2, #8]
  409f6a:	2b00      	cmp	r3, #0
  409f6c:	d0c5      	beq.n	409efa <__sfvwrite_r+0x5e>
  409f6e:	89a3      	ldrh	r3, [r4, #12]
  409f70:	2f00      	cmp	r7, #0
  409f72:	d1d8      	bne.n	409f26 <__sfvwrite_r+0x8a>
  409f74:	f8d5 9000 	ldr.w	r9, [r5]
  409f78:	686f      	ldr	r7, [r5, #4]
  409f7a:	3508      	adds	r5, #8
  409f7c:	e7d2      	b.n	409f24 <__sfvwrite_r+0x88>
  409f7e:	f8d5 9000 	ldr.w	r9, [r5]
  409f82:	f8d5 8004 	ldr.w	r8, [r5, #4]
  409f86:	3508      	adds	r5, #8
  409f88:	e79f      	b.n	409eca <__sfvwrite_r+0x2e>
  409f8a:	2000      	movs	r0, #0
  409f8c:	4770      	bx	lr
  409f8e:	4621      	mov	r1, r4
  409f90:	9800      	ldr	r0, [sp, #0]
  409f92:	f7ff fda3 	bl	409adc <_fflush_r>
  409f96:	b370      	cbz	r0, 409ff6 <__sfvwrite_r+0x15a>
  409f98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  409f9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409fa0:	f04f 30ff 	mov.w	r0, #4294967295
  409fa4:	81a3      	strh	r3, [r4, #12]
  409fa6:	b003      	add	sp, #12
  409fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409fac:	4681      	mov	r9, r0
  409fae:	4633      	mov	r3, r6
  409fb0:	464e      	mov	r6, r9
  409fb2:	46a8      	mov	r8, r5
  409fb4:	469a      	mov	sl, r3
  409fb6:	464d      	mov	r5, r9
  409fb8:	b34e      	cbz	r6, 40a00e <__sfvwrite_r+0x172>
  409fba:	b380      	cbz	r0, 40a01e <__sfvwrite_r+0x182>
  409fbc:	6820      	ldr	r0, [r4, #0]
  409fbe:	6923      	ldr	r3, [r4, #16]
  409fc0:	6962      	ldr	r2, [r4, #20]
  409fc2:	45b1      	cmp	r9, r6
  409fc4:	46cb      	mov	fp, r9
  409fc6:	bf28      	it	cs
  409fc8:	46b3      	movcs	fp, r6
  409fca:	4298      	cmp	r0, r3
  409fcc:	465f      	mov	r7, fp
  409fce:	d904      	bls.n	409fda <__sfvwrite_r+0x13e>
  409fd0:	68a3      	ldr	r3, [r4, #8]
  409fd2:	4413      	add	r3, r2
  409fd4:	459b      	cmp	fp, r3
  409fd6:	f300 80a6 	bgt.w	40a126 <__sfvwrite_r+0x28a>
  409fda:	4593      	cmp	fp, r2
  409fdc:	db4b      	blt.n	40a076 <__sfvwrite_r+0x1da>
  409fde:	4613      	mov	r3, r2
  409fe0:	6a67      	ldr	r7, [r4, #36]	; 0x24
  409fe2:	69e1      	ldr	r1, [r4, #28]
  409fe4:	9800      	ldr	r0, [sp, #0]
  409fe6:	462a      	mov	r2, r5
  409fe8:	47b8      	blx	r7
  409fea:	1e07      	subs	r7, r0, #0
  409fec:	ddd4      	ble.n	409f98 <__sfvwrite_r+0xfc>
  409fee:	ebb9 0907 	subs.w	r9, r9, r7
  409ff2:	d0cc      	beq.n	409f8e <__sfvwrite_r+0xf2>
  409ff4:	2001      	movs	r0, #1
  409ff6:	f8da 3008 	ldr.w	r3, [sl, #8]
  409ffa:	1bdb      	subs	r3, r3, r7
  409ffc:	443d      	add	r5, r7
  409ffe:	1bf6      	subs	r6, r6, r7
  40a000:	f8ca 3008 	str.w	r3, [sl, #8]
  40a004:	2b00      	cmp	r3, #0
  40a006:	f43f af78 	beq.w	409efa <__sfvwrite_r+0x5e>
  40a00a:	2e00      	cmp	r6, #0
  40a00c:	d1d5      	bne.n	409fba <__sfvwrite_r+0x11e>
  40a00e:	f108 0308 	add.w	r3, r8, #8
  40a012:	e913 0060 	ldmdb	r3, {r5, r6}
  40a016:	4698      	mov	r8, r3
  40a018:	3308      	adds	r3, #8
  40a01a:	2e00      	cmp	r6, #0
  40a01c:	d0f9      	beq.n	40a012 <__sfvwrite_r+0x176>
  40a01e:	4632      	mov	r2, r6
  40a020:	210a      	movs	r1, #10
  40a022:	4628      	mov	r0, r5
  40a024:	f000 f96c 	bl	40a300 <memchr>
  40a028:	2800      	cmp	r0, #0
  40a02a:	f000 80a1 	beq.w	40a170 <__sfvwrite_r+0x2d4>
  40a02e:	3001      	adds	r0, #1
  40a030:	eba0 0905 	sub.w	r9, r0, r5
  40a034:	e7c2      	b.n	409fbc <__sfvwrite_r+0x120>
  40a036:	6820      	ldr	r0, [r4, #0]
  40a038:	6923      	ldr	r3, [r4, #16]
  40a03a:	4298      	cmp	r0, r3
  40a03c:	d802      	bhi.n	40a044 <__sfvwrite_r+0x1a8>
  40a03e:	6963      	ldr	r3, [r4, #20]
  40a040:	429f      	cmp	r7, r3
  40a042:	d25d      	bcs.n	40a100 <__sfvwrite_r+0x264>
  40a044:	45b8      	cmp	r8, r7
  40a046:	bf28      	it	cs
  40a048:	46b8      	movcs	r8, r7
  40a04a:	4642      	mov	r2, r8
  40a04c:	4649      	mov	r1, r9
  40a04e:	f000 f9a7 	bl	40a3a0 <memmove>
  40a052:	68a3      	ldr	r3, [r4, #8]
  40a054:	6822      	ldr	r2, [r4, #0]
  40a056:	eba3 0308 	sub.w	r3, r3, r8
  40a05a:	4442      	add	r2, r8
  40a05c:	60a3      	str	r3, [r4, #8]
  40a05e:	6022      	str	r2, [r4, #0]
  40a060:	b10b      	cbz	r3, 40a066 <__sfvwrite_r+0x1ca>
  40a062:	46c2      	mov	sl, r8
  40a064:	e779      	b.n	409f5a <__sfvwrite_r+0xbe>
  40a066:	4621      	mov	r1, r4
  40a068:	9800      	ldr	r0, [sp, #0]
  40a06a:	f7ff fd37 	bl	409adc <_fflush_r>
  40a06e:	2800      	cmp	r0, #0
  40a070:	d192      	bne.n	409f98 <__sfvwrite_r+0xfc>
  40a072:	46c2      	mov	sl, r8
  40a074:	e771      	b.n	409f5a <__sfvwrite_r+0xbe>
  40a076:	465a      	mov	r2, fp
  40a078:	4629      	mov	r1, r5
  40a07a:	f000 f991 	bl	40a3a0 <memmove>
  40a07e:	68a2      	ldr	r2, [r4, #8]
  40a080:	6823      	ldr	r3, [r4, #0]
  40a082:	eba2 020b 	sub.w	r2, r2, fp
  40a086:	445b      	add	r3, fp
  40a088:	60a2      	str	r2, [r4, #8]
  40a08a:	6023      	str	r3, [r4, #0]
  40a08c:	e7af      	b.n	409fee <__sfvwrite_r+0x152>
  40a08e:	6820      	ldr	r0, [r4, #0]
  40a090:	46b8      	mov	r8, r7
  40a092:	46ba      	mov	sl, r7
  40a094:	46bb      	mov	fp, r7
  40a096:	e755      	b.n	409f44 <__sfvwrite_r+0xa8>
  40a098:	6962      	ldr	r2, [r4, #20]
  40a09a:	6820      	ldr	r0, [r4, #0]
  40a09c:	6921      	ldr	r1, [r4, #16]
  40a09e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  40a0a2:	eba0 0a01 	sub.w	sl, r0, r1
  40a0a6:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40a0aa:	f10a 0001 	add.w	r0, sl, #1
  40a0ae:	ea4f 0868 	mov.w	r8, r8, asr #1
  40a0b2:	4438      	add	r0, r7
  40a0b4:	4540      	cmp	r0, r8
  40a0b6:	4642      	mov	r2, r8
  40a0b8:	bf84      	itt	hi
  40a0ba:	4680      	movhi	r8, r0
  40a0bc:	4642      	movhi	r2, r8
  40a0be:	055b      	lsls	r3, r3, #21
  40a0c0:	d544      	bpl.n	40a14c <__sfvwrite_r+0x2b0>
  40a0c2:	4611      	mov	r1, r2
  40a0c4:	9800      	ldr	r0, [sp, #0]
  40a0c6:	f7fc fbdb 	bl	406880 <_malloc_r>
  40a0ca:	4683      	mov	fp, r0
  40a0cc:	2800      	cmp	r0, #0
  40a0ce:	d055      	beq.n	40a17c <__sfvwrite_r+0x2e0>
  40a0d0:	4652      	mov	r2, sl
  40a0d2:	6921      	ldr	r1, [r4, #16]
  40a0d4:	f7fc fe84 	bl	406de0 <memcpy>
  40a0d8:	89a3      	ldrh	r3, [r4, #12]
  40a0da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40a0de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40a0e2:	81a3      	strh	r3, [r4, #12]
  40a0e4:	eb0b 000a 	add.w	r0, fp, sl
  40a0e8:	eba8 030a 	sub.w	r3, r8, sl
  40a0ec:	f8c4 b010 	str.w	fp, [r4, #16]
  40a0f0:	f8c4 8014 	str.w	r8, [r4, #20]
  40a0f4:	6020      	str	r0, [r4, #0]
  40a0f6:	60a3      	str	r3, [r4, #8]
  40a0f8:	46b8      	mov	r8, r7
  40a0fa:	46ba      	mov	sl, r7
  40a0fc:	46bb      	mov	fp, r7
  40a0fe:	e721      	b.n	409f44 <__sfvwrite_r+0xa8>
  40a100:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  40a104:	42b9      	cmp	r1, r7
  40a106:	bf28      	it	cs
  40a108:	4639      	movcs	r1, r7
  40a10a:	464a      	mov	r2, r9
  40a10c:	fb91 f1f3 	sdiv	r1, r1, r3
  40a110:	9800      	ldr	r0, [sp, #0]
  40a112:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40a114:	fb03 f301 	mul.w	r3, r3, r1
  40a118:	69e1      	ldr	r1, [r4, #28]
  40a11a:	47b0      	blx	r6
  40a11c:	f1b0 0a00 	subs.w	sl, r0, #0
  40a120:	f73f af1b 	bgt.w	409f5a <__sfvwrite_r+0xbe>
  40a124:	e738      	b.n	409f98 <__sfvwrite_r+0xfc>
  40a126:	461a      	mov	r2, r3
  40a128:	4629      	mov	r1, r5
  40a12a:	9301      	str	r3, [sp, #4]
  40a12c:	f000 f938 	bl	40a3a0 <memmove>
  40a130:	6822      	ldr	r2, [r4, #0]
  40a132:	9b01      	ldr	r3, [sp, #4]
  40a134:	9800      	ldr	r0, [sp, #0]
  40a136:	441a      	add	r2, r3
  40a138:	6022      	str	r2, [r4, #0]
  40a13a:	4621      	mov	r1, r4
  40a13c:	f7ff fcce 	bl	409adc <_fflush_r>
  40a140:	9b01      	ldr	r3, [sp, #4]
  40a142:	2800      	cmp	r0, #0
  40a144:	f47f af28 	bne.w	409f98 <__sfvwrite_r+0xfc>
  40a148:	461f      	mov	r7, r3
  40a14a:	e750      	b.n	409fee <__sfvwrite_r+0x152>
  40a14c:	9800      	ldr	r0, [sp, #0]
  40a14e:	f000 fc85 	bl	40aa5c <_realloc_r>
  40a152:	4683      	mov	fp, r0
  40a154:	2800      	cmp	r0, #0
  40a156:	d1c5      	bne.n	40a0e4 <__sfvwrite_r+0x248>
  40a158:	9d00      	ldr	r5, [sp, #0]
  40a15a:	6921      	ldr	r1, [r4, #16]
  40a15c:	4628      	mov	r0, r5
  40a15e:	f7ff fdb7 	bl	409cd0 <_free_r>
  40a162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a166:	220c      	movs	r2, #12
  40a168:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40a16c:	602a      	str	r2, [r5, #0]
  40a16e:	e715      	b.n	409f9c <__sfvwrite_r+0x100>
  40a170:	f106 0901 	add.w	r9, r6, #1
  40a174:	e722      	b.n	409fbc <__sfvwrite_r+0x120>
  40a176:	f04f 30ff 	mov.w	r0, #4294967295
  40a17a:	e6bf      	b.n	409efc <__sfvwrite_r+0x60>
  40a17c:	9a00      	ldr	r2, [sp, #0]
  40a17e:	230c      	movs	r3, #12
  40a180:	6013      	str	r3, [r2, #0]
  40a182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a186:	e709      	b.n	409f9c <__sfvwrite_r+0x100>
  40a188:	7ffffc00 	.word	0x7ffffc00

0040a18c <_fwalk_reent>:
  40a18c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40a190:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40a194:	d01f      	beq.n	40a1d6 <_fwalk_reent+0x4a>
  40a196:	4688      	mov	r8, r1
  40a198:	4606      	mov	r6, r0
  40a19a:	f04f 0900 	mov.w	r9, #0
  40a19e:	687d      	ldr	r5, [r7, #4]
  40a1a0:	68bc      	ldr	r4, [r7, #8]
  40a1a2:	3d01      	subs	r5, #1
  40a1a4:	d411      	bmi.n	40a1ca <_fwalk_reent+0x3e>
  40a1a6:	89a3      	ldrh	r3, [r4, #12]
  40a1a8:	2b01      	cmp	r3, #1
  40a1aa:	f105 35ff 	add.w	r5, r5, #4294967295
  40a1ae:	d908      	bls.n	40a1c2 <_fwalk_reent+0x36>
  40a1b0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40a1b4:	3301      	adds	r3, #1
  40a1b6:	4621      	mov	r1, r4
  40a1b8:	4630      	mov	r0, r6
  40a1ba:	d002      	beq.n	40a1c2 <_fwalk_reent+0x36>
  40a1bc:	47c0      	blx	r8
  40a1be:	ea49 0900 	orr.w	r9, r9, r0
  40a1c2:	1c6b      	adds	r3, r5, #1
  40a1c4:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40a1c8:	d1ed      	bne.n	40a1a6 <_fwalk_reent+0x1a>
  40a1ca:	683f      	ldr	r7, [r7, #0]
  40a1cc:	2f00      	cmp	r7, #0
  40a1ce:	d1e6      	bne.n	40a19e <_fwalk_reent+0x12>
  40a1d0:	4648      	mov	r0, r9
  40a1d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a1d6:	46b9      	mov	r9, r7
  40a1d8:	4648      	mov	r0, r9
  40a1da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a1de:	bf00      	nop

0040a1e0 <_localeconv_r>:
  40a1e0:	4a04      	ldr	r2, [pc, #16]	; (40a1f4 <_localeconv_r+0x14>)
  40a1e2:	4b05      	ldr	r3, [pc, #20]	; (40a1f8 <_localeconv_r+0x18>)
  40a1e4:	6812      	ldr	r2, [r2, #0]
  40a1e6:	6b50      	ldr	r0, [r2, #52]	; 0x34
  40a1e8:	2800      	cmp	r0, #0
  40a1ea:	bf08      	it	eq
  40a1ec:	4618      	moveq	r0, r3
  40a1ee:	30f0      	adds	r0, #240	; 0xf0
  40a1f0:	4770      	bx	lr
  40a1f2:	bf00      	nop
  40a1f4:	20400010 	.word	0x20400010
  40a1f8:	20400854 	.word	0x20400854

0040a1fc <__retarget_lock_init_recursive>:
  40a1fc:	4770      	bx	lr
  40a1fe:	bf00      	nop

0040a200 <__retarget_lock_close_recursive>:
  40a200:	4770      	bx	lr
  40a202:	bf00      	nop

0040a204 <__retarget_lock_acquire_recursive>:
  40a204:	4770      	bx	lr
  40a206:	bf00      	nop

0040a208 <__retarget_lock_release_recursive>:
  40a208:	4770      	bx	lr
  40a20a:	bf00      	nop

0040a20c <__swhatbuf_r>:
  40a20c:	b570      	push	{r4, r5, r6, lr}
  40a20e:	460c      	mov	r4, r1
  40a210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40a214:	2900      	cmp	r1, #0
  40a216:	b090      	sub	sp, #64	; 0x40
  40a218:	4615      	mov	r5, r2
  40a21a:	461e      	mov	r6, r3
  40a21c:	db14      	blt.n	40a248 <__swhatbuf_r+0x3c>
  40a21e:	aa01      	add	r2, sp, #4
  40a220:	f000 fff0 	bl	40b204 <_fstat_r>
  40a224:	2800      	cmp	r0, #0
  40a226:	db0f      	blt.n	40a248 <__swhatbuf_r+0x3c>
  40a228:	9a02      	ldr	r2, [sp, #8]
  40a22a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40a22e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40a232:	fab2 f282 	clz	r2, r2
  40a236:	0952      	lsrs	r2, r2, #5
  40a238:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40a23c:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40a240:	6032      	str	r2, [r6, #0]
  40a242:	602b      	str	r3, [r5, #0]
  40a244:	b010      	add	sp, #64	; 0x40
  40a246:	bd70      	pop	{r4, r5, r6, pc}
  40a248:	89a2      	ldrh	r2, [r4, #12]
  40a24a:	2300      	movs	r3, #0
  40a24c:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  40a250:	6033      	str	r3, [r6, #0]
  40a252:	d004      	beq.n	40a25e <__swhatbuf_r+0x52>
  40a254:	2240      	movs	r2, #64	; 0x40
  40a256:	4618      	mov	r0, r3
  40a258:	602a      	str	r2, [r5, #0]
  40a25a:	b010      	add	sp, #64	; 0x40
  40a25c:	bd70      	pop	{r4, r5, r6, pc}
  40a25e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40a262:	602b      	str	r3, [r5, #0]
  40a264:	b010      	add	sp, #64	; 0x40
  40a266:	bd70      	pop	{r4, r5, r6, pc}

0040a268 <__smakebuf_r>:
  40a268:	898a      	ldrh	r2, [r1, #12]
  40a26a:	0792      	lsls	r2, r2, #30
  40a26c:	460b      	mov	r3, r1
  40a26e:	d506      	bpl.n	40a27e <__smakebuf_r+0x16>
  40a270:	f101 0243 	add.w	r2, r1, #67	; 0x43
  40a274:	2101      	movs	r1, #1
  40a276:	601a      	str	r2, [r3, #0]
  40a278:	611a      	str	r2, [r3, #16]
  40a27a:	6159      	str	r1, [r3, #20]
  40a27c:	4770      	bx	lr
  40a27e:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a280:	b083      	sub	sp, #12
  40a282:	ab01      	add	r3, sp, #4
  40a284:	466a      	mov	r2, sp
  40a286:	460c      	mov	r4, r1
  40a288:	4606      	mov	r6, r0
  40a28a:	f7ff ffbf 	bl	40a20c <__swhatbuf_r>
  40a28e:	9900      	ldr	r1, [sp, #0]
  40a290:	4605      	mov	r5, r0
  40a292:	4630      	mov	r0, r6
  40a294:	f7fc faf4 	bl	406880 <_malloc_r>
  40a298:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a29c:	b1d8      	cbz	r0, 40a2d6 <__smakebuf_r+0x6e>
  40a29e:	9a01      	ldr	r2, [sp, #4]
  40a2a0:	4f15      	ldr	r7, [pc, #84]	; (40a2f8 <__smakebuf_r+0x90>)
  40a2a2:	9900      	ldr	r1, [sp, #0]
  40a2a4:	63f7      	str	r7, [r6, #60]	; 0x3c
  40a2a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40a2aa:	81a3      	strh	r3, [r4, #12]
  40a2ac:	6020      	str	r0, [r4, #0]
  40a2ae:	6120      	str	r0, [r4, #16]
  40a2b0:	6161      	str	r1, [r4, #20]
  40a2b2:	b91a      	cbnz	r2, 40a2bc <__smakebuf_r+0x54>
  40a2b4:	432b      	orrs	r3, r5
  40a2b6:	81a3      	strh	r3, [r4, #12]
  40a2b8:	b003      	add	sp, #12
  40a2ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a2bc:	4630      	mov	r0, r6
  40a2be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40a2c2:	f000 ffb3 	bl	40b22c <_isatty_r>
  40a2c6:	b1a0      	cbz	r0, 40a2f2 <__smakebuf_r+0x8a>
  40a2c8:	89a3      	ldrh	r3, [r4, #12]
  40a2ca:	f023 0303 	bic.w	r3, r3, #3
  40a2ce:	f043 0301 	orr.w	r3, r3, #1
  40a2d2:	b21b      	sxth	r3, r3
  40a2d4:	e7ee      	b.n	40a2b4 <__smakebuf_r+0x4c>
  40a2d6:	059a      	lsls	r2, r3, #22
  40a2d8:	d4ee      	bmi.n	40a2b8 <__smakebuf_r+0x50>
  40a2da:	f023 0303 	bic.w	r3, r3, #3
  40a2de:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40a2e2:	f043 0302 	orr.w	r3, r3, #2
  40a2e6:	2101      	movs	r1, #1
  40a2e8:	81a3      	strh	r3, [r4, #12]
  40a2ea:	6022      	str	r2, [r4, #0]
  40a2ec:	6122      	str	r2, [r4, #16]
  40a2ee:	6161      	str	r1, [r4, #20]
  40a2f0:	e7e2      	b.n	40a2b8 <__smakebuf_r+0x50>
  40a2f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a2f6:	e7dd      	b.n	40a2b4 <__smakebuf_r+0x4c>
  40a2f8:	00409b31 	.word	0x00409b31
  40a2fc:	00000000 	.word	0x00000000

0040a300 <memchr>:
  40a300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40a304:	2a10      	cmp	r2, #16
  40a306:	db2b      	blt.n	40a360 <memchr+0x60>
  40a308:	f010 0f07 	tst.w	r0, #7
  40a30c:	d008      	beq.n	40a320 <memchr+0x20>
  40a30e:	f810 3b01 	ldrb.w	r3, [r0], #1
  40a312:	3a01      	subs	r2, #1
  40a314:	428b      	cmp	r3, r1
  40a316:	d02d      	beq.n	40a374 <memchr+0x74>
  40a318:	f010 0f07 	tst.w	r0, #7
  40a31c:	b342      	cbz	r2, 40a370 <memchr+0x70>
  40a31e:	d1f6      	bne.n	40a30e <memchr+0xe>
  40a320:	b4f0      	push	{r4, r5, r6, r7}
  40a322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  40a326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40a32a:	f022 0407 	bic.w	r4, r2, #7
  40a32e:	f07f 0700 	mvns.w	r7, #0
  40a332:	2300      	movs	r3, #0
  40a334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  40a338:	3c08      	subs	r4, #8
  40a33a:	ea85 0501 	eor.w	r5, r5, r1
  40a33e:	ea86 0601 	eor.w	r6, r6, r1
  40a342:	fa85 f547 	uadd8	r5, r5, r7
  40a346:	faa3 f587 	sel	r5, r3, r7
  40a34a:	fa86 f647 	uadd8	r6, r6, r7
  40a34e:	faa5 f687 	sel	r6, r5, r7
  40a352:	b98e      	cbnz	r6, 40a378 <memchr+0x78>
  40a354:	d1ee      	bne.n	40a334 <memchr+0x34>
  40a356:	bcf0      	pop	{r4, r5, r6, r7}
  40a358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40a35c:	f002 0207 	and.w	r2, r2, #7
  40a360:	b132      	cbz	r2, 40a370 <memchr+0x70>
  40a362:	f810 3b01 	ldrb.w	r3, [r0], #1
  40a366:	3a01      	subs	r2, #1
  40a368:	ea83 0301 	eor.w	r3, r3, r1
  40a36c:	b113      	cbz	r3, 40a374 <memchr+0x74>
  40a36e:	d1f8      	bne.n	40a362 <memchr+0x62>
  40a370:	2000      	movs	r0, #0
  40a372:	4770      	bx	lr
  40a374:	3801      	subs	r0, #1
  40a376:	4770      	bx	lr
  40a378:	2d00      	cmp	r5, #0
  40a37a:	bf06      	itte	eq
  40a37c:	4635      	moveq	r5, r6
  40a37e:	3803      	subeq	r0, #3
  40a380:	3807      	subne	r0, #7
  40a382:	f015 0f01 	tst.w	r5, #1
  40a386:	d107      	bne.n	40a398 <memchr+0x98>
  40a388:	3001      	adds	r0, #1
  40a38a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40a38e:	bf02      	ittt	eq
  40a390:	3001      	addeq	r0, #1
  40a392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  40a396:	3001      	addeq	r0, #1
  40a398:	bcf0      	pop	{r4, r5, r6, r7}
  40a39a:	3801      	subs	r0, #1
  40a39c:	4770      	bx	lr
  40a39e:	bf00      	nop

0040a3a0 <memmove>:
  40a3a0:	4288      	cmp	r0, r1
  40a3a2:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a3a4:	d90d      	bls.n	40a3c2 <memmove+0x22>
  40a3a6:	188b      	adds	r3, r1, r2
  40a3a8:	4298      	cmp	r0, r3
  40a3aa:	d20a      	bcs.n	40a3c2 <memmove+0x22>
  40a3ac:	1884      	adds	r4, r0, r2
  40a3ae:	2a00      	cmp	r2, #0
  40a3b0:	d051      	beq.n	40a456 <memmove+0xb6>
  40a3b2:	4622      	mov	r2, r4
  40a3b4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40a3b8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40a3bc:	4299      	cmp	r1, r3
  40a3be:	d1f9      	bne.n	40a3b4 <memmove+0x14>
  40a3c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a3c2:	2a0f      	cmp	r2, #15
  40a3c4:	d948      	bls.n	40a458 <memmove+0xb8>
  40a3c6:	ea41 0300 	orr.w	r3, r1, r0
  40a3ca:	079b      	lsls	r3, r3, #30
  40a3cc:	d146      	bne.n	40a45c <memmove+0xbc>
  40a3ce:	f100 0410 	add.w	r4, r0, #16
  40a3d2:	f101 0310 	add.w	r3, r1, #16
  40a3d6:	4615      	mov	r5, r2
  40a3d8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40a3dc:	f844 6c10 	str.w	r6, [r4, #-16]
  40a3e0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40a3e4:	f844 6c0c 	str.w	r6, [r4, #-12]
  40a3e8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40a3ec:	f844 6c08 	str.w	r6, [r4, #-8]
  40a3f0:	3d10      	subs	r5, #16
  40a3f2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40a3f6:	f844 6c04 	str.w	r6, [r4, #-4]
  40a3fa:	2d0f      	cmp	r5, #15
  40a3fc:	f103 0310 	add.w	r3, r3, #16
  40a400:	f104 0410 	add.w	r4, r4, #16
  40a404:	d8e8      	bhi.n	40a3d8 <memmove+0x38>
  40a406:	f1a2 0310 	sub.w	r3, r2, #16
  40a40a:	f023 030f 	bic.w	r3, r3, #15
  40a40e:	f002 0e0f 	and.w	lr, r2, #15
  40a412:	3310      	adds	r3, #16
  40a414:	f1be 0f03 	cmp.w	lr, #3
  40a418:	4419      	add	r1, r3
  40a41a:	4403      	add	r3, r0
  40a41c:	d921      	bls.n	40a462 <memmove+0xc2>
  40a41e:	1f1e      	subs	r6, r3, #4
  40a420:	460d      	mov	r5, r1
  40a422:	4674      	mov	r4, lr
  40a424:	3c04      	subs	r4, #4
  40a426:	f855 7b04 	ldr.w	r7, [r5], #4
  40a42a:	f846 7f04 	str.w	r7, [r6, #4]!
  40a42e:	2c03      	cmp	r4, #3
  40a430:	d8f8      	bhi.n	40a424 <memmove+0x84>
  40a432:	f1ae 0404 	sub.w	r4, lr, #4
  40a436:	f024 0403 	bic.w	r4, r4, #3
  40a43a:	3404      	adds	r4, #4
  40a43c:	4421      	add	r1, r4
  40a43e:	4423      	add	r3, r4
  40a440:	f002 0203 	and.w	r2, r2, #3
  40a444:	b162      	cbz	r2, 40a460 <memmove+0xc0>
  40a446:	3b01      	subs	r3, #1
  40a448:	440a      	add	r2, r1
  40a44a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40a44e:	f803 4f01 	strb.w	r4, [r3, #1]!
  40a452:	428a      	cmp	r2, r1
  40a454:	d1f9      	bne.n	40a44a <memmove+0xaa>
  40a456:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a458:	4603      	mov	r3, r0
  40a45a:	e7f3      	b.n	40a444 <memmove+0xa4>
  40a45c:	4603      	mov	r3, r0
  40a45e:	e7f2      	b.n	40a446 <memmove+0xa6>
  40a460:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a462:	4672      	mov	r2, lr
  40a464:	e7ee      	b.n	40a444 <memmove+0xa4>
  40a466:	bf00      	nop

0040a468 <_Balloc>:
  40a468:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40a46a:	b570      	push	{r4, r5, r6, lr}
  40a46c:	4605      	mov	r5, r0
  40a46e:	460c      	mov	r4, r1
  40a470:	b14b      	cbz	r3, 40a486 <_Balloc+0x1e>
  40a472:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  40a476:	b180      	cbz	r0, 40a49a <_Balloc+0x32>
  40a478:	6802      	ldr	r2, [r0, #0]
  40a47a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40a47e:	2300      	movs	r3, #0
  40a480:	6103      	str	r3, [r0, #16]
  40a482:	60c3      	str	r3, [r0, #12]
  40a484:	bd70      	pop	{r4, r5, r6, pc}
  40a486:	2221      	movs	r2, #33	; 0x21
  40a488:	2104      	movs	r1, #4
  40a48a:	f000 fd93 	bl	40afb4 <_calloc_r>
  40a48e:	64e8      	str	r0, [r5, #76]	; 0x4c
  40a490:	4603      	mov	r3, r0
  40a492:	2800      	cmp	r0, #0
  40a494:	d1ed      	bne.n	40a472 <_Balloc+0xa>
  40a496:	2000      	movs	r0, #0
  40a498:	bd70      	pop	{r4, r5, r6, pc}
  40a49a:	2101      	movs	r1, #1
  40a49c:	fa01 f604 	lsl.w	r6, r1, r4
  40a4a0:	1d72      	adds	r2, r6, #5
  40a4a2:	4628      	mov	r0, r5
  40a4a4:	0092      	lsls	r2, r2, #2
  40a4a6:	f000 fd85 	bl	40afb4 <_calloc_r>
  40a4aa:	2800      	cmp	r0, #0
  40a4ac:	d0f3      	beq.n	40a496 <_Balloc+0x2e>
  40a4ae:	6044      	str	r4, [r0, #4]
  40a4b0:	6086      	str	r6, [r0, #8]
  40a4b2:	e7e4      	b.n	40a47e <_Balloc+0x16>

0040a4b4 <_Bfree>:
  40a4b4:	b131      	cbz	r1, 40a4c4 <_Bfree+0x10>
  40a4b6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40a4b8:	684a      	ldr	r2, [r1, #4]
  40a4ba:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40a4be:	6008      	str	r0, [r1, #0]
  40a4c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40a4c4:	4770      	bx	lr
  40a4c6:	bf00      	nop

0040a4c8 <__multadd>:
  40a4c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a4ca:	690c      	ldr	r4, [r1, #16]
  40a4cc:	b083      	sub	sp, #12
  40a4ce:	460d      	mov	r5, r1
  40a4d0:	4606      	mov	r6, r0
  40a4d2:	f101 0e14 	add.w	lr, r1, #20
  40a4d6:	2700      	movs	r7, #0
  40a4d8:	f8de 0000 	ldr.w	r0, [lr]
  40a4dc:	b281      	uxth	r1, r0
  40a4de:	fb02 3301 	mla	r3, r2, r1, r3
  40a4e2:	0c01      	lsrs	r1, r0, #16
  40a4e4:	0c18      	lsrs	r0, r3, #16
  40a4e6:	fb02 0101 	mla	r1, r2, r1, r0
  40a4ea:	b29b      	uxth	r3, r3
  40a4ec:	3701      	adds	r7, #1
  40a4ee:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  40a4f2:	42bc      	cmp	r4, r7
  40a4f4:	f84e 3b04 	str.w	r3, [lr], #4
  40a4f8:	ea4f 4311 	mov.w	r3, r1, lsr #16
  40a4fc:	dcec      	bgt.n	40a4d8 <__multadd+0x10>
  40a4fe:	b13b      	cbz	r3, 40a510 <__multadd+0x48>
  40a500:	68aa      	ldr	r2, [r5, #8]
  40a502:	4294      	cmp	r4, r2
  40a504:	da07      	bge.n	40a516 <__multadd+0x4e>
  40a506:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40a50a:	3401      	adds	r4, #1
  40a50c:	6153      	str	r3, [r2, #20]
  40a50e:	612c      	str	r4, [r5, #16]
  40a510:	4628      	mov	r0, r5
  40a512:	b003      	add	sp, #12
  40a514:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a516:	6869      	ldr	r1, [r5, #4]
  40a518:	9301      	str	r3, [sp, #4]
  40a51a:	3101      	adds	r1, #1
  40a51c:	4630      	mov	r0, r6
  40a51e:	f7ff ffa3 	bl	40a468 <_Balloc>
  40a522:	692a      	ldr	r2, [r5, #16]
  40a524:	3202      	adds	r2, #2
  40a526:	f105 010c 	add.w	r1, r5, #12
  40a52a:	4607      	mov	r7, r0
  40a52c:	0092      	lsls	r2, r2, #2
  40a52e:	300c      	adds	r0, #12
  40a530:	f7fc fc56 	bl	406de0 <memcpy>
  40a534:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40a536:	6869      	ldr	r1, [r5, #4]
  40a538:	9b01      	ldr	r3, [sp, #4]
  40a53a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40a53e:	6028      	str	r0, [r5, #0]
  40a540:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  40a544:	463d      	mov	r5, r7
  40a546:	e7de      	b.n	40a506 <__multadd+0x3e>

0040a548 <__hi0bits>:
  40a548:	0c02      	lsrs	r2, r0, #16
  40a54a:	0412      	lsls	r2, r2, #16
  40a54c:	4603      	mov	r3, r0
  40a54e:	b9b2      	cbnz	r2, 40a57e <__hi0bits+0x36>
  40a550:	0403      	lsls	r3, r0, #16
  40a552:	2010      	movs	r0, #16
  40a554:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40a558:	bf04      	itt	eq
  40a55a:	021b      	lsleq	r3, r3, #8
  40a55c:	3008      	addeq	r0, #8
  40a55e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  40a562:	bf04      	itt	eq
  40a564:	011b      	lsleq	r3, r3, #4
  40a566:	3004      	addeq	r0, #4
  40a568:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  40a56c:	bf04      	itt	eq
  40a56e:	009b      	lsleq	r3, r3, #2
  40a570:	3002      	addeq	r0, #2
  40a572:	2b00      	cmp	r3, #0
  40a574:	db02      	blt.n	40a57c <__hi0bits+0x34>
  40a576:	005b      	lsls	r3, r3, #1
  40a578:	d403      	bmi.n	40a582 <__hi0bits+0x3a>
  40a57a:	2020      	movs	r0, #32
  40a57c:	4770      	bx	lr
  40a57e:	2000      	movs	r0, #0
  40a580:	e7e8      	b.n	40a554 <__hi0bits+0xc>
  40a582:	3001      	adds	r0, #1
  40a584:	4770      	bx	lr
  40a586:	bf00      	nop

0040a588 <__lo0bits>:
  40a588:	6803      	ldr	r3, [r0, #0]
  40a58a:	f013 0207 	ands.w	r2, r3, #7
  40a58e:	4601      	mov	r1, r0
  40a590:	d007      	beq.n	40a5a2 <__lo0bits+0x1a>
  40a592:	07da      	lsls	r2, r3, #31
  40a594:	d421      	bmi.n	40a5da <__lo0bits+0x52>
  40a596:	0798      	lsls	r0, r3, #30
  40a598:	d421      	bmi.n	40a5de <__lo0bits+0x56>
  40a59a:	089b      	lsrs	r3, r3, #2
  40a59c:	600b      	str	r3, [r1, #0]
  40a59e:	2002      	movs	r0, #2
  40a5a0:	4770      	bx	lr
  40a5a2:	b298      	uxth	r0, r3
  40a5a4:	b198      	cbz	r0, 40a5ce <__lo0bits+0x46>
  40a5a6:	4610      	mov	r0, r2
  40a5a8:	f013 0fff 	tst.w	r3, #255	; 0xff
  40a5ac:	bf04      	itt	eq
  40a5ae:	0a1b      	lsreq	r3, r3, #8
  40a5b0:	3008      	addeq	r0, #8
  40a5b2:	071a      	lsls	r2, r3, #28
  40a5b4:	bf04      	itt	eq
  40a5b6:	091b      	lsreq	r3, r3, #4
  40a5b8:	3004      	addeq	r0, #4
  40a5ba:	079a      	lsls	r2, r3, #30
  40a5bc:	bf04      	itt	eq
  40a5be:	089b      	lsreq	r3, r3, #2
  40a5c0:	3002      	addeq	r0, #2
  40a5c2:	07da      	lsls	r2, r3, #31
  40a5c4:	d407      	bmi.n	40a5d6 <__lo0bits+0x4e>
  40a5c6:	085b      	lsrs	r3, r3, #1
  40a5c8:	d104      	bne.n	40a5d4 <__lo0bits+0x4c>
  40a5ca:	2020      	movs	r0, #32
  40a5cc:	4770      	bx	lr
  40a5ce:	0c1b      	lsrs	r3, r3, #16
  40a5d0:	2010      	movs	r0, #16
  40a5d2:	e7e9      	b.n	40a5a8 <__lo0bits+0x20>
  40a5d4:	3001      	adds	r0, #1
  40a5d6:	600b      	str	r3, [r1, #0]
  40a5d8:	4770      	bx	lr
  40a5da:	2000      	movs	r0, #0
  40a5dc:	4770      	bx	lr
  40a5de:	085b      	lsrs	r3, r3, #1
  40a5e0:	600b      	str	r3, [r1, #0]
  40a5e2:	2001      	movs	r0, #1
  40a5e4:	4770      	bx	lr
  40a5e6:	bf00      	nop

0040a5e8 <__i2b>:
  40a5e8:	b510      	push	{r4, lr}
  40a5ea:	460c      	mov	r4, r1
  40a5ec:	2101      	movs	r1, #1
  40a5ee:	f7ff ff3b 	bl	40a468 <_Balloc>
  40a5f2:	2201      	movs	r2, #1
  40a5f4:	6144      	str	r4, [r0, #20]
  40a5f6:	6102      	str	r2, [r0, #16]
  40a5f8:	bd10      	pop	{r4, pc}
  40a5fa:	bf00      	nop

0040a5fc <__multiply>:
  40a5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a600:	690c      	ldr	r4, [r1, #16]
  40a602:	6915      	ldr	r5, [r2, #16]
  40a604:	42ac      	cmp	r4, r5
  40a606:	b083      	sub	sp, #12
  40a608:	468b      	mov	fp, r1
  40a60a:	4616      	mov	r6, r2
  40a60c:	da04      	bge.n	40a618 <__multiply+0x1c>
  40a60e:	4622      	mov	r2, r4
  40a610:	46b3      	mov	fp, r6
  40a612:	462c      	mov	r4, r5
  40a614:	460e      	mov	r6, r1
  40a616:	4615      	mov	r5, r2
  40a618:	f8db 3008 	ldr.w	r3, [fp, #8]
  40a61c:	f8db 1004 	ldr.w	r1, [fp, #4]
  40a620:	eb04 0805 	add.w	r8, r4, r5
  40a624:	4598      	cmp	r8, r3
  40a626:	bfc8      	it	gt
  40a628:	3101      	addgt	r1, #1
  40a62a:	f7ff ff1d 	bl	40a468 <_Balloc>
  40a62e:	f100 0914 	add.w	r9, r0, #20
  40a632:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  40a636:	45d1      	cmp	r9, sl
  40a638:	9000      	str	r0, [sp, #0]
  40a63a:	d205      	bcs.n	40a648 <__multiply+0x4c>
  40a63c:	464b      	mov	r3, r9
  40a63e:	2100      	movs	r1, #0
  40a640:	f843 1b04 	str.w	r1, [r3], #4
  40a644:	459a      	cmp	sl, r3
  40a646:	d8fb      	bhi.n	40a640 <__multiply+0x44>
  40a648:	f106 0c14 	add.w	ip, r6, #20
  40a64c:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  40a650:	f10b 0b14 	add.w	fp, fp, #20
  40a654:	459c      	cmp	ip, r3
  40a656:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40a65a:	d24c      	bcs.n	40a6f6 <__multiply+0xfa>
  40a65c:	f8cd a004 	str.w	sl, [sp, #4]
  40a660:	469a      	mov	sl, r3
  40a662:	f8dc 5000 	ldr.w	r5, [ip]
  40a666:	b2af      	uxth	r7, r5
  40a668:	b1ef      	cbz	r7, 40a6a6 <__multiply+0xaa>
  40a66a:	2100      	movs	r1, #0
  40a66c:	464d      	mov	r5, r9
  40a66e:	465e      	mov	r6, fp
  40a670:	460c      	mov	r4, r1
  40a672:	f856 2b04 	ldr.w	r2, [r6], #4
  40a676:	6828      	ldr	r0, [r5, #0]
  40a678:	b293      	uxth	r3, r2
  40a67a:	b281      	uxth	r1, r0
  40a67c:	fb07 1303 	mla	r3, r7, r3, r1
  40a680:	0c12      	lsrs	r2, r2, #16
  40a682:	0c01      	lsrs	r1, r0, #16
  40a684:	4423      	add	r3, r4
  40a686:	fb07 1102 	mla	r1, r7, r2, r1
  40a68a:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  40a68e:	b29b      	uxth	r3, r3
  40a690:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  40a694:	45b6      	cmp	lr, r6
  40a696:	f845 3b04 	str.w	r3, [r5], #4
  40a69a:	ea4f 4411 	mov.w	r4, r1, lsr #16
  40a69e:	d8e8      	bhi.n	40a672 <__multiply+0x76>
  40a6a0:	602c      	str	r4, [r5, #0]
  40a6a2:	f8dc 5000 	ldr.w	r5, [ip]
  40a6a6:	0c2d      	lsrs	r5, r5, #16
  40a6a8:	d01d      	beq.n	40a6e6 <__multiply+0xea>
  40a6aa:	f8d9 3000 	ldr.w	r3, [r9]
  40a6ae:	4648      	mov	r0, r9
  40a6b0:	461c      	mov	r4, r3
  40a6b2:	4659      	mov	r1, fp
  40a6b4:	2200      	movs	r2, #0
  40a6b6:	880e      	ldrh	r6, [r1, #0]
  40a6b8:	0c24      	lsrs	r4, r4, #16
  40a6ba:	fb05 4406 	mla	r4, r5, r6, r4
  40a6be:	4422      	add	r2, r4
  40a6c0:	b29b      	uxth	r3, r3
  40a6c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40a6c6:	f840 3b04 	str.w	r3, [r0], #4
  40a6ca:	f851 3b04 	ldr.w	r3, [r1], #4
  40a6ce:	6804      	ldr	r4, [r0, #0]
  40a6d0:	0c1b      	lsrs	r3, r3, #16
  40a6d2:	b2a6      	uxth	r6, r4
  40a6d4:	fb05 6303 	mla	r3, r5, r3, r6
  40a6d8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  40a6dc:	458e      	cmp	lr, r1
  40a6de:	ea4f 4213 	mov.w	r2, r3, lsr #16
  40a6e2:	d8e8      	bhi.n	40a6b6 <__multiply+0xba>
  40a6e4:	6003      	str	r3, [r0, #0]
  40a6e6:	f10c 0c04 	add.w	ip, ip, #4
  40a6ea:	45e2      	cmp	sl, ip
  40a6ec:	f109 0904 	add.w	r9, r9, #4
  40a6f0:	d8b7      	bhi.n	40a662 <__multiply+0x66>
  40a6f2:	f8dd a004 	ldr.w	sl, [sp, #4]
  40a6f6:	f1b8 0f00 	cmp.w	r8, #0
  40a6fa:	dd0b      	ble.n	40a714 <__multiply+0x118>
  40a6fc:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  40a700:	f1aa 0a04 	sub.w	sl, sl, #4
  40a704:	b11b      	cbz	r3, 40a70e <__multiply+0x112>
  40a706:	e005      	b.n	40a714 <__multiply+0x118>
  40a708:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  40a70c:	b913      	cbnz	r3, 40a714 <__multiply+0x118>
  40a70e:	f1b8 0801 	subs.w	r8, r8, #1
  40a712:	d1f9      	bne.n	40a708 <__multiply+0x10c>
  40a714:	9800      	ldr	r0, [sp, #0]
  40a716:	f8c0 8010 	str.w	r8, [r0, #16]
  40a71a:	b003      	add	sp, #12
  40a71c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040a720 <__pow5mult>:
  40a720:	f012 0303 	ands.w	r3, r2, #3
  40a724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a728:	4614      	mov	r4, r2
  40a72a:	4607      	mov	r7, r0
  40a72c:	d12e      	bne.n	40a78c <__pow5mult+0x6c>
  40a72e:	460d      	mov	r5, r1
  40a730:	10a4      	asrs	r4, r4, #2
  40a732:	d01c      	beq.n	40a76e <__pow5mult+0x4e>
  40a734:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  40a736:	b396      	cbz	r6, 40a79e <__pow5mult+0x7e>
  40a738:	07e3      	lsls	r3, r4, #31
  40a73a:	f04f 0800 	mov.w	r8, #0
  40a73e:	d406      	bmi.n	40a74e <__pow5mult+0x2e>
  40a740:	1064      	asrs	r4, r4, #1
  40a742:	d014      	beq.n	40a76e <__pow5mult+0x4e>
  40a744:	6830      	ldr	r0, [r6, #0]
  40a746:	b1a8      	cbz	r0, 40a774 <__pow5mult+0x54>
  40a748:	4606      	mov	r6, r0
  40a74a:	07e3      	lsls	r3, r4, #31
  40a74c:	d5f8      	bpl.n	40a740 <__pow5mult+0x20>
  40a74e:	4632      	mov	r2, r6
  40a750:	4629      	mov	r1, r5
  40a752:	4638      	mov	r0, r7
  40a754:	f7ff ff52 	bl	40a5fc <__multiply>
  40a758:	b1b5      	cbz	r5, 40a788 <__pow5mult+0x68>
  40a75a:	686a      	ldr	r2, [r5, #4]
  40a75c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40a75e:	1064      	asrs	r4, r4, #1
  40a760:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40a764:	6029      	str	r1, [r5, #0]
  40a766:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40a76a:	4605      	mov	r5, r0
  40a76c:	d1ea      	bne.n	40a744 <__pow5mult+0x24>
  40a76e:	4628      	mov	r0, r5
  40a770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a774:	4632      	mov	r2, r6
  40a776:	4631      	mov	r1, r6
  40a778:	4638      	mov	r0, r7
  40a77a:	f7ff ff3f 	bl	40a5fc <__multiply>
  40a77e:	6030      	str	r0, [r6, #0]
  40a780:	f8c0 8000 	str.w	r8, [r0]
  40a784:	4606      	mov	r6, r0
  40a786:	e7e0      	b.n	40a74a <__pow5mult+0x2a>
  40a788:	4605      	mov	r5, r0
  40a78a:	e7d9      	b.n	40a740 <__pow5mult+0x20>
  40a78c:	1e5a      	subs	r2, r3, #1
  40a78e:	4d0b      	ldr	r5, [pc, #44]	; (40a7bc <__pow5mult+0x9c>)
  40a790:	2300      	movs	r3, #0
  40a792:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40a796:	f7ff fe97 	bl	40a4c8 <__multadd>
  40a79a:	4605      	mov	r5, r0
  40a79c:	e7c8      	b.n	40a730 <__pow5mult+0x10>
  40a79e:	2101      	movs	r1, #1
  40a7a0:	4638      	mov	r0, r7
  40a7a2:	f7ff fe61 	bl	40a468 <_Balloc>
  40a7a6:	f240 2171 	movw	r1, #625	; 0x271
  40a7aa:	2201      	movs	r2, #1
  40a7ac:	2300      	movs	r3, #0
  40a7ae:	6141      	str	r1, [r0, #20]
  40a7b0:	6102      	str	r2, [r0, #16]
  40a7b2:	4606      	mov	r6, r0
  40a7b4:	64b8      	str	r0, [r7, #72]	; 0x48
  40a7b6:	6003      	str	r3, [r0, #0]
  40a7b8:	e7be      	b.n	40a738 <__pow5mult+0x18>
  40a7ba:	bf00      	nop
  40a7bc:	0040bea8 	.word	0x0040bea8

0040a7c0 <__lshift>:
  40a7c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40a7c4:	4691      	mov	r9, r2
  40a7c6:	690a      	ldr	r2, [r1, #16]
  40a7c8:	688b      	ldr	r3, [r1, #8]
  40a7ca:	ea4f 1469 	mov.w	r4, r9, asr #5
  40a7ce:	eb04 0802 	add.w	r8, r4, r2
  40a7d2:	f108 0501 	add.w	r5, r8, #1
  40a7d6:	429d      	cmp	r5, r3
  40a7d8:	460e      	mov	r6, r1
  40a7da:	4607      	mov	r7, r0
  40a7dc:	6849      	ldr	r1, [r1, #4]
  40a7de:	dd04      	ble.n	40a7ea <__lshift+0x2a>
  40a7e0:	005b      	lsls	r3, r3, #1
  40a7e2:	429d      	cmp	r5, r3
  40a7e4:	f101 0101 	add.w	r1, r1, #1
  40a7e8:	dcfa      	bgt.n	40a7e0 <__lshift+0x20>
  40a7ea:	4638      	mov	r0, r7
  40a7ec:	f7ff fe3c 	bl	40a468 <_Balloc>
  40a7f0:	2c00      	cmp	r4, #0
  40a7f2:	f100 0314 	add.w	r3, r0, #20
  40a7f6:	dd06      	ble.n	40a806 <__lshift+0x46>
  40a7f8:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  40a7fc:	2100      	movs	r1, #0
  40a7fe:	f843 1b04 	str.w	r1, [r3], #4
  40a802:	429a      	cmp	r2, r3
  40a804:	d1fb      	bne.n	40a7fe <__lshift+0x3e>
  40a806:	6934      	ldr	r4, [r6, #16]
  40a808:	f106 0114 	add.w	r1, r6, #20
  40a80c:	f019 091f 	ands.w	r9, r9, #31
  40a810:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  40a814:	d01d      	beq.n	40a852 <__lshift+0x92>
  40a816:	f1c9 0c20 	rsb	ip, r9, #32
  40a81a:	2200      	movs	r2, #0
  40a81c:	680c      	ldr	r4, [r1, #0]
  40a81e:	fa04 f409 	lsl.w	r4, r4, r9
  40a822:	4314      	orrs	r4, r2
  40a824:	f843 4b04 	str.w	r4, [r3], #4
  40a828:	f851 2b04 	ldr.w	r2, [r1], #4
  40a82c:	458e      	cmp	lr, r1
  40a82e:	fa22 f20c 	lsr.w	r2, r2, ip
  40a832:	d8f3      	bhi.n	40a81c <__lshift+0x5c>
  40a834:	601a      	str	r2, [r3, #0]
  40a836:	b10a      	cbz	r2, 40a83c <__lshift+0x7c>
  40a838:	f108 0502 	add.w	r5, r8, #2
  40a83c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40a83e:	6872      	ldr	r2, [r6, #4]
  40a840:	3d01      	subs	r5, #1
  40a842:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40a846:	6105      	str	r5, [r0, #16]
  40a848:	6031      	str	r1, [r6, #0]
  40a84a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40a84e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a852:	3b04      	subs	r3, #4
  40a854:	f851 2b04 	ldr.w	r2, [r1], #4
  40a858:	f843 2f04 	str.w	r2, [r3, #4]!
  40a85c:	458e      	cmp	lr, r1
  40a85e:	d8f9      	bhi.n	40a854 <__lshift+0x94>
  40a860:	e7ec      	b.n	40a83c <__lshift+0x7c>
  40a862:	bf00      	nop

0040a864 <__mcmp>:
  40a864:	b430      	push	{r4, r5}
  40a866:	690b      	ldr	r3, [r1, #16]
  40a868:	4605      	mov	r5, r0
  40a86a:	6900      	ldr	r0, [r0, #16]
  40a86c:	1ac0      	subs	r0, r0, r3
  40a86e:	d10f      	bne.n	40a890 <__mcmp+0x2c>
  40a870:	009b      	lsls	r3, r3, #2
  40a872:	3514      	adds	r5, #20
  40a874:	3114      	adds	r1, #20
  40a876:	4419      	add	r1, r3
  40a878:	442b      	add	r3, r5
  40a87a:	e001      	b.n	40a880 <__mcmp+0x1c>
  40a87c:	429d      	cmp	r5, r3
  40a87e:	d207      	bcs.n	40a890 <__mcmp+0x2c>
  40a880:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40a884:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40a888:	4294      	cmp	r4, r2
  40a88a:	d0f7      	beq.n	40a87c <__mcmp+0x18>
  40a88c:	d302      	bcc.n	40a894 <__mcmp+0x30>
  40a88e:	2001      	movs	r0, #1
  40a890:	bc30      	pop	{r4, r5}
  40a892:	4770      	bx	lr
  40a894:	f04f 30ff 	mov.w	r0, #4294967295
  40a898:	e7fa      	b.n	40a890 <__mcmp+0x2c>
  40a89a:	bf00      	nop

0040a89c <__mdiff>:
  40a89c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a8a0:	690f      	ldr	r7, [r1, #16]
  40a8a2:	460e      	mov	r6, r1
  40a8a4:	6911      	ldr	r1, [r2, #16]
  40a8a6:	1a7f      	subs	r7, r7, r1
  40a8a8:	2f00      	cmp	r7, #0
  40a8aa:	4690      	mov	r8, r2
  40a8ac:	d117      	bne.n	40a8de <__mdiff+0x42>
  40a8ae:	0089      	lsls	r1, r1, #2
  40a8b0:	f106 0514 	add.w	r5, r6, #20
  40a8b4:	f102 0e14 	add.w	lr, r2, #20
  40a8b8:	186b      	adds	r3, r5, r1
  40a8ba:	4471      	add	r1, lr
  40a8bc:	e001      	b.n	40a8c2 <__mdiff+0x26>
  40a8be:	429d      	cmp	r5, r3
  40a8c0:	d25c      	bcs.n	40a97c <__mdiff+0xe0>
  40a8c2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  40a8c6:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40a8ca:	42a2      	cmp	r2, r4
  40a8cc:	d0f7      	beq.n	40a8be <__mdiff+0x22>
  40a8ce:	d25e      	bcs.n	40a98e <__mdiff+0xf2>
  40a8d0:	4633      	mov	r3, r6
  40a8d2:	462c      	mov	r4, r5
  40a8d4:	4646      	mov	r6, r8
  40a8d6:	4675      	mov	r5, lr
  40a8d8:	4698      	mov	r8, r3
  40a8da:	2701      	movs	r7, #1
  40a8dc:	e005      	b.n	40a8ea <__mdiff+0x4e>
  40a8de:	db58      	blt.n	40a992 <__mdiff+0xf6>
  40a8e0:	f106 0514 	add.w	r5, r6, #20
  40a8e4:	f108 0414 	add.w	r4, r8, #20
  40a8e8:	2700      	movs	r7, #0
  40a8ea:	6871      	ldr	r1, [r6, #4]
  40a8ec:	f7ff fdbc 	bl	40a468 <_Balloc>
  40a8f0:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40a8f4:	6936      	ldr	r6, [r6, #16]
  40a8f6:	60c7      	str	r7, [r0, #12]
  40a8f8:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  40a8fc:	46a6      	mov	lr, r4
  40a8fe:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  40a902:	f100 0414 	add.w	r4, r0, #20
  40a906:	2300      	movs	r3, #0
  40a908:	f85e 1b04 	ldr.w	r1, [lr], #4
  40a90c:	f855 8b04 	ldr.w	r8, [r5], #4
  40a910:	b28a      	uxth	r2, r1
  40a912:	fa13 f388 	uxtah	r3, r3, r8
  40a916:	0c09      	lsrs	r1, r1, #16
  40a918:	1a9a      	subs	r2, r3, r2
  40a91a:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  40a91e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40a922:	b292      	uxth	r2, r2
  40a924:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40a928:	45f4      	cmp	ip, lr
  40a92a:	f844 2b04 	str.w	r2, [r4], #4
  40a92e:	ea4f 4323 	mov.w	r3, r3, asr #16
  40a932:	d8e9      	bhi.n	40a908 <__mdiff+0x6c>
  40a934:	42af      	cmp	r7, r5
  40a936:	d917      	bls.n	40a968 <__mdiff+0xcc>
  40a938:	46a4      	mov	ip, r4
  40a93a:	46ae      	mov	lr, r5
  40a93c:	f85e 2b04 	ldr.w	r2, [lr], #4
  40a940:	fa13 f382 	uxtah	r3, r3, r2
  40a944:	1419      	asrs	r1, r3, #16
  40a946:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  40a94a:	b29b      	uxth	r3, r3
  40a94c:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  40a950:	4577      	cmp	r7, lr
  40a952:	f84c 2b04 	str.w	r2, [ip], #4
  40a956:	ea4f 4321 	mov.w	r3, r1, asr #16
  40a95a:	d8ef      	bhi.n	40a93c <__mdiff+0xa0>
  40a95c:	43ed      	mvns	r5, r5
  40a95e:	442f      	add	r7, r5
  40a960:	f027 0703 	bic.w	r7, r7, #3
  40a964:	3704      	adds	r7, #4
  40a966:	443c      	add	r4, r7
  40a968:	3c04      	subs	r4, #4
  40a96a:	b922      	cbnz	r2, 40a976 <__mdiff+0xda>
  40a96c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  40a970:	3e01      	subs	r6, #1
  40a972:	2b00      	cmp	r3, #0
  40a974:	d0fa      	beq.n	40a96c <__mdiff+0xd0>
  40a976:	6106      	str	r6, [r0, #16]
  40a978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a97c:	2100      	movs	r1, #0
  40a97e:	f7ff fd73 	bl	40a468 <_Balloc>
  40a982:	2201      	movs	r2, #1
  40a984:	2300      	movs	r3, #0
  40a986:	6102      	str	r2, [r0, #16]
  40a988:	6143      	str	r3, [r0, #20]
  40a98a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a98e:	4674      	mov	r4, lr
  40a990:	e7ab      	b.n	40a8ea <__mdiff+0x4e>
  40a992:	4633      	mov	r3, r6
  40a994:	f106 0414 	add.w	r4, r6, #20
  40a998:	f102 0514 	add.w	r5, r2, #20
  40a99c:	4616      	mov	r6, r2
  40a99e:	2701      	movs	r7, #1
  40a9a0:	4698      	mov	r8, r3
  40a9a2:	e7a2      	b.n	40a8ea <__mdiff+0x4e>

0040a9a4 <__d2b>:
  40a9a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a9a8:	b082      	sub	sp, #8
  40a9aa:	2101      	movs	r1, #1
  40a9ac:	461c      	mov	r4, r3
  40a9ae:	f3c3 570a 	ubfx	r7, r3, #20, #11
  40a9b2:	4615      	mov	r5, r2
  40a9b4:	9e08      	ldr	r6, [sp, #32]
  40a9b6:	f7ff fd57 	bl	40a468 <_Balloc>
  40a9ba:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40a9be:	4680      	mov	r8, r0
  40a9c0:	b10f      	cbz	r7, 40a9c6 <__d2b+0x22>
  40a9c2:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40a9c6:	9401      	str	r4, [sp, #4]
  40a9c8:	b31d      	cbz	r5, 40aa12 <__d2b+0x6e>
  40a9ca:	a802      	add	r0, sp, #8
  40a9cc:	f840 5d08 	str.w	r5, [r0, #-8]!
  40a9d0:	f7ff fdda 	bl	40a588 <__lo0bits>
  40a9d4:	2800      	cmp	r0, #0
  40a9d6:	d134      	bne.n	40aa42 <__d2b+0x9e>
  40a9d8:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40a9dc:	f8c8 2014 	str.w	r2, [r8, #20]
  40a9e0:	2b00      	cmp	r3, #0
  40a9e2:	bf0c      	ite	eq
  40a9e4:	2101      	moveq	r1, #1
  40a9e6:	2102      	movne	r1, #2
  40a9e8:	f8c8 3018 	str.w	r3, [r8, #24]
  40a9ec:	f8c8 1010 	str.w	r1, [r8, #16]
  40a9f0:	b9df      	cbnz	r7, 40aa2a <__d2b+0x86>
  40a9f2:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  40a9f6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40a9fa:	6030      	str	r0, [r6, #0]
  40a9fc:	6918      	ldr	r0, [r3, #16]
  40a9fe:	f7ff fda3 	bl	40a548 <__hi0bits>
  40aa02:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40aa04:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40aa08:	6018      	str	r0, [r3, #0]
  40aa0a:	4640      	mov	r0, r8
  40aa0c:	b002      	add	sp, #8
  40aa0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40aa12:	a801      	add	r0, sp, #4
  40aa14:	f7ff fdb8 	bl	40a588 <__lo0bits>
  40aa18:	9b01      	ldr	r3, [sp, #4]
  40aa1a:	f8c8 3014 	str.w	r3, [r8, #20]
  40aa1e:	2101      	movs	r1, #1
  40aa20:	3020      	adds	r0, #32
  40aa22:	f8c8 1010 	str.w	r1, [r8, #16]
  40aa26:	2f00      	cmp	r7, #0
  40aa28:	d0e3      	beq.n	40a9f2 <__d2b+0x4e>
  40aa2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40aa2c:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  40aa30:	4407      	add	r7, r0
  40aa32:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40aa36:	6037      	str	r7, [r6, #0]
  40aa38:	6018      	str	r0, [r3, #0]
  40aa3a:	4640      	mov	r0, r8
  40aa3c:	b002      	add	sp, #8
  40aa3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40aa42:	e89d 000a 	ldmia.w	sp, {r1, r3}
  40aa46:	f1c0 0220 	rsb	r2, r0, #32
  40aa4a:	fa03 f202 	lsl.w	r2, r3, r2
  40aa4e:	430a      	orrs	r2, r1
  40aa50:	40c3      	lsrs	r3, r0
  40aa52:	9301      	str	r3, [sp, #4]
  40aa54:	f8c8 2014 	str.w	r2, [r8, #20]
  40aa58:	e7c2      	b.n	40a9e0 <__d2b+0x3c>
  40aa5a:	bf00      	nop

0040aa5c <_realloc_r>:
  40aa5c:	2900      	cmp	r1, #0
  40aa5e:	f000 8095 	beq.w	40ab8c <_realloc_r+0x130>
  40aa62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40aa66:	460d      	mov	r5, r1
  40aa68:	4616      	mov	r6, r2
  40aa6a:	b083      	sub	sp, #12
  40aa6c:	4680      	mov	r8, r0
  40aa6e:	f106 070b 	add.w	r7, r6, #11
  40aa72:	f7fc fa9d 	bl	406fb0 <__malloc_lock>
  40aa76:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40aa7a:	2f16      	cmp	r7, #22
  40aa7c:	f02e 0403 	bic.w	r4, lr, #3
  40aa80:	f1a5 0908 	sub.w	r9, r5, #8
  40aa84:	d83c      	bhi.n	40ab00 <_realloc_r+0xa4>
  40aa86:	2210      	movs	r2, #16
  40aa88:	4617      	mov	r7, r2
  40aa8a:	42be      	cmp	r6, r7
  40aa8c:	d83d      	bhi.n	40ab0a <_realloc_r+0xae>
  40aa8e:	4294      	cmp	r4, r2
  40aa90:	da43      	bge.n	40ab1a <_realloc_r+0xbe>
  40aa92:	4bc4      	ldr	r3, [pc, #784]	; (40ada4 <_realloc_r+0x348>)
  40aa94:	6899      	ldr	r1, [r3, #8]
  40aa96:	eb09 0004 	add.w	r0, r9, r4
  40aa9a:	4288      	cmp	r0, r1
  40aa9c:	f000 80b4 	beq.w	40ac08 <_realloc_r+0x1ac>
  40aaa0:	6843      	ldr	r3, [r0, #4]
  40aaa2:	f023 0101 	bic.w	r1, r3, #1
  40aaa6:	4401      	add	r1, r0
  40aaa8:	6849      	ldr	r1, [r1, #4]
  40aaaa:	07c9      	lsls	r1, r1, #31
  40aaac:	d54c      	bpl.n	40ab48 <_realloc_r+0xec>
  40aaae:	f01e 0f01 	tst.w	lr, #1
  40aab2:	f000 809b 	beq.w	40abec <_realloc_r+0x190>
  40aab6:	4631      	mov	r1, r6
  40aab8:	4640      	mov	r0, r8
  40aaba:	f7fb fee1 	bl	406880 <_malloc_r>
  40aabe:	4606      	mov	r6, r0
  40aac0:	2800      	cmp	r0, #0
  40aac2:	d03a      	beq.n	40ab3a <_realloc_r+0xde>
  40aac4:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40aac8:	f023 0301 	bic.w	r3, r3, #1
  40aacc:	444b      	add	r3, r9
  40aace:	f1a0 0208 	sub.w	r2, r0, #8
  40aad2:	429a      	cmp	r2, r3
  40aad4:	f000 8121 	beq.w	40ad1a <_realloc_r+0x2be>
  40aad8:	1f22      	subs	r2, r4, #4
  40aada:	2a24      	cmp	r2, #36	; 0x24
  40aadc:	f200 8107 	bhi.w	40acee <_realloc_r+0x292>
  40aae0:	2a13      	cmp	r2, #19
  40aae2:	f200 80db 	bhi.w	40ac9c <_realloc_r+0x240>
  40aae6:	4603      	mov	r3, r0
  40aae8:	462a      	mov	r2, r5
  40aaea:	6811      	ldr	r1, [r2, #0]
  40aaec:	6019      	str	r1, [r3, #0]
  40aaee:	6851      	ldr	r1, [r2, #4]
  40aaf0:	6059      	str	r1, [r3, #4]
  40aaf2:	6892      	ldr	r2, [r2, #8]
  40aaf4:	609a      	str	r2, [r3, #8]
  40aaf6:	4629      	mov	r1, r5
  40aaf8:	4640      	mov	r0, r8
  40aafa:	f7ff f8e9 	bl	409cd0 <_free_r>
  40aafe:	e01c      	b.n	40ab3a <_realloc_r+0xde>
  40ab00:	f027 0707 	bic.w	r7, r7, #7
  40ab04:	2f00      	cmp	r7, #0
  40ab06:	463a      	mov	r2, r7
  40ab08:	dabf      	bge.n	40aa8a <_realloc_r+0x2e>
  40ab0a:	2600      	movs	r6, #0
  40ab0c:	230c      	movs	r3, #12
  40ab0e:	4630      	mov	r0, r6
  40ab10:	f8c8 3000 	str.w	r3, [r8]
  40ab14:	b003      	add	sp, #12
  40ab16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ab1a:	462e      	mov	r6, r5
  40ab1c:	1be3      	subs	r3, r4, r7
  40ab1e:	2b0f      	cmp	r3, #15
  40ab20:	d81e      	bhi.n	40ab60 <_realloc_r+0x104>
  40ab22:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40ab26:	f003 0301 	and.w	r3, r3, #1
  40ab2a:	4323      	orrs	r3, r4
  40ab2c:	444c      	add	r4, r9
  40ab2e:	f8c9 3004 	str.w	r3, [r9, #4]
  40ab32:	6863      	ldr	r3, [r4, #4]
  40ab34:	f043 0301 	orr.w	r3, r3, #1
  40ab38:	6063      	str	r3, [r4, #4]
  40ab3a:	4640      	mov	r0, r8
  40ab3c:	f7fc fa3e 	bl	406fbc <__malloc_unlock>
  40ab40:	4630      	mov	r0, r6
  40ab42:	b003      	add	sp, #12
  40ab44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ab48:	f023 0303 	bic.w	r3, r3, #3
  40ab4c:	18e1      	adds	r1, r4, r3
  40ab4e:	4291      	cmp	r1, r2
  40ab50:	db1f      	blt.n	40ab92 <_realloc_r+0x136>
  40ab52:	68c3      	ldr	r3, [r0, #12]
  40ab54:	6882      	ldr	r2, [r0, #8]
  40ab56:	462e      	mov	r6, r5
  40ab58:	60d3      	str	r3, [r2, #12]
  40ab5a:	460c      	mov	r4, r1
  40ab5c:	609a      	str	r2, [r3, #8]
  40ab5e:	e7dd      	b.n	40ab1c <_realloc_r+0xc0>
  40ab60:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40ab64:	eb09 0107 	add.w	r1, r9, r7
  40ab68:	f002 0201 	and.w	r2, r2, #1
  40ab6c:	444c      	add	r4, r9
  40ab6e:	f043 0301 	orr.w	r3, r3, #1
  40ab72:	4317      	orrs	r7, r2
  40ab74:	f8c9 7004 	str.w	r7, [r9, #4]
  40ab78:	604b      	str	r3, [r1, #4]
  40ab7a:	6863      	ldr	r3, [r4, #4]
  40ab7c:	f043 0301 	orr.w	r3, r3, #1
  40ab80:	3108      	adds	r1, #8
  40ab82:	6063      	str	r3, [r4, #4]
  40ab84:	4640      	mov	r0, r8
  40ab86:	f7ff f8a3 	bl	409cd0 <_free_r>
  40ab8a:	e7d6      	b.n	40ab3a <_realloc_r+0xde>
  40ab8c:	4611      	mov	r1, r2
  40ab8e:	f7fb be77 	b.w	406880 <_malloc_r>
  40ab92:	f01e 0f01 	tst.w	lr, #1
  40ab96:	d18e      	bne.n	40aab6 <_realloc_r+0x5a>
  40ab98:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40ab9c:	eba9 0a01 	sub.w	sl, r9, r1
  40aba0:	f8da 1004 	ldr.w	r1, [sl, #4]
  40aba4:	f021 0103 	bic.w	r1, r1, #3
  40aba8:	440b      	add	r3, r1
  40abaa:	4423      	add	r3, r4
  40abac:	4293      	cmp	r3, r2
  40abae:	db25      	blt.n	40abfc <_realloc_r+0x1a0>
  40abb0:	68c2      	ldr	r2, [r0, #12]
  40abb2:	6881      	ldr	r1, [r0, #8]
  40abb4:	4656      	mov	r6, sl
  40abb6:	60ca      	str	r2, [r1, #12]
  40abb8:	6091      	str	r1, [r2, #8]
  40abba:	f8da 100c 	ldr.w	r1, [sl, #12]
  40abbe:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40abc2:	1f22      	subs	r2, r4, #4
  40abc4:	2a24      	cmp	r2, #36	; 0x24
  40abc6:	60c1      	str	r1, [r0, #12]
  40abc8:	6088      	str	r0, [r1, #8]
  40abca:	f200 8094 	bhi.w	40acf6 <_realloc_r+0x29a>
  40abce:	2a13      	cmp	r2, #19
  40abd0:	d96f      	bls.n	40acb2 <_realloc_r+0x256>
  40abd2:	6829      	ldr	r1, [r5, #0]
  40abd4:	f8ca 1008 	str.w	r1, [sl, #8]
  40abd8:	6869      	ldr	r1, [r5, #4]
  40abda:	f8ca 100c 	str.w	r1, [sl, #12]
  40abde:	2a1b      	cmp	r2, #27
  40abe0:	f200 80a2 	bhi.w	40ad28 <_realloc_r+0x2cc>
  40abe4:	3508      	adds	r5, #8
  40abe6:	f10a 0210 	add.w	r2, sl, #16
  40abea:	e063      	b.n	40acb4 <_realloc_r+0x258>
  40abec:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40abf0:	eba9 0a03 	sub.w	sl, r9, r3
  40abf4:	f8da 1004 	ldr.w	r1, [sl, #4]
  40abf8:	f021 0103 	bic.w	r1, r1, #3
  40abfc:	1863      	adds	r3, r4, r1
  40abfe:	4293      	cmp	r3, r2
  40ac00:	f6ff af59 	blt.w	40aab6 <_realloc_r+0x5a>
  40ac04:	4656      	mov	r6, sl
  40ac06:	e7d8      	b.n	40abba <_realloc_r+0x15e>
  40ac08:	6841      	ldr	r1, [r0, #4]
  40ac0a:	f021 0b03 	bic.w	fp, r1, #3
  40ac0e:	44a3      	add	fp, r4
  40ac10:	f107 0010 	add.w	r0, r7, #16
  40ac14:	4583      	cmp	fp, r0
  40ac16:	da56      	bge.n	40acc6 <_realloc_r+0x26a>
  40ac18:	f01e 0f01 	tst.w	lr, #1
  40ac1c:	f47f af4b 	bne.w	40aab6 <_realloc_r+0x5a>
  40ac20:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40ac24:	eba9 0a01 	sub.w	sl, r9, r1
  40ac28:	f8da 1004 	ldr.w	r1, [sl, #4]
  40ac2c:	f021 0103 	bic.w	r1, r1, #3
  40ac30:	448b      	add	fp, r1
  40ac32:	4558      	cmp	r0, fp
  40ac34:	dce2      	bgt.n	40abfc <_realloc_r+0x1a0>
  40ac36:	4656      	mov	r6, sl
  40ac38:	f8da 100c 	ldr.w	r1, [sl, #12]
  40ac3c:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40ac40:	1f22      	subs	r2, r4, #4
  40ac42:	2a24      	cmp	r2, #36	; 0x24
  40ac44:	60c1      	str	r1, [r0, #12]
  40ac46:	6088      	str	r0, [r1, #8]
  40ac48:	f200 808f 	bhi.w	40ad6a <_realloc_r+0x30e>
  40ac4c:	2a13      	cmp	r2, #19
  40ac4e:	f240 808a 	bls.w	40ad66 <_realloc_r+0x30a>
  40ac52:	6829      	ldr	r1, [r5, #0]
  40ac54:	f8ca 1008 	str.w	r1, [sl, #8]
  40ac58:	6869      	ldr	r1, [r5, #4]
  40ac5a:	f8ca 100c 	str.w	r1, [sl, #12]
  40ac5e:	2a1b      	cmp	r2, #27
  40ac60:	f200 808a 	bhi.w	40ad78 <_realloc_r+0x31c>
  40ac64:	3508      	adds	r5, #8
  40ac66:	f10a 0210 	add.w	r2, sl, #16
  40ac6a:	6829      	ldr	r1, [r5, #0]
  40ac6c:	6011      	str	r1, [r2, #0]
  40ac6e:	6869      	ldr	r1, [r5, #4]
  40ac70:	6051      	str	r1, [r2, #4]
  40ac72:	68a9      	ldr	r1, [r5, #8]
  40ac74:	6091      	str	r1, [r2, #8]
  40ac76:	eb0a 0107 	add.w	r1, sl, r7
  40ac7a:	ebab 0207 	sub.w	r2, fp, r7
  40ac7e:	f042 0201 	orr.w	r2, r2, #1
  40ac82:	6099      	str	r1, [r3, #8]
  40ac84:	604a      	str	r2, [r1, #4]
  40ac86:	f8da 3004 	ldr.w	r3, [sl, #4]
  40ac8a:	f003 0301 	and.w	r3, r3, #1
  40ac8e:	431f      	orrs	r7, r3
  40ac90:	4640      	mov	r0, r8
  40ac92:	f8ca 7004 	str.w	r7, [sl, #4]
  40ac96:	f7fc f991 	bl	406fbc <__malloc_unlock>
  40ac9a:	e751      	b.n	40ab40 <_realloc_r+0xe4>
  40ac9c:	682b      	ldr	r3, [r5, #0]
  40ac9e:	6003      	str	r3, [r0, #0]
  40aca0:	686b      	ldr	r3, [r5, #4]
  40aca2:	6043      	str	r3, [r0, #4]
  40aca4:	2a1b      	cmp	r2, #27
  40aca6:	d82d      	bhi.n	40ad04 <_realloc_r+0x2a8>
  40aca8:	f100 0308 	add.w	r3, r0, #8
  40acac:	f105 0208 	add.w	r2, r5, #8
  40acb0:	e71b      	b.n	40aaea <_realloc_r+0x8e>
  40acb2:	4632      	mov	r2, r6
  40acb4:	6829      	ldr	r1, [r5, #0]
  40acb6:	6011      	str	r1, [r2, #0]
  40acb8:	6869      	ldr	r1, [r5, #4]
  40acba:	6051      	str	r1, [r2, #4]
  40acbc:	68a9      	ldr	r1, [r5, #8]
  40acbe:	6091      	str	r1, [r2, #8]
  40acc0:	461c      	mov	r4, r3
  40acc2:	46d1      	mov	r9, sl
  40acc4:	e72a      	b.n	40ab1c <_realloc_r+0xc0>
  40acc6:	eb09 0107 	add.w	r1, r9, r7
  40acca:	ebab 0b07 	sub.w	fp, fp, r7
  40acce:	f04b 0201 	orr.w	r2, fp, #1
  40acd2:	6099      	str	r1, [r3, #8]
  40acd4:	604a      	str	r2, [r1, #4]
  40acd6:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40acda:	f003 0301 	and.w	r3, r3, #1
  40acde:	431f      	orrs	r7, r3
  40ace0:	4640      	mov	r0, r8
  40ace2:	f845 7c04 	str.w	r7, [r5, #-4]
  40ace6:	f7fc f969 	bl	406fbc <__malloc_unlock>
  40acea:	462e      	mov	r6, r5
  40acec:	e728      	b.n	40ab40 <_realloc_r+0xe4>
  40acee:	4629      	mov	r1, r5
  40acf0:	f7ff fb56 	bl	40a3a0 <memmove>
  40acf4:	e6ff      	b.n	40aaf6 <_realloc_r+0x9a>
  40acf6:	4629      	mov	r1, r5
  40acf8:	4630      	mov	r0, r6
  40acfa:	461c      	mov	r4, r3
  40acfc:	46d1      	mov	r9, sl
  40acfe:	f7ff fb4f 	bl	40a3a0 <memmove>
  40ad02:	e70b      	b.n	40ab1c <_realloc_r+0xc0>
  40ad04:	68ab      	ldr	r3, [r5, #8]
  40ad06:	6083      	str	r3, [r0, #8]
  40ad08:	68eb      	ldr	r3, [r5, #12]
  40ad0a:	60c3      	str	r3, [r0, #12]
  40ad0c:	2a24      	cmp	r2, #36	; 0x24
  40ad0e:	d017      	beq.n	40ad40 <_realloc_r+0x2e4>
  40ad10:	f100 0310 	add.w	r3, r0, #16
  40ad14:	f105 0210 	add.w	r2, r5, #16
  40ad18:	e6e7      	b.n	40aaea <_realloc_r+0x8e>
  40ad1a:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40ad1e:	f023 0303 	bic.w	r3, r3, #3
  40ad22:	441c      	add	r4, r3
  40ad24:	462e      	mov	r6, r5
  40ad26:	e6f9      	b.n	40ab1c <_realloc_r+0xc0>
  40ad28:	68a9      	ldr	r1, [r5, #8]
  40ad2a:	f8ca 1010 	str.w	r1, [sl, #16]
  40ad2e:	68e9      	ldr	r1, [r5, #12]
  40ad30:	f8ca 1014 	str.w	r1, [sl, #20]
  40ad34:	2a24      	cmp	r2, #36	; 0x24
  40ad36:	d00c      	beq.n	40ad52 <_realloc_r+0x2f6>
  40ad38:	3510      	adds	r5, #16
  40ad3a:	f10a 0218 	add.w	r2, sl, #24
  40ad3e:	e7b9      	b.n	40acb4 <_realloc_r+0x258>
  40ad40:	692b      	ldr	r3, [r5, #16]
  40ad42:	6103      	str	r3, [r0, #16]
  40ad44:	696b      	ldr	r3, [r5, #20]
  40ad46:	6143      	str	r3, [r0, #20]
  40ad48:	f105 0218 	add.w	r2, r5, #24
  40ad4c:	f100 0318 	add.w	r3, r0, #24
  40ad50:	e6cb      	b.n	40aaea <_realloc_r+0x8e>
  40ad52:	692a      	ldr	r2, [r5, #16]
  40ad54:	f8ca 2018 	str.w	r2, [sl, #24]
  40ad58:	696a      	ldr	r2, [r5, #20]
  40ad5a:	f8ca 201c 	str.w	r2, [sl, #28]
  40ad5e:	3518      	adds	r5, #24
  40ad60:	f10a 0220 	add.w	r2, sl, #32
  40ad64:	e7a6      	b.n	40acb4 <_realloc_r+0x258>
  40ad66:	4632      	mov	r2, r6
  40ad68:	e77f      	b.n	40ac6a <_realloc_r+0x20e>
  40ad6a:	4629      	mov	r1, r5
  40ad6c:	4630      	mov	r0, r6
  40ad6e:	9301      	str	r3, [sp, #4]
  40ad70:	f7ff fb16 	bl	40a3a0 <memmove>
  40ad74:	9b01      	ldr	r3, [sp, #4]
  40ad76:	e77e      	b.n	40ac76 <_realloc_r+0x21a>
  40ad78:	68a9      	ldr	r1, [r5, #8]
  40ad7a:	f8ca 1010 	str.w	r1, [sl, #16]
  40ad7e:	68e9      	ldr	r1, [r5, #12]
  40ad80:	f8ca 1014 	str.w	r1, [sl, #20]
  40ad84:	2a24      	cmp	r2, #36	; 0x24
  40ad86:	d003      	beq.n	40ad90 <_realloc_r+0x334>
  40ad88:	3510      	adds	r5, #16
  40ad8a:	f10a 0218 	add.w	r2, sl, #24
  40ad8e:	e76c      	b.n	40ac6a <_realloc_r+0x20e>
  40ad90:	692a      	ldr	r2, [r5, #16]
  40ad92:	f8ca 2018 	str.w	r2, [sl, #24]
  40ad96:	696a      	ldr	r2, [r5, #20]
  40ad98:	f8ca 201c 	str.w	r2, [sl, #28]
  40ad9c:	3518      	adds	r5, #24
  40ad9e:	f10a 0220 	add.w	r2, sl, #32
  40ada2:	e762      	b.n	40ac6a <_realloc_r+0x20e>
  40ada4:	20400440 	.word	0x20400440

0040ada8 <__sread>:
  40ada8:	b510      	push	{r4, lr}
  40adaa:	460c      	mov	r4, r1
  40adac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40adb0:	f000 fa88 	bl	40b2c4 <_read_r>
  40adb4:	2800      	cmp	r0, #0
  40adb6:	db03      	blt.n	40adc0 <__sread+0x18>
  40adb8:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40adba:	4403      	add	r3, r0
  40adbc:	6523      	str	r3, [r4, #80]	; 0x50
  40adbe:	bd10      	pop	{r4, pc}
  40adc0:	89a3      	ldrh	r3, [r4, #12]
  40adc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40adc6:	81a3      	strh	r3, [r4, #12]
  40adc8:	bd10      	pop	{r4, pc}
  40adca:	bf00      	nop

0040adcc <__swrite>:
  40adcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40add0:	4616      	mov	r6, r2
  40add2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40add6:	461f      	mov	r7, r3
  40add8:	05d3      	lsls	r3, r2, #23
  40adda:	460c      	mov	r4, r1
  40addc:	4605      	mov	r5, r0
  40adde:	d507      	bpl.n	40adf0 <__swrite+0x24>
  40ade0:	2200      	movs	r2, #0
  40ade2:	2302      	movs	r3, #2
  40ade4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40ade8:	f000 fa40 	bl	40b26c <_lseek_r>
  40adec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40adf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40adf4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40adf8:	81a2      	strh	r2, [r4, #12]
  40adfa:	463b      	mov	r3, r7
  40adfc:	4632      	mov	r2, r6
  40adfe:	4628      	mov	r0, r5
  40ae00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40ae04:	f000 b85e 	b.w	40aec4 <_write_r>

0040ae08 <__sseek>:
  40ae08:	b510      	push	{r4, lr}
  40ae0a:	460c      	mov	r4, r1
  40ae0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40ae10:	f000 fa2c 	bl	40b26c <_lseek_r>
  40ae14:	89a3      	ldrh	r3, [r4, #12]
  40ae16:	1c42      	adds	r2, r0, #1
  40ae18:	bf0e      	itee	eq
  40ae1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40ae1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40ae22:	6520      	strne	r0, [r4, #80]	; 0x50
  40ae24:	81a3      	strh	r3, [r4, #12]
  40ae26:	bd10      	pop	{r4, pc}

0040ae28 <__sclose>:
  40ae28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40ae2c:	f000 b8f2 	b.w	40b014 <_close_r>

0040ae30 <__sprint_r.part.0>:
  40ae30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ae34:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40ae36:	049c      	lsls	r4, r3, #18
  40ae38:	4693      	mov	fp, r2
  40ae3a:	d52f      	bpl.n	40ae9c <__sprint_r.part.0+0x6c>
  40ae3c:	6893      	ldr	r3, [r2, #8]
  40ae3e:	6812      	ldr	r2, [r2, #0]
  40ae40:	b353      	cbz	r3, 40ae98 <__sprint_r.part.0+0x68>
  40ae42:	460e      	mov	r6, r1
  40ae44:	4607      	mov	r7, r0
  40ae46:	f102 0908 	add.w	r9, r2, #8
  40ae4a:	e919 0420 	ldmdb	r9, {r5, sl}
  40ae4e:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40ae52:	d017      	beq.n	40ae84 <__sprint_r.part.0+0x54>
  40ae54:	3d04      	subs	r5, #4
  40ae56:	2400      	movs	r4, #0
  40ae58:	e001      	b.n	40ae5e <__sprint_r.part.0+0x2e>
  40ae5a:	45a0      	cmp	r8, r4
  40ae5c:	d010      	beq.n	40ae80 <__sprint_r.part.0+0x50>
  40ae5e:	4632      	mov	r2, r6
  40ae60:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40ae64:	4638      	mov	r0, r7
  40ae66:	f000 f999 	bl	40b19c <_fputwc_r>
  40ae6a:	1c43      	adds	r3, r0, #1
  40ae6c:	f104 0401 	add.w	r4, r4, #1
  40ae70:	d1f3      	bne.n	40ae5a <__sprint_r.part.0+0x2a>
  40ae72:	2300      	movs	r3, #0
  40ae74:	f8cb 3008 	str.w	r3, [fp, #8]
  40ae78:	f8cb 3004 	str.w	r3, [fp, #4]
  40ae7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ae80:	f8db 3008 	ldr.w	r3, [fp, #8]
  40ae84:	f02a 0a03 	bic.w	sl, sl, #3
  40ae88:	eba3 030a 	sub.w	r3, r3, sl
  40ae8c:	f8cb 3008 	str.w	r3, [fp, #8]
  40ae90:	f109 0908 	add.w	r9, r9, #8
  40ae94:	2b00      	cmp	r3, #0
  40ae96:	d1d8      	bne.n	40ae4a <__sprint_r.part.0+0x1a>
  40ae98:	2000      	movs	r0, #0
  40ae9a:	e7ea      	b.n	40ae72 <__sprint_r.part.0+0x42>
  40ae9c:	f7fe fffe 	bl	409e9c <__sfvwrite_r>
  40aea0:	2300      	movs	r3, #0
  40aea2:	f8cb 3008 	str.w	r3, [fp, #8]
  40aea6:	f8cb 3004 	str.w	r3, [fp, #4]
  40aeaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40aeae:	bf00      	nop

0040aeb0 <__sprint_r>:
  40aeb0:	6893      	ldr	r3, [r2, #8]
  40aeb2:	b10b      	cbz	r3, 40aeb8 <__sprint_r+0x8>
  40aeb4:	f7ff bfbc 	b.w	40ae30 <__sprint_r.part.0>
  40aeb8:	b410      	push	{r4}
  40aeba:	4618      	mov	r0, r3
  40aebc:	6053      	str	r3, [r2, #4]
  40aebe:	bc10      	pop	{r4}
  40aec0:	4770      	bx	lr
  40aec2:	bf00      	nop

0040aec4 <_write_r>:
  40aec4:	b570      	push	{r4, r5, r6, lr}
  40aec6:	460d      	mov	r5, r1
  40aec8:	4c08      	ldr	r4, [pc, #32]	; (40aeec <_write_r+0x28>)
  40aeca:	4611      	mov	r1, r2
  40aecc:	4606      	mov	r6, r0
  40aece:	461a      	mov	r2, r3
  40aed0:	4628      	mov	r0, r5
  40aed2:	2300      	movs	r3, #0
  40aed4:	6023      	str	r3, [r4, #0]
  40aed6:	f7f5 f9d3 	bl	400280 <_write>
  40aeda:	1c43      	adds	r3, r0, #1
  40aedc:	d000      	beq.n	40aee0 <_write_r+0x1c>
  40aede:	bd70      	pop	{r4, r5, r6, pc}
  40aee0:	6823      	ldr	r3, [r4, #0]
  40aee2:	2b00      	cmp	r3, #0
  40aee4:	d0fb      	beq.n	40aede <_write_r+0x1a>
  40aee6:	6033      	str	r3, [r6, #0]
  40aee8:	bd70      	pop	{r4, r5, r6, pc}
  40aeea:	bf00      	nop
  40aeec:	20400c48 	.word	0x20400c48

0040aef0 <__register_exitproc>:
  40aef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40aef4:	4d2c      	ldr	r5, [pc, #176]	; (40afa8 <__register_exitproc+0xb8>)
  40aef6:	4606      	mov	r6, r0
  40aef8:	6828      	ldr	r0, [r5, #0]
  40aefa:	4698      	mov	r8, r3
  40aefc:	460f      	mov	r7, r1
  40aefe:	4691      	mov	r9, r2
  40af00:	f7ff f980 	bl	40a204 <__retarget_lock_acquire_recursive>
  40af04:	4b29      	ldr	r3, [pc, #164]	; (40afac <__register_exitproc+0xbc>)
  40af06:	681c      	ldr	r4, [r3, #0]
  40af08:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40af0c:	2b00      	cmp	r3, #0
  40af0e:	d03e      	beq.n	40af8e <__register_exitproc+0x9e>
  40af10:	685a      	ldr	r2, [r3, #4]
  40af12:	2a1f      	cmp	r2, #31
  40af14:	dc1c      	bgt.n	40af50 <__register_exitproc+0x60>
  40af16:	f102 0e01 	add.w	lr, r2, #1
  40af1a:	b176      	cbz	r6, 40af3a <__register_exitproc+0x4a>
  40af1c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40af20:	2401      	movs	r4, #1
  40af22:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40af26:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40af2a:	4094      	lsls	r4, r2
  40af2c:	4320      	orrs	r0, r4
  40af2e:	2e02      	cmp	r6, #2
  40af30:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40af34:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40af38:	d023      	beq.n	40af82 <__register_exitproc+0x92>
  40af3a:	3202      	adds	r2, #2
  40af3c:	f8c3 e004 	str.w	lr, [r3, #4]
  40af40:	6828      	ldr	r0, [r5, #0]
  40af42:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40af46:	f7ff f95f 	bl	40a208 <__retarget_lock_release_recursive>
  40af4a:	2000      	movs	r0, #0
  40af4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40af50:	4b17      	ldr	r3, [pc, #92]	; (40afb0 <__register_exitproc+0xc0>)
  40af52:	b30b      	cbz	r3, 40af98 <__register_exitproc+0xa8>
  40af54:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40af58:	f7fb fc82 	bl	406860 <malloc>
  40af5c:	4603      	mov	r3, r0
  40af5e:	b1d8      	cbz	r0, 40af98 <__register_exitproc+0xa8>
  40af60:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40af64:	6002      	str	r2, [r0, #0]
  40af66:	2100      	movs	r1, #0
  40af68:	6041      	str	r1, [r0, #4]
  40af6a:	460a      	mov	r2, r1
  40af6c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40af70:	f04f 0e01 	mov.w	lr, #1
  40af74:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40af78:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40af7c:	2e00      	cmp	r6, #0
  40af7e:	d0dc      	beq.n	40af3a <__register_exitproc+0x4a>
  40af80:	e7cc      	b.n	40af1c <__register_exitproc+0x2c>
  40af82:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40af86:	430c      	orrs	r4, r1
  40af88:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40af8c:	e7d5      	b.n	40af3a <__register_exitproc+0x4a>
  40af8e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40af92:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40af96:	e7bb      	b.n	40af10 <__register_exitproc+0x20>
  40af98:	6828      	ldr	r0, [r5, #0]
  40af9a:	f7ff f935 	bl	40a208 <__retarget_lock_release_recursive>
  40af9e:	f04f 30ff 	mov.w	r0, #4294967295
  40afa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40afa6:	bf00      	nop
  40afa8:	20400850 	.word	0x20400850
  40afac:	0040bd3c 	.word	0x0040bd3c
  40afb0:	00406861 	.word	0x00406861

0040afb4 <_calloc_r>:
  40afb4:	b510      	push	{r4, lr}
  40afb6:	fb02 f101 	mul.w	r1, r2, r1
  40afba:	f7fb fc61 	bl	406880 <_malloc_r>
  40afbe:	4604      	mov	r4, r0
  40afc0:	b1d8      	cbz	r0, 40affa <_calloc_r+0x46>
  40afc2:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40afc6:	f022 0203 	bic.w	r2, r2, #3
  40afca:	3a04      	subs	r2, #4
  40afcc:	2a24      	cmp	r2, #36	; 0x24
  40afce:	d818      	bhi.n	40b002 <_calloc_r+0x4e>
  40afd0:	2a13      	cmp	r2, #19
  40afd2:	d914      	bls.n	40affe <_calloc_r+0x4a>
  40afd4:	2300      	movs	r3, #0
  40afd6:	2a1b      	cmp	r2, #27
  40afd8:	6003      	str	r3, [r0, #0]
  40afda:	6043      	str	r3, [r0, #4]
  40afdc:	d916      	bls.n	40b00c <_calloc_r+0x58>
  40afde:	2a24      	cmp	r2, #36	; 0x24
  40afe0:	6083      	str	r3, [r0, #8]
  40afe2:	60c3      	str	r3, [r0, #12]
  40afe4:	bf11      	iteee	ne
  40afe6:	f100 0210 	addne.w	r2, r0, #16
  40afea:	6103      	streq	r3, [r0, #16]
  40afec:	6143      	streq	r3, [r0, #20]
  40afee:	f100 0218 	addeq.w	r2, r0, #24
  40aff2:	2300      	movs	r3, #0
  40aff4:	6013      	str	r3, [r2, #0]
  40aff6:	6053      	str	r3, [r2, #4]
  40aff8:	6093      	str	r3, [r2, #8]
  40affa:	4620      	mov	r0, r4
  40affc:	bd10      	pop	{r4, pc}
  40affe:	4602      	mov	r2, r0
  40b000:	e7f7      	b.n	40aff2 <_calloc_r+0x3e>
  40b002:	2100      	movs	r1, #0
  40b004:	f7fb ff86 	bl	406f14 <memset>
  40b008:	4620      	mov	r0, r4
  40b00a:	bd10      	pop	{r4, pc}
  40b00c:	f100 0208 	add.w	r2, r0, #8
  40b010:	e7ef      	b.n	40aff2 <_calloc_r+0x3e>
  40b012:	bf00      	nop

0040b014 <_close_r>:
  40b014:	b538      	push	{r3, r4, r5, lr}
  40b016:	4c07      	ldr	r4, [pc, #28]	; (40b034 <_close_r+0x20>)
  40b018:	2300      	movs	r3, #0
  40b01a:	4605      	mov	r5, r0
  40b01c:	4608      	mov	r0, r1
  40b01e:	6023      	str	r3, [r4, #0]
  40b020:	f7f5 fefa 	bl	400e18 <_close>
  40b024:	1c43      	adds	r3, r0, #1
  40b026:	d000      	beq.n	40b02a <_close_r+0x16>
  40b028:	bd38      	pop	{r3, r4, r5, pc}
  40b02a:	6823      	ldr	r3, [r4, #0]
  40b02c:	2b00      	cmp	r3, #0
  40b02e:	d0fb      	beq.n	40b028 <_close_r+0x14>
  40b030:	602b      	str	r3, [r5, #0]
  40b032:	bd38      	pop	{r3, r4, r5, pc}
  40b034:	20400c48 	.word	0x20400c48

0040b038 <_fclose_r>:
  40b038:	b570      	push	{r4, r5, r6, lr}
  40b03a:	b159      	cbz	r1, 40b054 <_fclose_r+0x1c>
  40b03c:	4605      	mov	r5, r0
  40b03e:	460c      	mov	r4, r1
  40b040:	b110      	cbz	r0, 40b048 <_fclose_r+0x10>
  40b042:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40b044:	2b00      	cmp	r3, #0
  40b046:	d03c      	beq.n	40b0c2 <_fclose_r+0x8a>
  40b048:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40b04a:	07d8      	lsls	r0, r3, #31
  40b04c:	d505      	bpl.n	40b05a <_fclose_r+0x22>
  40b04e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40b052:	b92b      	cbnz	r3, 40b060 <_fclose_r+0x28>
  40b054:	2600      	movs	r6, #0
  40b056:	4630      	mov	r0, r6
  40b058:	bd70      	pop	{r4, r5, r6, pc}
  40b05a:	89a3      	ldrh	r3, [r4, #12]
  40b05c:	0599      	lsls	r1, r3, #22
  40b05e:	d53c      	bpl.n	40b0da <_fclose_r+0xa2>
  40b060:	4621      	mov	r1, r4
  40b062:	4628      	mov	r0, r5
  40b064:	f7fe fc9a 	bl	40999c <__sflush_r>
  40b068:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40b06a:	4606      	mov	r6, r0
  40b06c:	b133      	cbz	r3, 40b07c <_fclose_r+0x44>
  40b06e:	69e1      	ldr	r1, [r4, #28]
  40b070:	4628      	mov	r0, r5
  40b072:	4798      	blx	r3
  40b074:	2800      	cmp	r0, #0
  40b076:	bfb8      	it	lt
  40b078:	f04f 36ff 	movlt.w	r6, #4294967295
  40b07c:	89a3      	ldrh	r3, [r4, #12]
  40b07e:	061a      	lsls	r2, r3, #24
  40b080:	d422      	bmi.n	40b0c8 <_fclose_r+0x90>
  40b082:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40b084:	b141      	cbz	r1, 40b098 <_fclose_r+0x60>
  40b086:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40b08a:	4299      	cmp	r1, r3
  40b08c:	d002      	beq.n	40b094 <_fclose_r+0x5c>
  40b08e:	4628      	mov	r0, r5
  40b090:	f7fe fe1e 	bl	409cd0 <_free_r>
  40b094:	2300      	movs	r3, #0
  40b096:	6323      	str	r3, [r4, #48]	; 0x30
  40b098:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40b09a:	b121      	cbz	r1, 40b0a6 <_fclose_r+0x6e>
  40b09c:	4628      	mov	r0, r5
  40b09e:	f7fe fe17 	bl	409cd0 <_free_r>
  40b0a2:	2300      	movs	r3, #0
  40b0a4:	6463      	str	r3, [r4, #68]	; 0x44
  40b0a6:	f7fe fd9d 	bl	409be4 <__sfp_lock_acquire>
  40b0aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40b0ac:	2200      	movs	r2, #0
  40b0ae:	07db      	lsls	r3, r3, #31
  40b0b0:	81a2      	strh	r2, [r4, #12]
  40b0b2:	d50e      	bpl.n	40b0d2 <_fclose_r+0x9a>
  40b0b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40b0b6:	f7ff f8a3 	bl	40a200 <__retarget_lock_close_recursive>
  40b0ba:	f7fe fd99 	bl	409bf0 <__sfp_lock_release>
  40b0be:	4630      	mov	r0, r6
  40b0c0:	bd70      	pop	{r4, r5, r6, pc}
  40b0c2:	f7fe fd63 	bl	409b8c <__sinit>
  40b0c6:	e7bf      	b.n	40b048 <_fclose_r+0x10>
  40b0c8:	6921      	ldr	r1, [r4, #16]
  40b0ca:	4628      	mov	r0, r5
  40b0cc:	f7fe fe00 	bl	409cd0 <_free_r>
  40b0d0:	e7d7      	b.n	40b082 <_fclose_r+0x4a>
  40b0d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40b0d4:	f7ff f898 	bl	40a208 <__retarget_lock_release_recursive>
  40b0d8:	e7ec      	b.n	40b0b4 <_fclose_r+0x7c>
  40b0da:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40b0dc:	f7ff f892 	bl	40a204 <__retarget_lock_acquire_recursive>
  40b0e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40b0e4:	2b00      	cmp	r3, #0
  40b0e6:	d1bb      	bne.n	40b060 <_fclose_r+0x28>
  40b0e8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40b0ea:	f016 0601 	ands.w	r6, r6, #1
  40b0ee:	d1b1      	bne.n	40b054 <_fclose_r+0x1c>
  40b0f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40b0f2:	f7ff f889 	bl	40a208 <__retarget_lock_release_recursive>
  40b0f6:	4630      	mov	r0, r6
  40b0f8:	bd70      	pop	{r4, r5, r6, pc}
  40b0fa:	bf00      	nop

0040b0fc <__fputwc>:
  40b0fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40b100:	b082      	sub	sp, #8
  40b102:	4680      	mov	r8, r0
  40b104:	4689      	mov	r9, r1
  40b106:	4614      	mov	r4, r2
  40b108:	f000 f8a2 	bl	40b250 <__locale_mb_cur_max>
  40b10c:	2801      	cmp	r0, #1
  40b10e:	d036      	beq.n	40b17e <__fputwc+0x82>
  40b110:	464a      	mov	r2, r9
  40b112:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40b116:	a901      	add	r1, sp, #4
  40b118:	4640      	mov	r0, r8
  40b11a:	f000 f941 	bl	40b3a0 <_wcrtomb_r>
  40b11e:	1c42      	adds	r2, r0, #1
  40b120:	4606      	mov	r6, r0
  40b122:	d025      	beq.n	40b170 <__fputwc+0x74>
  40b124:	b3a8      	cbz	r0, 40b192 <__fputwc+0x96>
  40b126:	f89d e004 	ldrb.w	lr, [sp, #4]
  40b12a:	2500      	movs	r5, #0
  40b12c:	f10d 0a04 	add.w	sl, sp, #4
  40b130:	e009      	b.n	40b146 <__fputwc+0x4a>
  40b132:	6823      	ldr	r3, [r4, #0]
  40b134:	1c5a      	adds	r2, r3, #1
  40b136:	6022      	str	r2, [r4, #0]
  40b138:	f883 e000 	strb.w	lr, [r3]
  40b13c:	3501      	adds	r5, #1
  40b13e:	42b5      	cmp	r5, r6
  40b140:	d227      	bcs.n	40b192 <__fputwc+0x96>
  40b142:	f815 e00a 	ldrb.w	lr, [r5, sl]
  40b146:	68a3      	ldr	r3, [r4, #8]
  40b148:	3b01      	subs	r3, #1
  40b14a:	2b00      	cmp	r3, #0
  40b14c:	60a3      	str	r3, [r4, #8]
  40b14e:	daf0      	bge.n	40b132 <__fputwc+0x36>
  40b150:	69a7      	ldr	r7, [r4, #24]
  40b152:	42bb      	cmp	r3, r7
  40b154:	4671      	mov	r1, lr
  40b156:	4622      	mov	r2, r4
  40b158:	4640      	mov	r0, r8
  40b15a:	db02      	blt.n	40b162 <__fputwc+0x66>
  40b15c:	f1be 0f0a 	cmp.w	lr, #10
  40b160:	d1e7      	bne.n	40b132 <__fputwc+0x36>
  40b162:	f000 f8c5 	bl	40b2f0 <__swbuf_r>
  40b166:	1c43      	adds	r3, r0, #1
  40b168:	d1e8      	bne.n	40b13c <__fputwc+0x40>
  40b16a:	b002      	add	sp, #8
  40b16c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b170:	89a3      	ldrh	r3, [r4, #12]
  40b172:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40b176:	81a3      	strh	r3, [r4, #12]
  40b178:	b002      	add	sp, #8
  40b17a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b17e:	f109 33ff 	add.w	r3, r9, #4294967295
  40b182:	2bfe      	cmp	r3, #254	; 0xfe
  40b184:	d8c4      	bhi.n	40b110 <__fputwc+0x14>
  40b186:	fa5f fe89 	uxtb.w	lr, r9
  40b18a:	4606      	mov	r6, r0
  40b18c:	f88d e004 	strb.w	lr, [sp, #4]
  40b190:	e7cb      	b.n	40b12a <__fputwc+0x2e>
  40b192:	4648      	mov	r0, r9
  40b194:	b002      	add	sp, #8
  40b196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b19a:	bf00      	nop

0040b19c <_fputwc_r>:
  40b19c:	b530      	push	{r4, r5, lr}
  40b19e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  40b1a0:	f013 0f01 	tst.w	r3, #1
  40b1a4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  40b1a8:	4614      	mov	r4, r2
  40b1aa:	b083      	sub	sp, #12
  40b1ac:	4605      	mov	r5, r0
  40b1ae:	b29a      	uxth	r2, r3
  40b1b0:	d101      	bne.n	40b1b6 <_fputwc_r+0x1a>
  40b1b2:	0590      	lsls	r0, r2, #22
  40b1b4:	d51c      	bpl.n	40b1f0 <_fputwc_r+0x54>
  40b1b6:	0490      	lsls	r0, r2, #18
  40b1b8:	d406      	bmi.n	40b1c8 <_fputwc_r+0x2c>
  40b1ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40b1bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40b1c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40b1c4:	81a3      	strh	r3, [r4, #12]
  40b1c6:	6662      	str	r2, [r4, #100]	; 0x64
  40b1c8:	4628      	mov	r0, r5
  40b1ca:	4622      	mov	r2, r4
  40b1cc:	f7ff ff96 	bl	40b0fc <__fputwc>
  40b1d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40b1d2:	07da      	lsls	r2, r3, #31
  40b1d4:	4605      	mov	r5, r0
  40b1d6:	d402      	bmi.n	40b1de <_fputwc_r+0x42>
  40b1d8:	89a3      	ldrh	r3, [r4, #12]
  40b1da:	059b      	lsls	r3, r3, #22
  40b1dc:	d502      	bpl.n	40b1e4 <_fputwc_r+0x48>
  40b1de:	4628      	mov	r0, r5
  40b1e0:	b003      	add	sp, #12
  40b1e2:	bd30      	pop	{r4, r5, pc}
  40b1e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40b1e6:	f7ff f80f 	bl	40a208 <__retarget_lock_release_recursive>
  40b1ea:	4628      	mov	r0, r5
  40b1ec:	b003      	add	sp, #12
  40b1ee:	bd30      	pop	{r4, r5, pc}
  40b1f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40b1f2:	9101      	str	r1, [sp, #4]
  40b1f4:	f7ff f806 	bl	40a204 <__retarget_lock_acquire_recursive>
  40b1f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40b1fc:	9901      	ldr	r1, [sp, #4]
  40b1fe:	b29a      	uxth	r2, r3
  40b200:	e7d9      	b.n	40b1b6 <_fputwc_r+0x1a>
  40b202:	bf00      	nop

0040b204 <_fstat_r>:
  40b204:	b538      	push	{r3, r4, r5, lr}
  40b206:	460b      	mov	r3, r1
  40b208:	4c07      	ldr	r4, [pc, #28]	; (40b228 <_fstat_r+0x24>)
  40b20a:	4605      	mov	r5, r0
  40b20c:	4611      	mov	r1, r2
  40b20e:	4618      	mov	r0, r3
  40b210:	2300      	movs	r3, #0
  40b212:	6023      	str	r3, [r4, #0]
  40b214:	f7f5 fe03 	bl	400e1e <_fstat>
  40b218:	1c43      	adds	r3, r0, #1
  40b21a:	d000      	beq.n	40b21e <_fstat_r+0x1a>
  40b21c:	bd38      	pop	{r3, r4, r5, pc}
  40b21e:	6823      	ldr	r3, [r4, #0]
  40b220:	2b00      	cmp	r3, #0
  40b222:	d0fb      	beq.n	40b21c <_fstat_r+0x18>
  40b224:	602b      	str	r3, [r5, #0]
  40b226:	bd38      	pop	{r3, r4, r5, pc}
  40b228:	20400c48 	.word	0x20400c48

0040b22c <_isatty_r>:
  40b22c:	b538      	push	{r3, r4, r5, lr}
  40b22e:	4c07      	ldr	r4, [pc, #28]	; (40b24c <_isatty_r+0x20>)
  40b230:	2300      	movs	r3, #0
  40b232:	4605      	mov	r5, r0
  40b234:	4608      	mov	r0, r1
  40b236:	6023      	str	r3, [r4, #0]
  40b238:	f7f5 fdf6 	bl	400e28 <_isatty>
  40b23c:	1c43      	adds	r3, r0, #1
  40b23e:	d000      	beq.n	40b242 <_isatty_r+0x16>
  40b240:	bd38      	pop	{r3, r4, r5, pc}
  40b242:	6823      	ldr	r3, [r4, #0]
  40b244:	2b00      	cmp	r3, #0
  40b246:	d0fb      	beq.n	40b240 <_isatty_r+0x14>
  40b248:	602b      	str	r3, [r5, #0]
  40b24a:	bd38      	pop	{r3, r4, r5, pc}
  40b24c:	20400c48 	.word	0x20400c48

0040b250 <__locale_mb_cur_max>:
  40b250:	4b04      	ldr	r3, [pc, #16]	; (40b264 <__locale_mb_cur_max+0x14>)
  40b252:	4a05      	ldr	r2, [pc, #20]	; (40b268 <__locale_mb_cur_max+0x18>)
  40b254:	681b      	ldr	r3, [r3, #0]
  40b256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40b258:	2b00      	cmp	r3, #0
  40b25a:	bf08      	it	eq
  40b25c:	4613      	moveq	r3, r2
  40b25e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  40b262:	4770      	bx	lr
  40b264:	20400010 	.word	0x20400010
  40b268:	20400854 	.word	0x20400854

0040b26c <_lseek_r>:
  40b26c:	b570      	push	{r4, r5, r6, lr}
  40b26e:	460d      	mov	r5, r1
  40b270:	4c08      	ldr	r4, [pc, #32]	; (40b294 <_lseek_r+0x28>)
  40b272:	4611      	mov	r1, r2
  40b274:	4606      	mov	r6, r0
  40b276:	461a      	mov	r2, r3
  40b278:	4628      	mov	r0, r5
  40b27a:	2300      	movs	r3, #0
  40b27c:	6023      	str	r3, [r4, #0]
  40b27e:	f7f5 fdd5 	bl	400e2c <_lseek>
  40b282:	1c43      	adds	r3, r0, #1
  40b284:	d000      	beq.n	40b288 <_lseek_r+0x1c>
  40b286:	bd70      	pop	{r4, r5, r6, pc}
  40b288:	6823      	ldr	r3, [r4, #0]
  40b28a:	2b00      	cmp	r3, #0
  40b28c:	d0fb      	beq.n	40b286 <_lseek_r+0x1a>
  40b28e:	6033      	str	r3, [r6, #0]
  40b290:	bd70      	pop	{r4, r5, r6, pc}
  40b292:	bf00      	nop
  40b294:	20400c48 	.word	0x20400c48

0040b298 <__ascii_mbtowc>:
  40b298:	b082      	sub	sp, #8
  40b29a:	b149      	cbz	r1, 40b2b0 <__ascii_mbtowc+0x18>
  40b29c:	b15a      	cbz	r2, 40b2b6 <__ascii_mbtowc+0x1e>
  40b29e:	b16b      	cbz	r3, 40b2bc <__ascii_mbtowc+0x24>
  40b2a0:	7813      	ldrb	r3, [r2, #0]
  40b2a2:	600b      	str	r3, [r1, #0]
  40b2a4:	7812      	ldrb	r2, [r2, #0]
  40b2a6:	1c10      	adds	r0, r2, #0
  40b2a8:	bf18      	it	ne
  40b2aa:	2001      	movne	r0, #1
  40b2ac:	b002      	add	sp, #8
  40b2ae:	4770      	bx	lr
  40b2b0:	a901      	add	r1, sp, #4
  40b2b2:	2a00      	cmp	r2, #0
  40b2b4:	d1f3      	bne.n	40b29e <__ascii_mbtowc+0x6>
  40b2b6:	4610      	mov	r0, r2
  40b2b8:	b002      	add	sp, #8
  40b2ba:	4770      	bx	lr
  40b2bc:	f06f 0001 	mvn.w	r0, #1
  40b2c0:	e7f4      	b.n	40b2ac <__ascii_mbtowc+0x14>
  40b2c2:	bf00      	nop

0040b2c4 <_read_r>:
  40b2c4:	b570      	push	{r4, r5, r6, lr}
  40b2c6:	460d      	mov	r5, r1
  40b2c8:	4c08      	ldr	r4, [pc, #32]	; (40b2ec <_read_r+0x28>)
  40b2ca:	4611      	mov	r1, r2
  40b2cc:	4606      	mov	r6, r0
  40b2ce:	461a      	mov	r2, r3
  40b2d0:	4628      	mov	r0, r5
  40b2d2:	2300      	movs	r3, #0
  40b2d4:	6023      	str	r3, [r4, #0]
  40b2d6:	f7f4 ffb5 	bl	400244 <_read>
  40b2da:	1c43      	adds	r3, r0, #1
  40b2dc:	d000      	beq.n	40b2e0 <_read_r+0x1c>
  40b2de:	bd70      	pop	{r4, r5, r6, pc}
  40b2e0:	6823      	ldr	r3, [r4, #0]
  40b2e2:	2b00      	cmp	r3, #0
  40b2e4:	d0fb      	beq.n	40b2de <_read_r+0x1a>
  40b2e6:	6033      	str	r3, [r6, #0]
  40b2e8:	bd70      	pop	{r4, r5, r6, pc}
  40b2ea:	bf00      	nop
  40b2ec:	20400c48 	.word	0x20400c48

0040b2f0 <__swbuf_r>:
  40b2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40b2f2:	460d      	mov	r5, r1
  40b2f4:	4614      	mov	r4, r2
  40b2f6:	4606      	mov	r6, r0
  40b2f8:	b110      	cbz	r0, 40b300 <__swbuf_r+0x10>
  40b2fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40b2fc:	2b00      	cmp	r3, #0
  40b2fe:	d04b      	beq.n	40b398 <__swbuf_r+0xa8>
  40b300:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40b304:	69a3      	ldr	r3, [r4, #24]
  40b306:	60a3      	str	r3, [r4, #8]
  40b308:	b291      	uxth	r1, r2
  40b30a:	0708      	lsls	r0, r1, #28
  40b30c:	d539      	bpl.n	40b382 <__swbuf_r+0x92>
  40b30e:	6923      	ldr	r3, [r4, #16]
  40b310:	2b00      	cmp	r3, #0
  40b312:	d036      	beq.n	40b382 <__swbuf_r+0x92>
  40b314:	b2ed      	uxtb	r5, r5
  40b316:	0489      	lsls	r1, r1, #18
  40b318:	462f      	mov	r7, r5
  40b31a:	d515      	bpl.n	40b348 <__swbuf_r+0x58>
  40b31c:	6822      	ldr	r2, [r4, #0]
  40b31e:	6961      	ldr	r1, [r4, #20]
  40b320:	1ad3      	subs	r3, r2, r3
  40b322:	428b      	cmp	r3, r1
  40b324:	da1c      	bge.n	40b360 <__swbuf_r+0x70>
  40b326:	3301      	adds	r3, #1
  40b328:	68a1      	ldr	r1, [r4, #8]
  40b32a:	1c50      	adds	r0, r2, #1
  40b32c:	3901      	subs	r1, #1
  40b32e:	60a1      	str	r1, [r4, #8]
  40b330:	6020      	str	r0, [r4, #0]
  40b332:	7015      	strb	r5, [r2, #0]
  40b334:	6962      	ldr	r2, [r4, #20]
  40b336:	429a      	cmp	r2, r3
  40b338:	d01a      	beq.n	40b370 <__swbuf_r+0x80>
  40b33a:	89a3      	ldrh	r3, [r4, #12]
  40b33c:	07db      	lsls	r3, r3, #31
  40b33e:	d501      	bpl.n	40b344 <__swbuf_r+0x54>
  40b340:	2d0a      	cmp	r5, #10
  40b342:	d015      	beq.n	40b370 <__swbuf_r+0x80>
  40b344:	4638      	mov	r0, r7
  40b346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40b348:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40b34a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40b34e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40b352:	81a2      	strh	r2, [r4, #12]
  40b354:	6822      	ldr	r2, [r4, #0]
  40b356:	6661      	str	r1, [r4, #100]	; 0x64
  40b358:	6961      	ldr	r1, [r4, #20]
  40b35a:	1ad3      	subs	r3, r2, r3
  40b35c:	428b      	cmp	r3, r1
  40b35e:	dbe2      	blt.n	40b326 <__swbuf_r+0x36>
  40b360:	4621      	mov	r1, r4
  40b362:	4630      	mov	r0, r6
  40b364:	f7fe fbba 	bl	409adc <_fflush_r>
  40b368:	b940      	cbnz	r0, 40b37c <__swbuf_r+0x8c>
  40b36a:	6822      	ldr	r2, [r4, #0]
  40b36c:	2301      	movs	r3, #1
  40b36e:	e7db      	b.n	40b328 <__swbuf_r+0x38>
  40b370:	4621      	mov	r1, r4
  40b372:	4630      	mov	r0, r6
  40b374:	f7fe fbb2 	bl	409adc <_fflush_r>
  40b378:	2800      	cmp	r0, #0
  40b37a:	d0e3      	beq.n	40b344 <__swbuf_r+0x54>
  40b37c:	f04f 37ff 	mov.w	r7, #4294967295
  40b380:	e7e0      	b.n	40b344 <__swbuf_r+0x54>
  40b382:	4621      	mov	r1, r4
  40b384:	4630      	mov	r0, r6
  40b386:	f7fd fad7 	bl	408938 <__swsetup_r>
  40b38a:	2800      	cmp	r0, #0
  40b38c:	d1f6      	bne.n	40b37c <__swbuf_r+0x8c>
  40b38e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40b392:	6923      	ldr	r3, [r4, #16]
  40b394:	b291      	uxth	r1, r2
  40b396:	e7bd      	b.n	40b314 <__swbuf_r+0x24>
  40b398:	f7fe fbf8 	bl	409b8c <__sinit>
  40b39c:	e7b0      	b.n	40b300 <__swbuf_r+0x10>
  40b39e:	bf00      	nop

0040b3a0 <_wcrtomb_r>:
  40b3a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  40b3a2:	4606      	mov	r6, r0
  40b3a4:	b085      	sub	sp, #20
  40b3a6:	461f      	mov	r7, r3
  40b3a8:	b189      	cbz	r1, 40b3ce <_wcrtomb_r+0x2e>
  40b3aa:	4c10      	ldr	r4, [pc, #64]	; (40b3ec <_wcrtomb_r+0x4c>)
  40b3ac:	4d10      	ldr	r5, [pc, #64]	; (40b3f0 <_wcrtomb_r+0x50>)
  40b3ae:	6824      	ldr	r4, [r4, #0]
  40b3b0:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40b3b2:	2c00      	cmp	r4, #0
  40b3b4:	bf08      	it	eq
  40b3b6:	462c      	moveq	r4, r5
  40b3b8:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  40b3bc:	47a0      	blx	r4
  40b3be:	1c43      	adds	r3, r0, #1
  40b3c0:	d103      	bne.n	40b3ca <_wcrtomb_r+0x2a>
  40b3c2:	2200      	movs	r2, #0
  40b3c4:	238a      	movs	r3, #138	; 0x8a
  40b3c6:	603a      	str	r2, [r7, #0]
  40b3c8:	6033      	str	r3, [r6, #0]
  40b3ca:	b005      	add	sp, #20
  40b3cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40b3ce:	460c      	mov	r4, r1
  40b3d0:	4906      	ldr	r1, [pc, #24]	; (40b3ec <_wcrtomb_r+0x4c>)
  40b3d2:	4a07      	ldr	r2, [pc, #28]	; (40b3f0 <_wcrtomb_r+0x50>)
  40b3d4:	6809      	ldr	r1, [r1, #0]
  40b3d6:	6b49      	ldr	r1, [r1, #52]	; 0x34
  40b3d8:	2900      	cmp	r1, #0
  40b3da:	bf08      	it	eq
  40b3dc:	4611      	moveq	r1, r2
  40b3de:	4622      	mov	r2, r4
  40b3e0:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40b3e4:	a901      	add	r1, sp, #4
  40b3e6:	47a0      	blx	r4
  40b3e8:	e7e9      	b.n	40b3be <_wcrtomb_r+0x1e>
  40b3ea:	bf00      	nop
  40b3ec:	20400010 	.word	0x20400010
  40b3f0:	20400854 	.word	0x20400854

0040b3f4 <__ascii_wctomb>:
  40b3f4:	b121      	cbz	r1, 40b400 <__ascii_wctomb+0xc>
  40b3f6:	2aff      	cmp	r2, #255	; 0xff
  40b3f8:	d804      	bhi.n	40b404 <__ascii_wctomb+0x10>
  40b3fa:	700a      	strb	r2, [r1, #0]
  40b3fc:	2001      	movs	r0, #1
  40b3fe:	4770      	bx	lr
  40b400:	4608      	mov	r0, r1
  40b402:	4770      	bx	lr
  40b404:	238a      	movs	r3, #138	; 0x8a
  40b406:	6003      	str	r3, [r0, #0]
  40b408:	f04f 30ff 	mov.w	r0, #4294967295
  40b40c:	4770      	bx	lr
  40b40e:	bf00      	nop

0040b410 <__aeabi_d2iz>:
  40b410:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40b414:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40b418:	d215      	bcs.n	40b446 <__aeabi_d2iz+0x36>
  40b41a:	d511      	bpl.n	40b440 <__aeabi_d2iz+0x30>
  40b41c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40b420:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40b424:	d912      	bls.n	40b44c <__aeabi_d2iz+0x3c>
  40b426:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40b42a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40b42e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40b432:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40b436:	fa23 f002 	lsr.w	r0, r3, r2
  40b43a:	bf18      	it	ne
  40b43c:	4240      	negne	r0, r0
  40b43e:	4770      	bx	lr
  40b440:	f04f 0000 	mov.w	r0, #0
  40b444:	4770      	bx	lr
  40b446:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40b44a:	d105      	bne.n	40b458 <__aeabi_d2iz+0x48>
  40b44c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40b450:	bf08      	it	eq
  40b452:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40b456:	4770      	bx	lr
  40b458:	f04f 0000 	mov.w	r0, #0
  40b45c:	4770      	bx	lr
  40b45e:	bf00      	nop

0040b460 <__aeabi_uldivmod>:
  40b460:	b953      	cbnz	r3, 40b478 <__aeabi_uldivmod+0x18>
  40b462:	b94a      	cbnz	r2, 40b478 <__aeabi_uldivmod+0x18>
  40b464:	2900      	cmp	r1, #0
  40b466:	bf08      	it	eq
  40b468:	2800      	cmpeq	r0, #0
  40b46a:	bf1c      	itt	ne
  40b46c:	f04f 31ff 	movne.w	r1, #4294967295
  40b470:	f04f 30ff 	movne.w	r0, #4294967295
  40b474:	f000 b97a 	b.w	40b76c <__aeabi_idiv0>
  40b478:	f1ad 0c08 	sub.w	ip, sp, #8
  40b47c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40b480:	f000 f806 	bl	40b490 <__udivmoddi4>
  40b484:	f8dd e004 	ldr.w	lr, [sp, #4]
  40b488:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40b48c:	b004      	add	sp, #16
  40b48e:	4770      	bx	lr

0040b490 <__udivmoddi4>:
  40b490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40b494:	468c      	mov	ip, r1
  40b496:	460d      	mov	r5, r1
  40b498:	4604      	mov	r4, r0
  40b49a:	9e08      	ldr	r6, [sp, #32]
  40b49c:	2b00      	cmp	r3, #0
  40b49e:	d151      	bne.n	40b544 <__udivmoddi4+0xb4>
  40b4a0:	428a      	cmp	r2, r1
  40b4a2:	4617      	mov	r7, r2
  40b4a4:	d96d      	bls.n	40b582 <__udivmoddi4+0xf2>
  40b4a6:	fab2 fe82 	clz	lr, r2
  40b4aa:	f1be 0f00 	cmp.w	lr, #0
  40b4ae:	d00b      	beq.n	40b4c8 <__udivmoddi4+0x38>
  40b4b0:	f1ce 0c20 	rsb	ip, lr, #32
  40b4b4:	fa01 f50e 	lsl.w	r5, r1, lr
  40b4b8:	fa20 fc0c 	lsr.w	ip, r0, ip
  40b4bc:	fa02 f70e 	lsl.w	r7, r2, lr
  40b4c0:	ea4c 0c05 	orr.w	ip, ip, r5
  40b4c4:	fa00 f40e 	lsl.w	r4, r0, lr
  40b4c8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40b4cc:	0c25      	lsrs	r5, r4, #16
  40b4ce:	fbbc f8fa 	udiv	r8, ip, sl
  40b4d2:	fa1f f987 	uxth.w	r9, r7
  40b4d6:	fb0a cc18 	mls	ip, sl, r8, ip
  40b4da:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40b4de:	fb08 f309 	mul.w	r3, r8, r9
  40b4e2:	42ab      	cmp	r3, r5
  40b4e4:	d90a      	bls.n	40b4fc <__udivmoddi4+0x6c>
  40b4e6:	19ed      	adds	r5, r5, r7
  40b4e8:	f108 32ff 	add.w	r2, r8, #4294967295
  40b4ec:	f080 8123 	bcs.w	40b736 <__udivmoddi4+0x2a6>
  40b4f0:	42ab      	cmp	r3, r5
  40b4f2:	f240 8120 	bls.w	40b736 <__udivmoddi4+0x2a6>
  40b4f6:	f1a8 0802 	sub.w	r8, r8, #2
  40b4fa:	443d      	add	r5, r7
  40b4fc:	1aed      	subs	r5, r5, r3
  40b4fe:	b2a4      	uxth	r4, r4
  40b500:	fbb5 f0fa 	udiv	r0, r5, sl
  40b504:	fb0a 5510 	mls	r5, sl, r0, r5
  40b508:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40b50c:	fb00 f909 	mul.w	r9, r0, r9
  40b510:	45a1      	cmp	r9, r4
  40b512:	d909      	bls.n	40b528 <__udivmoddi4+0x98>
  40b514:	19e4      	adds	r4, r4, r7
  40b516:	f100 33ff 	add.w	r3, r0, #4294967295
  40b51a:	f080 810a 	bcs.w	40b732 <__udivmoddi4+0x2a2>
  40b51e:	45a1      	cmp	r9, r4
  40b520:	f240 8107 	bls.w	40b732 <__udivmoddi4+0x2a2>
  40b524:	3802      	subs	r0, #2
  40b526:	443c      	add	r4, r7
  40b528:	eba4 0409 	sub.w	r4, r4, r9
  40b52c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40b530:	2100      	movs	r1, #0
  40b532:	2e00      	cmp	r6, #0
  40b534:	d061      	beq.n	40b5fa <__udivmoddi4+0x16a>
  40b536:	fa24 f40e 	lsr.w	r4, r4, lr
  40b53a:	2300      	movs	r3, #0
  40b53c:	6034      	str	r4, [r6, #0]
  40b53e:	6073      	str	r3, [r6, #4]
  40b540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b544:	428b      	cmp	r3, r1
  40b546:	d907      	bls.n	40b558 <__udivmoddi4+0xc8>
  40b548:	2e00      	cmp	r6, #0
  40b54a:	d054      	beq.n	40b5f6 <__udivmoddi4+0x166>
  40b54c:	2100      	movs	r1, #0
  40b54e:	e886 0021 	stmia.w	r6, {r0, r5}
  40b552:	4608      	mov	r0, r1
  40b554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b558:	fab3 f183 	clz	r1, r3
  40b55c:	2900      	cmp	r1, #0
  40b55e:	f040 808e 	bne.w	40b67e <__udivmoddi4+0x1ee>
  40b562:	42ab      	cmp	r3, r5
  40b564:	d302      	bcc.n	40b56c <__udivmoddi4+0xdc>
  40b566:	4282      	cmp	r2, r0
  40b568:	f200 80fa 	bhi.w	40b760 <__udivmoddi4+0x2d0>
  40b56c:	1a84      	subs	r4, r0, r2
  40b56e:	eb65 0503 	sbc.w	r5, r5, r3
  40b572:	2001      	movs	r0, #1
  40b574:	46ac      	mov	ip, r5
  40b576:	2e00      	cmp	r6, #0
  40b578:	d03f      	beq.n	40b5fa <__udivmoddi4+0x16a>
  40b57a:	e886 1010 	stmia.w	r6, {r4, ip}
  40b57e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b582:	b912      	cbnz	r2, 40b58a <__udivmoddi4+0xfa>
  40b584:	2701      	movs	r7, #1
  40b586:	fbb7 f7f2 	udiv	r7, r7, r2
  40b58a:	fab7 fe87 	clz	lr, r7
  40b58e:	f1be 0f00 	cmp.w	lr, #0
  40b592:	d134      	bne.n	40b5fe <__udivmoddi4+0x16e>
  40b594:	1beb      	subs	r3, r5, r7
  40b596:	0c3a      	lsrs	r2, r7, #16
  40b598:	fa1f fc87 	uxth.w	ip, r7
  40b59c:	2101      	movs	r1, #1
  40b59e:	fbb3 f8f2 	udiv	r8, r3, r2
  40b5a2:	0c25      	lsrs	r5, r4, #16
  40b5a4:	fb02 3318 	mls	r3, r2, r8, r3
  40b5a8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40b5ac:	fb0c f308 	mul.w	r3, ip, r8
  40b5b0:	42ab      	cmp	r3, r5
  40b5b2:	d907      	bls.n	40b5c4 <__udivmoddi4+0x134>
  40b5b4:	19ed      	adds	r5, r5, r7
  40b5b6:	f108 30ff 	add.w	r0, r8, #4294967295
  40b5ba:	d202      	bcs.n	40b5c2 <__udivmoddi4+0x132>
  40b5bc:	42ab      	cmp	r3, r5
  40b5be:	f200 80d1 	bhi.w	40b764 <__udivmoddi4+0x2d4>
  40b5c2:	4680      	mov	r8, r0
  40b5c4:	1aed      	subs	r5, r5, r3
  40b5c6:	b2a3      	uxth	r3, r4
  40b5c8:	fbb5 f0f2 	udiv	r0, r5, r2
  40b5cc:	fb02 5510 	mls	r5, r2, r0, r5
  40b5d0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40b5d4:	fb0c fc00 	mul.w	ip, ip, r0
  40b5d8:	45a4      	cmp	ip, r4
  40b5da:	d907      	bls.n	40b5ec <__udivmoddi4+0x15c>
  40b5dc:	19e4      	adds	r4, r4, r7
  40b5de:	f100 33ff 	add.w	r3, r0, #4294967295
  40b5e2:	d202      	bcs.n	40b5ea <__udivmoddi4+0x15a>
  40b5e4:	45a4      	cmp	ip, r4
  40b5e6:	f200 80b8 	bhi.w	40b75a <__udivmoddi4+0x2ca>
  40b5ea:	4618      	mov	r0, r3
  40b5ec:	eba4 040c 	sub.w	r4, r4, ip
  40b5f0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40b5f4:	e79d      	b.n	40b532 <__udivmoddi4+0xa2>
  40b5f6:	4631      	mov	r1, r6
  40b5f8:	4630      	mov	r0, r6
  40b5fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b5fe:	f1ce 0420 	rsb	r4, lr, #32
  40b602:	fa05 f30e 	lsl.w	r3, r5, lr
  40b606:	fa07 f70e 	lsl.w	r7, r7, lr
  40b60a:	fa20 f804 	lsr.w	r8, r0, r4
  40b60e:	0c3a      	lsrs	r2, r7, #16
  40b610:	fa25 f404 	lsr.w	r4, r5, r4
  40b614:	ea48 0803 	orr.w	r8, r8, r3
  40b618:	fbb4 f1f2 	udiv	r1, r4, r2
  40b61c:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40b620:	fb02 4411 	mls	r4, r2, r1, r4
  40b624:	fa1f fc87 	uxth.w	ip, r7
  40b628:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40b62c:	fb01 f30c 	mul.w	r3, r1, ip
  40b630:	42ab      	cmp	r3, r5
  40b632:	fa00 f40e 	lsl.w	r4, r0, lr
  40b636:	d909      	bls.n	40b64c <__udivmoddi4+0x1bc>
  40b638:	19ed      	adds	r5, r5, r7
  40b63a:	f101 30ff 	add.w	r0, r1, #4294967295
  40b63e:	f080 808a 	bcs.w	40b756 <__udivmoddi4+0x2c6>
  40b642:	42ab      	cmp	r3, r5
  40b644:	f240 8087 	bls.w	40b756 <__udivmoddi4+0x2c6>
  40b648:	3902      	subs	r1, #2
  40b64a:	443d      	add	r5, r7
  40b64c:	1aeb      	subs	r3, r5, r3
  40b64e:	fa1f f588 	uxth.w	r5, r8
  40b652:	fbb3 f0f2 	udiv	r0, r3, r2
  40b656:	fb02 3310 	mls	r3, r2, r0, r3
  40b65a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40b65e:	fb00 f30c 	mul.w	r3, r0, ip
  40b662:	42ab      	cmp	r3, r5
  40b664:	d907      	bls.n	40b676 <__udivmoddi4+0x1e6>
  40b666:	19ed      	adds	r5, r5, r7
  40b668:	f100 38ff 	add.w	r8, r0, #4294967295
  40b66c:	d26f      	bcs.n	40b74e <__udivmoddi4+0x2be>
  40b66e:	42ab      	cmp	r3, r5
  40b670:	d96d      	bls.n	40b74e <__udivmoddi4+0x2be>
  40b672:	3802      	subs	r0, #2
  40b674:	443d      	add	r5, r7
  40b676:	1aeb      	subs	r3, r5, r3
  40b678:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40b67c:	e78f      	b.n	40b59e <__udivmoddi4+0x10e>
  40b67e:	f1c1 0720 	rsb	r7, r1, #32
  40b682:	fa22 f807 	lsr.w	r8, r2, r7
  40b686:	408b      	lsls	r3, r1
  40b688:	fa05 f401 	lsl.w	r4, r5, r1
  40b68c:	ea48 0303 	orr.w	r3, r8, r3
  40b690:	fa20 fe07 	lsr.w	lr, r0, r7
  40b694:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40b698:	40fd      	lsrs	r5, r7
  40b69a:	ea4e 0e04 	orr.w	lr, lr, r4
  40b69e:	fbb5 f9fc 	udiv	r9, r5, ip
  40b6a2:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40b6a6:	fb0c 5519 	mls	r5, ip, r9, r5
  40b6aa:	fa1f f883 	uxth.w	r8, r3
  40b6ae:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40b6b2:	fb09 f408 	mul.w	r4, r9, r8
  40b6b6:	42ac      	cmp	r4, r5
  40b6b8:	fa02 f201 	lsl.w	r2, r2, r1
  40b6bc:	fa00 fa01 	lsl.w	sl, r0, r1
  40b6c0:	d908      	bls.n	40b6d4 <__udivmoddi4+0x244>
  40b6c2:	18ed      	adds	r5, r5, r3
  40b6c4:	f109 30ff 	add.w	r0, r9, #4294967295
  40b6c8:	d243      	bcs.n	40b752 <__udivmoddi4+0x2c2>
  40b6ca:	42ac      	cmp	r4, r5
  40b6cc:	d941      	bls.n	40b752 <__udivmoddi4+0x2c2>
  40b6ce:	f1a9 0902 	sub.w	r9, r9, #2
  40b6d2:	441d      	add	r5, r3
  40b6d4:	1b2d      	subs	r5, r5, r4
  40b6d6:	fa1f fe8e 	uxth.w	lr, lr
  40b6da:	fbb5 f0fc 	udiv	r0, r5, ip
  40b6de:	fb0c 5510 	mls	r5, ip, r0, r5
  40b6e2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40b6e6:	fb00 f808 	mul.w	r8, r0, r8
  40b6ea:	45a0      	cmp	r8, r4
  40b6ec:	d907      	bls.n	40b6fe <__udivmoddi4+0x26e>
  40b6ee:	18e4      	adds	r4, r4, r3
  40b6f0:	f100 35ff 	add.w	r5, r0, #4294967295
  40b6f4:	d229      	bcs.n	40b74a <__udivmoddi4+0x2ba>
  40b6f6:	45a0      	cmp	r8, r4
  40b6f8:	d927      	bls.n	40b74a <__udivmoddi4+0x2ba>
  40b6fa:	3802      	subs	r0, #2
  40b6fc:	441c      	add	r4, r3
  40b6fe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40b702:	eba4 0408 	sub.w	r4, r4, r8
  40b706:	fba0 8902 	umull	r8, r9, r0, r2
  40b70a:	454c      	cmp	r4, r9
  40b70c:	46c6      	mov	lr, r8
  40b70e:	464d      	mov	r5, r9
  40b710:	d315      	bcc.n	40b73e <__udivmoddi4+0x2ae>
  40b712:	d012      	beq.n	40b73a <__udivmoddi4+0x2aa>
  40b714:	b156      	cbz	r6, 40b72c <__udivmoddi4+0x29c>
  40b716:	ebba 030e 	subs.w	r3, sl, lr
  40b71a:	eb64 0405 	sbc.w	r4, r4, r5
  40b71e:	fa04 f707 	lsl.w	r7, r4, r7
  40b722:	40cb      	lsrs	r3, r1
  40b724:	431f      	orrs	r7, r3
  40b726:	40cc      	lsrs	r4, r1
  40b728:	6037      	str	r7, [r6, #0]
  40b72a:	6074      	str	r4, [r6, #4]
  40b72c:	2100      	movs	r1, #0
  40b72e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b732:	4618      	mov	r0, r3
  40b734:	e6f8      	b.n	40b528 <__udivmoddi4+0x98>
  40b736:	4690      	mov	r8, r2
  40b738:	e6e0      	b.n	40b4fc <__udivmoddi4+0x6c>
  40b73a:	45c2      	cmp	sl, r8
  40b73c:	d2ea      	bcs.n	40b714 <__udivmoddi4+0x284>
  40b73e:	ebb8 0e02 	subs.w	lr, r8, r2
  40b742:	eb69 0503 	sbc.w	r5, r9, r3
  40b746:	3801      	subs	r0, #1
  40b748:	e7e4      	b.n	40b714 <__udivmoddi4+0x284>
  40b74a:	4628      	mov	r0, r5
  40b74c:	e7d7      	b.n	40b6fe <__udivmoddi4+0x26e>
  40b74e:	4640      	mov	r0, r8
  40b750:	e791      	b.n	40b676 <__udivmoddi4+0x1e6>
  40b752:	4681      	mov	r9, r0
  40b754:	e7be      	b.n	40b6d4 <__udivmoddi4+0x244>
  40b756:	4601      	mov	r1, r0
  40b758:	e778      	b.n	40b64c <__udivmoddi4+0x1bc>
  40b75a:	3802      	subs	r0, #2
  40b75c:	443c      	add	r4, r7
  40b75e:	e745      	b.n	40b5ec <__udivmoddi4+0x15c>
  40b760:	4608      	mov	r0, r1
  40b762:	e708      	b.n	40b576 <__udivmoddi4+0xe6>
  40b764:	f1a8 0802 	sub.w	r8, r8, #2
  40b768:	443d      	add	r5, r7
  40b76a:	e72b      	b.n	40b5c4 <__udivmoddi4+0x134>

0040b76c <__aeabi_idiv0>:
  40b76c:	4770      	bx	lr
  40b76e:	bf00      	nop
  40b770:	454c4449 	.word	0x454c4449
  40b774:	00000000 	.word	0x00000000
  40b778:	51726d54 	.word	0x51726d54
  40b77c:	00000000 	.word	0x00000000
  40b780:	20726d54 	.word	0x20726d54
  40b784:	00637653 	.word	0x00637653
  40b788:	3f000000 	.word	0x3f000000
  40b78c:	42b40000 	.word	0x42b40000
  40b790:	42b40000 	.word	0x42b40000
  40b794:	00000000 	.word	0x00000000
  40b798:	686c6166 	.word	0x686c6166
  40b79c:	6d652061 	.word	0x6d652061
  40b7a0:	69726320 	.word	0x69726320
  40b7a4:	6f207261 	.word	0x6f207261
  40b7a8:	6d657320 	.word	0x6d657320
  40b7ac:	726f6661 	.word	0x726f6661
  40b7b0:	656c206f 	.word	0x656c206f
  40b7b4:	00002064 	.word	0x00002064
  40b7b8:	46202d2d 	.word	0x46202d2d
  40b7bc:	72656572 	.word	0x72656572
  40b7c0:	20736f74 	.word	0x20736f74
  40b7c4:	6d617845 	.word	0x6d617845
  40b7c8:	20656c70 	.word	0x20656c70
  40b7cc:	0d0a2d2d 	.word	0x0d0a2d2d
  40b7d0:	00000000 	.word	0x00000000
  40b7d4:	454d4153 	.word	0x454d4153
  40b7d8:	582d3037 	.word	0x582d3037
  40b7dc:	00444c50 	.word	0x00444c50
  40b7e0:	25202d2d 	.word	0x25202d2d
  40b7e4:	000d0a73 	.word	0x000d0a73
  40b7e8:	6569724f 	.word	0x6569724f
  40b7ec:	6361746e 	.word	0x6361746e
  40b7f0:	00006f61 	.word	0x00006f61
  40b7f4:	6c696146 	.word	0x6c696146
  40b7f8:	74206465 	.word	0x74206465
  40b7fc:	7263206f 	.word	0x7263206f
  40b800:	65746165 	.word	0x65746165
  40b804:	69726f20 	.word	0x69726f20
  40b808:	61746e65 	.word	0x61746e65
  40b80c:	206f6163 	.word	0x206f6163
  40b810:	6b736174 	.word	0x6b736174
  40b814:	0000000d 	.word	0x0000000d
  40b818:	73756f48 	.word	0x73756f48
  40b81c:	776f4465 	.word	0x776f4465
  40b820:	0000006e 	.word	0x0000006e
  40b824:	6c696146 	.word	0x6c696146
  40b828:	74206465 	.word	0x74206465
  40b82c:	7263206f 	.word	0x7263206f
  40b830:	65746165 	.word	0x65746165
  40b834:	756d6920 	.word	0x756d6920
  40b838:	73617420 	.word	0x73617420
  40b83c:	00000d6b 	.word	0x00000d6b
  40b840:	00756d49 	.word	0x00756d49
  40b844:	5252455b 	.word	0x5252455b
  40b848:	5b205d4f 	.word	0x5b205d4f
  40b84c:	5d633269 	.word	0x5d633269
  40b850:	72705b20 	.word	0x72705b20
  40b854:	5d65626f 	.word	0x5d65626f
  40b858:	00000020 	.word	0x00000020
  40b85c:	4441445b 	.word	0x4441445b
  40b860:	5b205d4f 	.word	0x5b205d4f
  40b864:	5d633269 	.word	0x5d633269
  40b868:	6f727020 	.word	0x6f727020
  40b86c:	4f206562 	.word	0x4f206562
  40b870:	0000004b 	.word	0x0000004b
  40b874:	5252455b 	.word	0x5252455b
  40b878:	5b205d4f 	.word	0x5b205d4f
  40b87c:	5d633269 	.word	0x5d633269
  40b880:	65725b20 	.word	0x65725b20
  40b884:	205d6461 	.word	0x205d6461
  40b888:	00000000 	.word	0x00000000
  40b88c:	4441445b 	.word	0x4441445b
  40b890:	5b205d4f 	.word	0x5b205d4f
  40b894:	5d633269 	.word	0x5d633269
  40b898:	3a782520 	.word	0x3a782520
  40b89c:	0a207825 	.word	0x0a207825
  40b8a0:	00000000 	.word	0x00000000
  40b8a4:	65637553 	.word	0x65637553
  40b8a8:	216f7373 	.word	0x216f7373
  40b8ac:	55504d20 	.word	0x55504d20
  40b8b0:	30353036 	.word	0x30353036
  40b8b4:	636e6520 	.word	0x636e6520
  40b8b8:	72746e6f 	.word	0x72746e6f
  40b8bc:	216f6461 	.word	0x216f6461
  40b8c0:	0000000d 	.word	0x0000000d
  40b8c4:	686c6146 	.word	0x686c6146
  40b8c8:	4d202161 	.word	0x4d202161
  40b8cc:	30365550 	.word	0x30365550
  40b8d0:	6e203035 	.word	0x6e203035
  40b8d4:	206fa3c3 	.word	0x206fa3c3
  40b8d8:	6f636e65 	.word	0x6f636e65
  40b8dc:	6172746e 	.word	0x6172746e
  40b8e0:	0d216f64 	.word	0x0d216f64
  40b8e4:	00000000 	.word	0x00000000
  40b8e8:	5252455b 	.word	0x5252455b
  40b8ec:	5b205d4f 	.word	0x5b205d4f
  40b8f0:	5d633269 	.word	0x5d633269
  40b8f4:	72775b20 	.word	0x72775b20
  40b8f8:	5d657469 	.word	0x5d657469
  40b8fc:	00000020 	.word	0x00000020
  40b900:	6c6c6f52 	.word	0x6c6c6f52
  40b904:	2e302520 	.word	0x2e302520
  40b908:	202c6631 	.word	0x202c6631
  40b90c:	63746950 	.word	0x63746950
  40b910:	30252068 	.word	0x30252068
  40b914:	2c66312e 	.word	0x2c66312e
  40b918:	77615920 	.word	0x77615920
  40b91c:	2e302520 	.word	0x2e302520
  40b920:	000a6631 	.word	0x000a6631
  40b924:	63617473 	.word	0x63617473
  40b928:	766f206b 	.word	0x766f206b
  40b92c:	6c667265 	.word	0x6c667265
  40b930:	2520776f 	.word	0x2520776f
  40b934:	73252078 	.word	0x73252078
  40b938:	00000a0d 	.word	0x00000a0d
  40b93c:	74727173 	.word	0x74727173
  40b940:	00000000 	.word	0x00000000
  40b944:	6e697361 	.word	0x6e697361
  40b948:	00000066 	.word	0x00000066

0040b94c <npio2_hw>:
  40b94c:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
  40b95c:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
  40b96c:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
  40b97c:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
  40b98c:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
  40b99c:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
  40b9ac:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
  40b9bc:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

0040b9cc <two_over_pi>:
  40b9cc:	000000a2 000000f9 00000083 0000006e     ............n...
  40b9dc:	0000004e 00000044 00000015 00000029     N...D.......)...
  40b9ec:	000000fc 00000027 00000057 000000d1     ....'...W.......
  40b9fc:	000000f5 00000034 000000dd 000000c0     ....4...........
  40ba0c:	000000db 00000062 00000095 00000099     ....b...........
  40ba1c:	0000003c 00000043 00000090 00000041     <...C.......A...
  40ba2c:	000000fe 00000051 00000063 000000ab     ....Q...c.......
  40ba3c:	000000de 000000bb 000000c5 00000061     ............a...
  40ba4c:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
  40ba5c:	00000042 0000004d 000000d2 000000e0     B...M...........
  40ba6c:	00000006 00000049 0000002e 000000ea     ....I...........
  40ba7c:	00000009 000000d1 00000092 0000001c     ................
  40ba8c:	000000fe 0000001d 000000eb 0000001c     ................
  40ba9c:	000000b1 00000029 000000a7 0000003e     ....).......>...
  40baac:	000000e8 00000082 00000035 000000f5     ........5.......
  40babc:	0000002e 000000bb 00000044 00000084     ........D.......
  40bacc:	000000e9 0000009c 00000070 00000026     ........p...&...
  40badc:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
  40baec:	00000039 00000091 000000d6 00000039     9...........9...
  40bafc:	00000083 00000053 00000039 000000f4     ....S...9.......
  40bb0c:	0000009c 00000084 0000005f 0000008b     ........_.......
  40bb1c:	000000bd 000000f9 00000028 0000003b     ........(...;...
  40bb2c:	0000001f 000000f8 00000097 000000ff     ................
  40bb3c:	000000de 00000005 00000098 0000000f     ................
  40bb4c:	000000ef 0000002f 00000011 0000008b     ..../...........
  40bb5c:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
  40bb6c:	0000006d 00000036 0000007e 000000cf     m...6...~.......
  40bb7c:	00000027 000000cb 00000009 000000b7     '...............
  40bb8c:	0000004f 00000046 0000003f 00000066     O...F...?...f...
  40bb9c:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
  40bbac:	00000075 00000027 000000ba 000000c7     u...'...........
  40bbbc:	000000eb 000000e5 000000f1 0000007b     ............{...
  40bbcc:	0000003d 00000007 00000039 000000f7     =.......9.......
  40bbdc:	0000008a 00000052 00000092 000000ea     ....R...........
  40bbec:	0000006b 000000fb 0000005f 000000b1     k......._.......
  40bbfc:	0000001f 0000008d 0000005d 00000008     ........].......
  40bc0c:	00000056 00000003 00000030 00000046     V.......0...F...
  40bc1c:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
  40bc2c:	000000f0 000000cf 000000bc 00000020     ............ ...
  40bc3c:	0000009a 000000f4 00000036 0000001d     ........6.......
  40bc4c:	000000a9 000000e3 00000091 00000061     ............a...
  40bc5c:	0000005e 000000e6 0000001b 00000008     ^...............
  40bc6c:	00000065 00000099 00000085 0000005f     e..........._...
  40bc7c:	00000014 000000a0 00000068 00000040     ........h...@...
  40bc8c:	0000008d 000000ff 000000d8 00000080     ................
  40bc9c:	0000004d 00000073 00000027 00000031     M...s...'...1...
  40bcac:	00000006 00000006 00000015 00000056     ............V...
  40bcbc:	000000ca 00000073 000000a8 000000c9     ....s...........
  40bccc:	00000060 000000e2 0000007b 000000c0     `.......{.......
  40bcdc:	0000008c 0000006b                       ....k...

0040bce4 <PIo2>:
  40bce4:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
  40bcf4:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
  40bd04:	1fc40000 1bc60000 17440000              ..........D.

0040bd10 <init_jk>:
  40bd10:	00000004 00000007 00000009              ............

0040bd1c <atanhi>:
  40bd1c:	3eed6338 3f490fda 3f7b985e 3fc90fda     8c.>..I?^.{?...?

0040bd2c <atanlo>:
  40bd2c:	31ac3769 33222168 33140fb4 33a22168     i7.1h!"3...3h!.3

0040bd3c <_global_impure_ptr>:
  40bd3c:	20400018 0000000a 00464e49 00666e69     ..@ ....INF.inf.
  40bd4c:	004e414e 006e616e 33323130 37363534     NAN.nan.01234567
  40bd5c:	42413938 46454443 00000000 33323130     89ABCDEF....0123
  40bd6c:	37363534 62613938 66656463 00000000     456789abcdef....
  40bd7c:	6c756e28 0000296c 00000030              (null)..0...

0040bd88 <blanks.7238>:
  40bd88:	20202020 20202020 20202020 20202020                     

0040bd98 <zeroes.7239>:
  40bd98:	30303030 30303030 30303030 30303030     0000000000000000
  40bda8:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

0040bdb8 <__mprec_bigtens>:
  40bdb8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  40bdc8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  40bdd8:	7f73bf3c 75154fdd                       <.s..O.u

0040bde0 <__mprec_tens>:
  40bde0:	00000000 3ff00000 00000000 40240000     .......?......$@
  40bdf0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  40be00:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  40be10:	00000000 412e8480 00000000 416312d0     .......A......cA
  40be20:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  40be30:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  40be40:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  40be50:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  40be60:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  40be70:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  40be80:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  40be90:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  40bea0:	79d99db4 44ea7843                       ...yCx.D

0040bea8 <p05.6055>:
  40bea8:	00000005 00000019 0000007d 00000043     ........}...C...
  40beb8:	49534f50 00000058 0000002e              POSIX.......

0040bec4 <_ctype_>:
  40bec4:	20202000 20202020 28282020 20282828     .         ((((( 
  40bed4:	20202020 20202020 20202020 20202020                     
  40bee4:	10108820 10101010 10101010 10101010      ...............
  40bef4:	04040410 04040404 10040404 10101010     ................
  40bf04:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40bf14:	01010101 01010101 01010101 10101010     ................
  40bf24:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40bf34:	02020202 02020202 02020202 10101010     ................
  40bf44:	00000020 00000000 00000000 00000000      ...............
	...

0040bfc8 <_init>:
  40bfc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40bfca:	bf00      	nop
  40bfcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40bfce:	bc08      	pop	{r3}
  40bfd0:	469e      	mov	lr, r3
  40bfd2:	4770      	bx	lr

0040bfd4 <__init_array_start>:
  40bfd4:	00408a01 	.word	0x00408a01

0040bfd8 <__frame_dummy_init_array_entry>:
  40bfd8:	0040018d                                ..@.

0040bfdc <_fini>:
  40bfdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40bfde:	bf00      	nop
  40bfe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40bfe2:	bc08      	pop	{r3}
  40bfe4:	469e      	mov	lr, r3
  40bfe6:	4770      	bx	lr

0040bfe8 <__fini_array_start>:
  40bfe8:	00400169 	.word	0x00400169
